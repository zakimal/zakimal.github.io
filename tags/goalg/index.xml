<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goalg | zak</title>
    <link>/tags/goalg/</link>
      <atom:link href="/tags/goalg/index.xml" rel="self" type="application/rss+xml" />
    <description>Goalg</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-JP</language><copyright>© zak 2020</copyright><lastBuildDate>Thu, 31 Oct 2019 22:32:28 +0900</lastBuildDate>
    <image>
      <url>/img/icon-1080.png</url>
      <title>Goalg</title>
      <link>/tags/goalg/</link>
    </image>
    
    <item>
      <title>Golang channels tutorial</title>
      <link>/post/golang-channels-tutorial/</link>
      <pubDate>Thu, 31 Oct 2019 22:32:28 +0900</pubDate>
      <guid>/post/golang-channels-tutorial/</guid>
      <description>&lt;h2 id=&#34;golangとconcurrentなプログラミング&#34;&gt;golangとconcurrentなプログラミング&lt;/h2&gt;

&lt;p&gt;「concurrentな処理をどのように実現するか」はざっくり分けて2アプローチがある．&lt;/p&gt;

&lt;p&gt;1つは「shared-memory communication」．つまり処理を実行しているworker同士は，メモリを共有して，その共有しているメモリを用いてコミュニケーションを取るというもの．この場合，データ競合が発生しないようにロックを取ったりなどの排他処理を伴うことになって，大抵の場合実装が難しくなるとされている．&lt;/p&gt;

&lt;p&gt;もう1つは「message-passing communication」．つまり処理を実行しているworker同士は，メッセージをやり取りし合うことでコミュニケーションを取るというもの．&lt;/p&gt;

&lt;p&gt;それぞれのアプローチでいろんな実装が世の中にはすでに存在していて，例えばCでconcurrentなプログラムを書こうとするとshared-memory communicationな形で書くことになる．一方でErlangは言語としてconcurrentなプログラミングをサポートしていて，Actorモデルを実装してる．&lt;/p&gt;

&lt;p&gt;golangは，設計の時点でconcurrentなプログラミングは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という思想で実装することとしている．golangのconcurrentなプログラミングの実装は「&lt;a href=&#34;http://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;Communicating Sequential Processes&lt;/a&gt;」と「&lt;a href=&#34;http://en.wikipedia.org/wiki/%CE%A0-calculus&#34;&gt;$\pi$-caluculus&lt;/a&gt;」を参考にしている．&lt;/p&gt;

&lt;p&gt;golangは「concurrentなプログラミングを簡潔にわかりやすく記述すること」を言語の設計レベルからサポートしているので，concurrentな処理がとても書きやすくなっている．じゃあgolangではどうやってconcurrentなプログラミングをサポートしているのかというと，concurrentなプログラミングのプリミティブとしてgoroutine，channelを提供している．&lt;/p&gt;

&lt;p&gt;「golangはconcurrentな処理が書きやすいんだよね」という話をすると混乱しがちなのが， &lt;strong&gt;「golangはconcurrentな処理を書くための道具を提供してくれるが，その実行がparallelであるかどうかはハードウェアに依存する」&lt;/strong&gt; という点．concurrentな処理は，parallelに実行することができるかもしれない（し大抵parallelに実行できるならそうしたほうがいい）が，それはハードウェアがparallelな実行をサポートしているか（例えばCPUが複数コア搭載しているか）によって決まってくる話であって，&lt;strong&gt;「プログラムがconcurrentであること」と「プログラムの実行がparallelであること」は関連はしているけれども，全く別の話．&lt;/strong&gt;Rob Pike先生も&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. Not the same, but related. &lt;strong&gt;Concurrency is about structure, parallelism is about execution.&lt;/strong&gt; Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;って仰っている．&lt;/p&gt;

&lt;h2 id=&#34;hello-goroutine&#34;&gt;Hello, goroutine!&lt;/h2&gt;

&lt;iframe src=&#34;https://play.golang.org/p/gHKEj4ai20c&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;「golangではconcurrentなプログラムを書きやすい」ということだったので，実際にconcurrentなプログラムを書いてみると上の例みたいになる．concurrentに処理を実行するworkerは，golangの世界では&lt;code&gt;gorutine&lt;/code&gt;と呼ばれていて，&lt;code&gt;go&lt;/code&gt;という魔法の言葉に続けてworkerで実行してほしい関数を呼び出せば，それでconcurrentな処理を書き下したことになる．なんて簡単なんだ...！&lt;/p&gt;

&lt;p&gt;上の例を実行すると，&lt;code&gt;Hello! I&#39;m main&lt;/code&gt;って印字されて，もしかしたら&lt;code&gt;Hi! I&#39;m goroutine!&lt;/code&gt;も一緒に印字される &lt;strong&gt;かもしれない&lt;/strong&gt;．「かもしれない」っていうのは，goroutineは「あるgoroutineの親は自分の子供の処理が終わるのを待たない」ことになっている．この場合だと&lt;code&gt;main&lt;/code&gt;が親で&lt;code&gt;go fmt.Println(&amp;quot;Hi! I&#39;m goroutine!&amp;quot;)&lt;/code&gt;が子供の関係になっていて，&lt;code&gt;main&lt;/code&gt;の&lt;code&gt;fmt.Println(&amp;quot;Hello! I&#39;m main&amp;quot;)&lt;/code&gt;の終了したら，その時点で子供の実行も終了させられてしまう．もし，子供のgoroutineが自己紹介し終わる前に親が自己紹介しきっちゃえば子供の自己紹介は印字されないし，親の自己紹介が終わる前に子供が自己紹介しきっちゃえば，親子両方の自己紹介が聞けることになる．&lt;/p&gt;

&lt;p&gt;「なるほど．でも親が先に終わっちゃうと子供も強制終了って，それどうにかならないの？」って思った方は賢くて，どうにかするためにgoroutine間でおしゃべりできるchannelというデータ構造が実装してある．&lt;/p&gt;

&lt;h2 id=&#34;nice-to-meet-you-channel&#34;&gt;Nice to meet you, channel!&lt;/h2&gt;

&lt;p&gt;channelはgoroutineたちが同期しながらconcurrentな処理を実行していくためのmessage-passingのメカニズムを提供してくれる．channelは「そのchannelを通じてやり取りするデータの型・バッファサイズ・メッセージのやり取りの方向」で定義されて，組み込み関数の&lt;code&gt;make()&lt;/code&gt;で簡単に作ることができる．&lt;/p&gt;

&lt;p&gt;golangでは「channelはfirst-class value」として扱われる．つまりchannelは，他の値（例えばなんらかの構造体とか&lt;code&gt;int&lt;/code&gt;型の変数とか関数とか）と同じレベルで扱われる．だから関数がchannelを返すなんてこともできるし，関数の引数にchannelを与えることもできるし，channelのchannelも定義できる．&lt;/p&gt;

&lt;p&gt;channelの入出力の方向は&lt;code&gt;&amp;lt;-&lt;/code&gt;という演算子で表現することになっている．&lt;code&gt;&amp;lt;- c&lt;/code&gt;って書けばchannel &lt;code&gt;c&lt;/code&gt;からデータを読み込むことになるし，&lt;code&gt;c &amp;lt;- 1&lt;/code&gt;って書けばchannel &lt;code&gt;c&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を書き込んだことになる．&lt;/p&gt;

&lt;p&gt;ということで，channelを使った簡単ばプログラムを書いてみるとこんな感じになる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/id0QnvLdbFn&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;channel &lt;code&gt;done&lt;/code&gt; を使って「僕は自己紹介終わったよママ」って子供のgoroutineが親&lt;code&gt;main&lt;/code&gt;に連絡することで，実行が同期されて両方の自己紹介が聞けるようになった．&lt;/p&gt;

&lt;p&gt;channel &lt;code&gt;done&lt;/code&gt;は「&lt;code&gt;bool&lt;/code&gt;値を通す，バッファが0の，読み書きができるchannel」として定義されている．golangでは「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」ことになっている．なので，この例だと，確実に子供goroutineの自己紹介を聞くことができることになる．「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」という挙動から&lt;strong&gt;バッファが0のchannelは「synchronous」と言える&lt;/strong&gt;．&lt;/p&gt;

&lt;p&gt;下の例を実行すると，channel &lt;code&gt;message&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を送り終わってから，&lt;code&gt;main&lt;/code&gt;が1秒寝てしまうので，子供はchannel &lt;code&gt;message&lt;/code&gt;に続く&lt;code&gt;2&lt;/code&gt;，&lt;code&gt;3&lt;/code&gt;を送れなくて，止められてしまう．この挙動はsynchronousということになる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/3z4aodIMk7v&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;一方で，バッファのあるchannelに対する読み書きは「バッファが空でないなら読み込みはブロックされない」「バッファが一杯でないなら書き込みはブロックされない」という挙動になっている．なので，&lt;strong&gt;バッファのあるchannelは「asynchronous」と言える&lt;/strong&gt;．&lt;/p&gt;

&lt;p&gt;下の例を実行すると，channel &lt;code&gt;message&lt;/code&gt;はバッファを持っているので子供は&lt;code&gt;1&lt;/code&gt;，&lt;code&gt;2&lt;/code&gt;，&lt;code&gt;3&lt;/code&gt;，&lt;code&gt;4&lt;/code&gt;と（&lt;code&gt;main&lt;/code&gt;が眠りから覚める前に）立て続けに送ることができる．この挙動はまさしくasynchronousだ．&lt;/p&gt;

&lt;h2 id=&#34;oh-poor-deadlock&#34;&gt;Oh, poor deadlock...&lt;/h2&gt;

&lt;p&gt;「goroutineもchannelもわかったので」ということで下みたいなプログラムを書くと&lt;strong&gt;deadlock&lt;/strong&gt;と言われてgolangのruntimeから叱られる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/TbJsGMyAh8r&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;これはつまりどういうことかというと，golangのruntimeが「お前のプログラム実行したけど7行目でバッファのないchannelに&lt;code&gt;42&lt;/code&gt;って送ってる（&lt;code&gt;c &amp;lt;- 42&lt;/code&gt;）けど，それしたら受信者がいないし，受信者がいないと送信者も実行を進められないので，どうすることもできなくなっちゃったぞ」と怒っているのだ．&lt;/p&gt;

&lt;p&gt;「バッファのないchannelはgoroutine間の挙動をsynchronousにするもの」なので「受信者となるgoroutineのいない，バッファ0のchannelに値を送るとdeadlockする」のだ．&lt;/p&gt;

&lt;p&gt;今回の場合だと，受信者が存在しないことが問題なので，受信者となるgoroutineを作ればうまくいく．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/czvQy77d3jU&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;lets-range-channels-and-close-them&#34;&gt;Let&#39;s &lt;code&gt;range&lt;/code&gt; channels and &lt;code&gt;close&lt;/code&gt; them.&lt;/h2&gt;

&lt;p&gt;channelは&lt;code&gt;range&lt;/code&gt;構文を使って1つずつ値を取り出すということも記述できる．でも，&lt;code&gt;range&lt;/code&gt;を使ってchannelから値を次々取り出すときは&lt;strong&gt;channelを明示的に&lt;code&gt;close()&lt;/code&gt;しないといけない&lt;/strong&gt;．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/tTmMX8Ut5gg&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;チャンネルは組み込み関数の&lt;code&gt;close()&lt;/code&gt;で「閉じる」ことができて，閉じられたchannelに対して書き込みを行おうとするとgolangのruntimeは&lt;code&gt;panic&lt;/code&gt;して，閉じられたchannelに対して読み込みを行おうとするとそのchannelの扱う型のゼロ値が得られることになっている．&lt;/p&gt;

&lt;p&gt;「閉じられたchannelに対する読み込み」の特徴は「goroutineに処理の終了を通知させる機構」として応用することができる．大抵，こういう処理終了通知を行う場合は空の構造体&lt;code&gt;struct{}&lt;/code&gt;のchannelを使う．なんてったって空の構造体は0byteだからね．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/aAV4A-7UdZj&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;あと，閉じられたchannelに対する読み込みはブロックされないので，そのまま処理は進む．&lt;/p&gt;

&lt;h2 id=&#34;multiple-channels-and-select&#34;&gt;Multiple channels and &lt;code&gt;select&lt;/code&gt;.&lt;/h2&gt;

&lt;p&gt;goroutineとchannelを使って実際になんらかの意味のあるプログラムを書こうとすると，たくさんのgoroutineとたくさんのchannelを扱うことになるのが普通である．大抵の場合「複数のchannelを同時に待ち受けたい」状況に出くわす．golangでは複数のchannelを同時に待ち受ける&lt;code&gt;select&lt;/code&gt;構文を用意している．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/_CaWUfaJj2E&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;select { case ...: ...}&lt;/code&gt;という構文で，複数のchannelを同時に待ち受け，値が書き込まれたchannelだけに対応するという，イベント駆動みたいな処理も簡単に書くことができるようになっている．&lt;/p&gt;

&lt;h2 id=&#34;channelお前最高かよ&#34;&gt;channel，お前最高かよ！&lt;/h2&gt;

&lt;p&gt;channelはマジで便利！でも使いこなすにはchannelの挙動をよく理解していないといけない．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
