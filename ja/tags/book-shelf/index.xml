<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>book shelf | zak</title>
    <link>/ja/tags/book-shelf/</link>
      <atom:link href="/ja/tags/book-shelf/index.xml" rel="self" type="application/rss+xml" />
    <description>book shelf</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-JP</language><copyright>© zak 2021</copyright><lastBuildDate>Mon, 25 Nov 2019 23:57:01 +0900</lastBuildDate>
    <image>
      <url>/img/icon-1080.png</url>
      <title>book shelf</title>
      <link>/ja/tags/book-shelf/</link>
    </image>
    
    <item>
      <title>Book Shelf</title>
      <link>/ja/post/book-shelf/</link>
      <pubDate>Mon, 25 Nov 2019 23:57:01 +0900</pubDate>
      <guid>/ja/post/book-shelf/</guid>
      <description>&lt;h1 id=&#34;読みたい&#34;&gt;読みたい&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;［改訂新版］プログラマのための文字コード技術入門&lt;/li&gt;
&lt;li&gt;みんなのデータ構造&lt;/li&gt;
&lt;li&gt;プログラマの数学 第2版&lt;/li&gt;
&lt;li&gt;純粋関数型データ構造&lt;/li&gt;
&lt;li&gt;Understanding Compression&lt;/li&gt;
&lt;li&gt;型システム入門 ― プログラミング言語と型の理論&lt;/li&gt;
&lt;li&gt;その数式、プログラムできますか？&lt;/li&gt;
&lt;li&gt;計算機プログラムの構造と解釈&lt;/li&gt;
&lt;li&gt;正規表現技術入門 ― 最新エンジン実装と理論的背景&lt;/li&gt;
&lt;li&gt;アンダースタンディング コンピュテーション ― 単純な機械から不可能なプログラムまで&lt;/li&gt;
&lt;li&gt;ガベージコレクション ― 自動的メモリ管理を構成する理論と実装&lt;/li&gt;
&lt;li&gt;アルゴリズムを学ぼう&lt;/li&gt;
&lt;li&gt;ガベージコレクションのアルゴリズムと実装&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第三巻 ― 精選トピックス&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第二巻（改訂 2 版） ― 高度な設計と解析手法・高度なデータ構造・グラフアルゴリズム&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第一巻（改訂 2 版） ― 基礎・ソート・データ構造・数学&lt;/li&gt;
&lt;li&gt;オートマトン言語理論　計算論 I（第二版）&lt;/li&gt;
&lt;li&gt;アルゴリズムとデータ構造（岩波講座 ソフトウェア科学 3）&lt;/li&gt;
&lt;li&gt;基礎情報理論&lt;/li&gt;
&lt;li&gt;江添亮の C++ 入門&lt;/li&gt;
&lt;li&gt;Modern C++ チャレンジ ― C++17 プログラミング力を鍛える 100 問&lt;/li&gt;
&lt;li&gt;More Effective C# 6.0/7.0&lt;/li&gt;
&lt;li&gt;低レベルプログラミング&lt;/li&gt;
&lt;li&gt;Optimized C++&lt;/li&gt;
&lt;li&gt;C++ のための API デザイン&lt;/li&gt;
&lt;li&gt;C++ テンプレートテクニック（第二版）&lt;/li&gt;
&lt;li&gt;The Architecture of Open Source Applications - Volume II: Structure, Scale, and a Few More Fearless Hacks&lt;/li&gt;
&lt;li&gt;The Architecture of Open Source Applications - Elegance, Evolution, and a Few Fearless Hacks&lt;/li&gt;
&lt;li&gt;コンパイラの構成と最適化&lt;/li&gt;
&lt;li&gt;最新コンパイラ構成技法（タイガーブック）&lt;/li&gt;
&lt;li&gt;Linkers and Loaders&lt;/li&gt;
&lt;li&gt;コンパイラ 作りながら学ぶ&lt;/li&gt;
&lt;li&gt;7 つの言語 7 つの世界&lt;/li&gt;
&lt;li&gt;江添亮の詳説 C++17&lt;/li&gt;
&lt;li&gt;Effective Modern C++ ― C++11/14 プログラムを進化させる 42 項目&lt;/li&gt;
&lt;li&gt;コーディングを支える技術&lt;/li&gt;
&lt;li&gt;ls を読まずにプログラマを名乗るな！&lt;/li&gt;
&lt;li&gt;Effective STL ― STL を効果的に使いこなす 50 の鉄則&lt;/li&gt;
&lt;li&gt;More Effective C++ ― プログラムとデザインを改良するための新 35 項目&lt;/li&gt;
&lt;li&gt;Effective C++ ― プログラムとデザインを改良するための 55 項目&lt;/li&gt;
&lt;li&gt;ゲームプログラマのための C++&lt;/li&gt;
&lt;li&gt;言語実装パターン ― コンパイラ技術によるテキスト処理から言語実装まで&lt;/li&gt;
&lt;li&gt;パーフェクト JavaScript&lt;/li&gt;
&lt;li&gt;Effective Java（第二版）&lt;/li&gt;
&lt;li&gt;Binary Hacks ― ハッカー秘伝のテクニック 100 選&lt;/li&gt;
&lt;li&gt;リンカ・ローダ実践開発テクニック ― 実行ファイルを作成するために必須の技術&lt;/li&gt;
&lt;li&gt;省メモリプログラミング ― メモリ制限のあるシステムのためのソフトウェアパターン集&lt;/li&gt;
&lt;li&gt;エキスパート Objective-C プログラミング&lt;/li&gt;
&lt;li&gt;iPhone プログラミング UIKit 詳解リファレンス&lt;/li&gt;
&lt;li&gt;スクリプトエンジン プログラミング&lt;/li&gt;
&lt;li&gt;プログラミングテクニックアドバンス ― 実践的 UNIX プログラミングソースコードにみる珠玉の手法&lt;/li&gt;
&lt;li&gt;プログラミングテクニック ― UNIX コマンドのソースコードにみる実践プログラミング手法&lt;/li&gt;
&lt;li&gt;エキスパート Python プログラミング&lt;/li&gt;
&lt;li&gt;GNU Make（第三版）&lt;/li&gt;
&lt;li&gt;ふつうのコンパイラをつくろう ― 言語処理系をつくりながら学ぶコンパイルと実行環境の仕組み&lt;/li&gt;
&lt;li&gt;明快入門　コンパイラ・インタプリタ処理系を作りながら学ぶ&lt;/li&gt;
&lt;li&gt;エキスパート C プログラミング 知られざる C の深層&lt;/li&gt;
&lt;li&gt;メタプログラミング Ruby&lt;/li&gt;
&lt;li&gt;Ruby ソースコード完全解説&lt;/li&gt;
&lt;li&gt;プログラミング言語 Ruby&lt;/li&gt;
&lt;li&gt;Boost C++ Libraries プログラミング（第二版）&lt;/li&gt;
&lt;li&gt;Java の地図帳　図解・実例・リンクで学ぶ Java プログラミング&lt;/li&gt;
&lt;li&gt;コア Java 2 基礎編&lt;/li&gt;
&lt;li&gt;基礎からの PHP&lt;/li&gt;
&lt;li&gt;コンパイラ ― 原理・技法・ツール（ドラゴンブック）&lt;/li&gt;
&lt;li&gt;Raspberry Pi で学ぶコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;動かしてわかる CPU の作り方 10 講&lt;/li&gt;
&lt;li&gt;FPGA の原理と構成&lt;/li&gt;
&lt;li&gt;ディジタル回路設計とコンピュータアーキテクチャ [ARM版]&lt;/li&gt;
&lt;li&gt;熱血！アセンブラ入門&lt;/li&gt;
&lt;li&gt;自作エミュレータで学ぶ x86 アーキテクチャ&lt;/li&gt;
&lt;li&gt;コンピュータアーキテクチャ　定量的アプローチ（ヘネパタ）&lt;/li&gt;
&lt;li&gt;量子コンピュータが人工知能を加速する&lt;/li&gt;
&lt;li&gt;GPU を支える技術 ― 超並列ハードウェアの快進撃［技術基礎］&lt;/li&gt;
&lt;li&gt;ディジタル回路設計とコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;はじめて読む486 - 32ビットコンピュータをやさしく語る&lt;/li&gt;
&lt;li&gt;構造化コンピュータ構成（第四版）&lt;/li&gt;
&lt;li&gt;プロセッサを支える技術&lt;/li&gt;
&lt;li&gt;コンピュータの構成と設計（パタヘネ）&lt;/li&gt;
&lt;li&gt;作りながら学ぶコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;作って理解する OS ― x86 系コンピュータを動かす理論と実装&lt;/li&gt;
&lt;li&gt;Android を支える技術 II ― 新のマルチタスクに挑んだモバイル OS の心臓部&lt;/li&gt;
&lt;li&gt;詳解 システム・パフォーマンス&lt;/li&gt;
&lt;li&gt;インサイド Windows&lt;/li&gt;
&lt;li&gt;新装改訂版 Linux のブートプロセスをみる&lt;/li&gt;
&lt;li&gt;Linux デバイスドライバ&lt;/li&gt;
&lt;li&gt;Unix 考古学 Truth of the Legend&lt;/li&gt;
&lt;li&gt;インサイド Windows&lt;/li&gt;
&lt;li&gt;[試して理解] Linux のしくみ ― 実験と図解で学ぶ OS とハードウェアの基礎知識&lt;/li&gt;
&lt;li&gt;Android を支える技術 I - 60 fps を達成するモダンな GUI システム&lt;/li&gt;
&lt;li&gt;Linux プログラミングインタフェース&lt;/li&gt;
&lt;li&gt;はじめての OS コードリーディング ― UNIX V6 で学ぶカーネルのしくみ&lt;/li&gt;
&lt;li&gt;作りながら学ぶ OS カーネル ― 保護モードプログラミングの基本と実践&lt;/li&gt;
&lt;li&gt;30 日でできる！OS 自作入門&lt;/li&gt;
&lt;li&gt;Write Portable Code ― 複数プラットフォームに移植可能なソフトウェアの開発技法&lt;/li&gt;
&lt;li&gt;Linux システムプログラミング&lt;/li&gt;
&lt;li&gt;例解 UNIX プログラミング教室 ― システムコールを使いこなすための 12 講&lt;/li&gt;
&lt;li&gt;オペレーティングシステムの仕組み&lt;/li&gt;
&lt;li&gt;詳解 Linux カーネル&lt;/li&gt;
&lt;li&gt;構造化並列プログラミング ― 効率良い計算を行うためのパターン&lt;/li&gt;
&lt;li&gt;SRE サイトリライアビリティエンジニアリング ― Google の信頼性を支えるエンジニアリングチーム&lt;/li&gt;
&lt;li&gt;ビッグデータを支える技術 ― 刻々とデータが脈打つ自動化の世界&lt;/li&gt;
&lt;li&gt;Shared Memory Application Programming&lt;/li&gt;
&lt;li&gt;並行コンピューティング技法 ― 実践マルチコア/マルチスレッドプログラミング (The Art of Concurrency)&lt;/li&gt;
&lt;li&gt;The Art of Multiprocessor Programming ― 並行プログラミングの原理から実践まで&lt;/li&gt;
&lt;li&gt;Pthreads プログラミング&lt;/li&gt;
&lt;li&gt;Google を支える技術&lt;/li&gt;
&lt;li&gt;TCP 技術入門 ― 進化を続ける基本プロトコル&lt;/li&gt;
&lt;li&gt;ソースコードで体感するネットワークの仕組み ― 手を動かしながら基礎から TCP/IP の実装までがわかる&lt;/li&gt;
&lt;li&gt;アカマイ ― 知られざるインターネットの巨人&lt;/li&gt;
&lt;li&gt;UNIX ネットワークプログラミング (Vol.2) IPC: プロセス間通信&lt;/li&gt;
&lt;li&gt;UNIX ネットワークプログラミング (Vol.1) ネットワーク API: ソケットと XTI&lt;/li&gt;
&lt;li&gt;体系的に学ぶ 安全な Web アプリケーションの作り方 (第 2 版) ― 脆弱性が生まれる原理と対策の実践&lt;/li&gt;
&lt;li&gt;ブラウザハック&lt;/li&gt;
&lt;li&gt;超速! Web ページ速度改善ガイド ― 使いやすさは「速さ」から始まる&lt;/li&gt;
&lt;li&gt;Web フロントエンドハイパフォーマンスチューニング&lt;/li&gt;
&lt;li&gt;ハイパフォーマンスブラウザネットワーキング ― ネットワークアプリケーションのためのパフォーマンス最適化&lt;/li&gt;
&lt;li&gt;めんどうくさい Web セキュリティ&lt;/li&gt;
&lt;li&gt;Ruby on Rails 3 アプリケーションプログラミング&lt;/li&gt;
&lt;li&gt;Web 開発者のための大規模サービス技術入門 ― データ構造、メモリ、OS、DB、サーバ/インフラ&lt;/li&gt;
&lt;li&gt;24 時間 365 日 サーバ/インフラを支える技術 ― スケーラビリティ、ハイパフォーマンス、省力運用&lt;/li&gt;
&lt;li&gt;仕事ではじめる機械学習&lt;/li&gt;
&lt;li&gt;これならわかる深層学習入門&lt;/li&gt;
&lt;li&gt;ゼロから作る Deep Learning 2/3&lt;/li&gt;
&lt;li&gt;作って動かす ALife&lt;/li&gt;
&lt;li&gt;TensorFlow ではじめる DeepLearning 実装入門&lt;/li&gt;
&lt;li&gt;はじめてのパターン認識&lt;/li&gt;
&lt;li&gt;進化的アーキテクチャ ― 絶え間ない変化を支える&lt;/li&gt;
&lt;li&gt;Clean Architecture 達人に学ぶソフトウェアの構造と設計&lt;/li&gt;
&lt;li&gt;エリック・エヴァンスのドメイン駆動設計&lt;/li&gt;
&lt;li&gt;マイクロサービスアーキテクチャ&lt;/li&gt;
&lt;li&gt;API デザインケーススタディ Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方&lt;/li&gt;
&lt;li&gt;エンジニアのためのマネジメントキャリアパス ― テックリードから CTO までマネジメントスキル向上ガイド&lt;/li&gt;
&lt;li&gt;サイバー攻撃 ― ネット世界の裏側で起きていること&lt;/li&gt;
&lt;li&gt;エンジニアリング組織論への招待 ― 不確実性に向き合う思考と組織のリファクタリング&lt;/li&gt;
&lt;li&gt;プリンシプル オブ プログラミング ― 3 年目までに身につけたい 一生役立つ 101 の原理原則&lt;/li&gt;
&lt;li&gt;Joel on Software&lt;/li&gt;
&lt;li&gt;OSS ライセンスの教科書&lt;/li&gt;
&lt;li&gt;エンジニアの知的生産術 ― 効率的に学び、整理し、アウトプットする&lt;/li&gt;
&lt;li&gt;セキュリティコンテストのための CTF 問題集&lt;/li&gt;
&lt;li&gt;セキュリティコンテストチャレンジブック ― CTF で学ぼう! 情報を守るための戦い方&lt;/li&gt;
&lt;li&gt;プログラミングコンテストチャレンジブック&lt;/li&gt;
&lt;li&gt;目指せ！プログラミング世界一 ― 大学対抗プログラミングコンテスト ICPC への挑戦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;読んだ&#34;&gt;読んだ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;クラウドを支えるこれからの暗号技術&lt;/li&gt;
&lt;li&gt;リーダブルコード　より良いコードを書くためのシンプルで実践的なテクニック&lt;/li&gt;
&lt;li&gt;GitHub 実践入門 ― Pull Request による開発の変革&lt;/li&gt;
&lt;li&gt;人工知能は人間を超えるか&lt;/li&gt;
&lt;li&gt;ゼロから作る Deep Learning&lt;/li&gt;
&lt;li&gt;Real World HTTP ― 歴史とコードに学ぶインターネットとウェブ技術&lt;/li&gt;
&lt;li&gt;Writing An Interpreter In Go&lt;/li&gt;
&lt;li&gt;Writing A Compiler In Go&lt;/li&gt;
&lt;li&gt;実践 Rust 入門 ― 言語仕様から開発手法まで&lt;/li&gt;
&lt;li&gt;Programming Rust&lt;/li&gt;
&lt;li&gt;すごい Haskell たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング言語 Go&lt;/li&gt;
&lt;li&gt;Go ならわかるシステムプログラミング&lt;/li&gt;
&lt;li&gt;コンピュータシステムの理論と実装&lt;/li&gt;
&lt;li&gt;Go 言語による並行処理&lt;/li&gt;
&lt;li&gt;Distributed Systems: Principles and Paradigms (2nd Edition)&lt;/li&gt;
&lt;li&gt;Computer Networking: A Top-Down Approach (4th Edition)&lt;/li&gt;
&lt;li&gt;ふつうの Linux プログラミング (第 2 版) ― Linux の仕組みから学べる gcc プログラミングの王道&lt;/li&gt;
&lt;li&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/li&gt;
&lt;li&gt;Cracking the Coding Interview: 189 Programming Questions and Solutions&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
