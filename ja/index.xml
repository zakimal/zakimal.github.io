<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zak</title>
    <link>/ja/</link>
      <atom:link href="/ja/index.xml" rel="self" type="application/rss+xml" />
    <description>zak</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-JP</language><copyright>© zak 2022</copyright><lastBuildDate>Thu, 17 Mar 2022 22:15:43 +0900</lastBuildDate>
    <image>
      <url>/img/icon-1080.png</url>
      <title>zak</title>
      <link>/ja/</link>
    </image>
    
    <item>
      <title>Lowest Common Ancestor of a Binary Tree</title>
      <link>/ja/post/lowest-common-ancestor-of-a-binary-tree/</link>
      <pubDate>Thu, 17 Mar 2022 22:15:43 +0900</pubDate>
      <guid>/ja/post/lowest-common-ancestor-of-a-binary-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;二分木&lt;code&gt;root&lt;/code&gt;と木に含まれる2頂点&lt;code&gt;p&lt;/code&gt;/&lt;code&gt;q&lt;/code&gt;が与えられる．&lt;code&gt;p&lt;/code&gt;と&lt;code&gt;q&lt;/code&gt;の最小木共通先祖（Lowest Common Ancestor）を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt;が「二分探索木」になっているなら話は簡単だが，今回は二分木．だからといってなにかが根本的に変わるわけではないが．&lt;/p&gt;
&lt;p&gt;帰りがけ順でDFSしながら，&lt;code&gt;p&lt;/code&gt;/&lt;code&gt;q&lt;/code&gt;に遭遇したら遭遇した旨を親方向に持っていきながら戻っていくことでLCAを見つけられる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = None&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lowestCommonAncestor&lt;/span&gt;(self, root: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, p: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, q: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(node):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node &lt;span style=&#34;color:#75715e&#34;&gt;# 左部分木でp/qを見かけた，かつ，右部分木でp/qを見かけた -&amp;gt; 今いる頂点はLCA&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; right

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;もしくは「一度DFSすることで，&lt;code&gt;p&lt;/code&gt;/&lt;code&gt;q&lt;/code&gt;の親情報を事前に集めておく」ことによって文字通り先祖を追っていくことでも解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = None&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lowestCommonAncestor&lt;/span&gt;(self, root: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, p: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, q: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;:
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [root]
        parents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {root: None}

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parents &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parents):
            node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                parents[node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                parents[node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

        ancestors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            ancestors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(p)
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parents[p]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ancestors:
            q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parents[q]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&#34;&gt;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lowest Common Ancestor of a Binary Search Tree</title>
      <link>/ja/post/lowest-common-ancestor-of-a-binary-search-tree/</link>
      <pubDate>Thu, 17 Mar 2022 22:01:18 +0900</pubDate>
      <guid>/ja/post/lowest-common-ancestor-of-a-binary-search-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;二分探索木&lt;code&gt;root&lt;/code&gt;とその木に含まれる2頂点&lt;code&gt;p&lt;/code&gt;/&lt;code&gt;q&lt;/code&gt;が与えられる．&lt;code&gt;p&lt;/code&gt;と&lt;code&gt;q&lt;/code&gt;の共通の先祖のうち，高さが最も低いもの（最小共通祖先：Lowest Common Ancestor）を計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;二分探索木は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;左の子&lt;/code&gt; ≤ &lt;code&gt;親&lt;/code&gt; ≤ &lt;code&gt;右の子&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が成立している．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt;が&lt;code&gt;p&lt;/code&gt;と&lt;code&gt;q&lt;/code&gt;の間にあれば最小木共通先祖は&lt;code&gt;root&lt;/code&gt;になる．さかのぼっていけば&lt;code&gt;root&lt;/code&gt;にぶつかるので，当たり前といえば当たり前．&lt;code&gt;root&lt;/code&gt;の手前で共通先祖が存在するかもしれないが，求めたいのは最小のものであることに注意．&lt;/p&gt;
&lt;p&gt;再帰関数で書く解法がこちら．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = None&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lowestCommonAncestor&lt;/span&gt;(self, root: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, p: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, q: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lowestCommonAncestor(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, p, q)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lowestCommonAncestor(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, p, q)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;curr&lt;/code&gt;というポインタを持ち出して繰り返しで書き下すと次のように書ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = None&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lowestCommonAncestor&lt;/span&gt;(self, root: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, p: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;, q: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TreeNode&amp;#39;&lt;/span&gt;:
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; curr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/&#34;&gt;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Balanced Binary Tree</title>
      <link>/ja/post/balanced-binary-tree/</link>
      <pubDate>Thu, 17 Mar 2022 18:50:04 +0900</pubDate>
      <guid>/ja/post/balanced-binary-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される二分木を考える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ある二分木が与えられたときに，その二分木が平衡している（balanced）かを判定せよ．なお二分木が並行しているとは次を満たすことと定義する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二分木に含まれるどの頂点を根としたときも，その左右の部分木の高さの差が1以下である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;木の高さは再帰的に計算できるので，それをすべての頂点で確認することで定義通りに判定することができる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBalanced&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            left_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            right_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(left_height, right_height)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; abs(height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isBalanced(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isBalanced(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ある部分木で&lt;code&gt;height(root)&lt;/code&gt;が$O(n)$回呼ばれるが，それを全頂点で行うことになって，全体としては$O(n^2)$の計算量がかかる．&lt;/p&gt;
&lt;p&gt;平衡していない木を部分木として持つ木は平衡していないので，これをうまく返していけば全体の計算量を$O(n)$にできる．&lt;/p&gt;
&lt;p&gt;下の実装では，&lt;code&gt;height(root)&lt;/code&gt;で&lt;code&gt;root&lt;/code&gt;を根とする部分木の左右の部分木の高さを計算するが，高さの差が1より大きい場合は&lt;code&gt;-1&lt;/code&gt;を返すことでそれを表現している．&lt;code&gt;height(root)&lt;/code&gt;の結果として&lt;code&gt;-1&lt;/code&gt;が返った瞬間に無駄な計算をせず平衡していないことを返せる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Time: O(n)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBalanced&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            left_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left_height &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            right_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right_height &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(left_height &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; right_height) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(left_height, right_height)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; height(root) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/balanced-binary-tree/&#34;&gt;https://leetcode.com/problems/balanced-binary-tree/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Diameter of Binary Tree</title>
      <link>/ja/post/diameter-of-binary-tree/</link>
      <pubDate>Fri, 11 Mar 2022 17:38:17 +0900</pubDate>
      <guid>/ja/post/diameter-of-binary-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される二分木を考える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二分木の直径を計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;二分木を根を中心に左右に引っ張るイメージをすると直径は左右の部分木の深さの和+1であることがわかる．木の深さは再帰関数で計算できる．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;diameter-of-binary-tree.png&#34; data-caption=&#34;二分木の直径は左右の深さの和&amp;#43;1&#34;&gt;
&lt;img src=&#34;diameter-of-binary-tree.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    二分木の直径は左右の深さの和+1
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diameterOfBinaryTree&lt;/span&gt;(self, root: Optional[TreeNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt;(root):
            nonlocal diameter
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            left_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            right_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(diameter, left_depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right_depth)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; max(left_depth, right_depth)
        depth(root)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; diameter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/diameter-of-binary-tree/&#34;&gt;https://leetcode.com/problems/diameter-of-binary-tree/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sum of Left Leaves</title>
      <link>/ja/post/sum-of-left-leaves/</link>
      <pubDate>Thu, 10 Mar 2022 23:46:22 +0900</pubDate>
      <guid>/ja/post/sum-of-left-leaves/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される二分木が与えられる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;左葉ノードの合計を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DFSによる解法
&lt;ul&gt;
&lt;li&gt;DFSで全頂点をなめながら，その頂点が左側の子なしであるかを確認する
&lt;ul&gt;
&lt;li&gt;「子なし」であることは&lt;code&gt;TreeNode.left&lt;/code&gt;/&lt;code&gt;TreeNode.right&lt;/code&gt;が&lt;code&gt;None&lt;/code&gt;であることを見れば良い&lt;/li&gt;
&lt;li&gt;「左側の」であることは追加の変数で追跡する必要がある&lt;/li&gt;
&lt;li&gt;再帰関数でもstackでも実装できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量$O(n)$&lt;/li&gt;
&lt;li&gt;空間計算量$O(\log n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfLeftLeaves&lt;/span&gt;(self, root: Optional[TreeNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(node, is_left):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_left &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, True) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, False)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root, False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfLeftLeaves&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(root, False)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            node, is_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; is_left:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, True))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, False))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;BFSによる解法
&lt;ul&gt;
&lt;li&gt;DFSで全頂点をなめながら，その頂点が左側の子なしであるかを確認する
&lt;ul&gt;
&lt;li&gt;「子なし」であることは&lt;code&gt;TreeNode.left&lt;/code&gt;/&lt;code&gt;TreeNode.right&lt;/code&gt;が&lt;code&gt;None&lt;/code&gt;であることを見れば良い&lt;/li&gt;
&lt;li&gt;「左側の」であることは追加の変数で追跡する必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量$O(n)$&lt;/li&gt;
&lt;li&gt;空間計算量$O(\log n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfLeftLeaves&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(root, False)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            node, is_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; is_left:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, True))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, False))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Morris Traversal
&lt;ul&gt;
&lt;li&gt;拙著記事：https://zakimal.github.io/ja/post/morris-traversal/&lt;/li&gt;
&lt;li&gt;inorderで全探索するのを空間計算量$O(1)$で実現するアルゴリズム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfLeftLeaves&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; root:
                    prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:  &lt;span style=&#34;color:#75715e&#34;&gt;# in-order順でrootの直前のノードがprevになっている&lt;/span&gt;
                    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root  &lt;span style=&#34;color:#75715e&#34;&gt;# 一時的なリンクを張る&lt;/span&gt;
                    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None  &lt;span style=&#34;color:#75715e&#34;&gt;# ここで一時的に張ったリンクを消してる&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
                    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# ここに入り込む時点でrootは左端の葉ノード&lt;/span&gt;
                root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sum-of-left-leaves/&#34;&gt;https://leetcode.com/problems/sum-of-left-leaves/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Morris Traversal</title>
      <link>/ja/post/morris-traversal/</link>
      <pubDate>Thu, 10 Mar 2022 21:19:51 +0900</pubDate>
      <guid>/ja/post/morris-traversal/</guid>
      <description>&lt;h2 id=&#34;二分木上の探索&#34;&gt;二分木上の探索&lt;/h2&gt;
&lt;p&gt;次のように定義される二分木を考える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;class: TreeNode:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ある二分木&lt;code&gt;root&lt;/code&gt;が与えられたときに，その木を構成する頂点の全探索は「深さ優先探索 Depth-First Search（DFS）」と「幅優先探索 Breadth-First Search（BFS）」に大別される．&lt;/p&gt;
&lt;h3 id=&#34;深さ優先探索-depth-first-searchdfs&#34;&gt;深さ優先探索 Depth-First Search（DFS）&lt;/h3&gt;
&lt;p&gt;二分木における深さ優先探索は「今いる頂点を調査して，その子供の頂点にも同じ調査を繰り返すように走査」する．&lt;/p&gt;
&lt;p&gt;今いる頂点と左右の子供の頂点をどういう順番で走査するのかで名前が付いている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行きがけ順（pre-order traversal）
&lt;ul&gt;
&lt;li&gt;まず根ノードを見て，続けて左部分木を行きがけ順で走査，最後に右部分機を行きがけ順で走査&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通りがけ順（in-order traversal）
&lt;ul&gt;
&lt;li&gt;まず左部分機を通りがけ順で走査，続けて根ノードを見て，最後に右部分機を行きがけ順で走査&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;帰りがけ順（post-order traversal）
&lt;ul&gt;
&lt;li&gt;まず左部分機を通りがけ順で走査，続けて右部分機を行きがけ順で走査，最後に根ノードを見て&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再帰関数で簡単に実装することができる．stackを用いても実装可能．&lt;/p&gt;
&lt;p&gt;行きがけ順を再帰関数で実装すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorder&lt;/span&gt;(root):
    process(root)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;行きがけ順をstackを用いて実装すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorder&lt;/span&gt;(root):
    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [root]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
        process(node)
        stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
        stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通りがけ順を再帰関数で実装すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder&lt;/span&gt;(root):
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    process(root)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;帰りがけ順を再帰関数で実装すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder&lt;/span&gt;(root):
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
    process(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;幅優先探索-breadth-first-searchbfs&#34;&gt;幅優先探索 Breadth-First Search（BFS）&lt;/h3&gt;
&lt;p&gt;二分木における幅優先探索は「深さが同じ頂点群を，浅い順に走査」する．queueを用いると簡単に実装できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs&lt;/span&gt;(root):
    queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [root]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        process(node)
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;morris-traversal&#34;&gt;Morris Traversal&lt;/h2&gt;
&lt;p&gt;再帰関数による（行きがけ順｜通りがけ順｜帰りがけ順）DFS，stackによる（行きがけ順）DFS，queueによるBFSは，木を構成する頂点の総数が$n$であるとして，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時間計算量$O(n)$
&lt;ul&gt;
&lt;li&gt;$n$頂点全部を訪問するから&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量$O(\log n)$
&lt;ul&gt;
&lt;li&gt;木の高さ（=$\log n$）分call stack/stack/queueが伸びるから&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Morris traversalアルゴリズムは時間計算量$O(n)$，空間計算量を$O(1)$で木を構成する頂点を通りがけ順で全探索するアルゴリズム．&lt;/p&gt;
&lt;p&gt;「左部分木の左端の葉ノードに到達するまでに間に，左部分木の右端葉ノードから通りがけ順で直後の頂点へのポインタを（右の子供として）張りながら木を降りていって，降りきれなくなったタイミングでひたすら右の子供をたどっていくと，通りがけ順になってる」というもの．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-0.png&#34; data-caption=&#34;Morris Traversalの概要&#34;&gt;
&lt;img src=&#34;morris-0.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Morris Traversalの概要
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;次に示す具体例で動作を追っていく．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-1.png&#34; &gt;
&lt;img src=&#34;morris-1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;まず頂点&lt;code&gt;0&lt;/code&gt;から走査を始める．&lt;code&gt;0&lt;/code&gt;には左部分木があるので，&lt;code&gt;0&lt;/code&gt;の左部分木の右端葉を計算すると今回は頂点&lt;code&gt;9&lt;/code&gt;．&lt;code&gt;9&lt;/code&gt;の右の子供として&lt;code&gt;0&lt;/code&gt;へのポインタを張っておく．このポインタを後でたどることで行きがけ順を達成する．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-2.png&#34; &gt;
&lt;img src=&#34;morris-2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt;の左部分木へ降りていき，降り立った頂点を根とした木の左部分木が存在するる限り同じように「左部分木の右端葉を計算して，それの右の子供として根へのポインタを張る」ことを繰り返す．&lt;/p&gt;
&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-3.png&#34; &gt;
&lt;img src=&#34;morris-3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-4.png&#34; &gt;
&lt;img src=&#34;morris-4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-5.png&#34; &gt;
&lt;img src=&#34;morris-5.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;左部分機が存在しない，つまり左端の葉まで降りたら，そこが行きがけ順の一番最初の頂点なので処理をする．今回は頂点&lt;code&gt;7&lt;/code&gt;がそれ．頂点&lt;code&gt;7&lt;/code&gt;を処理したら，さっき張った&lt;code&gt;7&lt;/code&gt;の&lt;strong&gt;右子ポインタ&lt;/strong&gt;を使って遷移する．このポインタは行きがけ順における左部分期の右端葉とその直後の頂点を結んでいるので正しく行きがけ順に遷移することになる．今回の例だと&lt;code&gt;3&lt;/code&gt;へ赤いポインタを使って遷移することになる．このとき，遷移しながら赤いポインタを剥がす，具体的には&lt;code&gt;7&lt;/code&gt;の右子ポインタに&lt;code&gt;None&lt;/code&gt;をセットする．このアルゴリズムでは「ポインタを張りながら遷移して不要になったらすぐ剥がす」という挙動になっている．全部張ってから剥がすのではないという点に注意．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-6.png&#34; &gt;
&lt;img src=&#34;morris-6.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;右子ポインタで次へ行く次へ行く．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-7.png&#34; &gt;
&lt;img src=&#34;morris-7.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;左子ポインタがあるなら，左部分木が存在するので，左部分期の右端葉頂点を見つけて行きがけ順になるためのポインタを張る作業（頂点&lt;code&gt;0&lt;/code&gt;/&lt;code&gt;1&lt;/code&gt;/&lt;code&gt;3&lt;/code&gt;でやってきたのと同じこと）をやる．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-8.png&#34; &gt;
&lt;img src=&#34;morris-8.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;左子ポインタがないということは左部分木が存在しないので，右子ポインタをたどる．&lt;/p&gt;
&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-9.png&#34; &gt;
&lt;img src=&#34;morris-9.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-10.png&#34; &gt;
&lt;img src=&#34;morris-10.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-11.png&#34; &gt;
&lt;img src=&#34;morris-11.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-12.png&#34; &gt;
&lt;img src=&#34;morris-12.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-13.png&#34; &gt;
&lt;img src=&#34;morris-13.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-14.png&#34; &gt;
&lt;img src=&#34;morris-14.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-15.png&#34; &gt;
&lt;img src=&#34;morris-15.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-16.png&#34; &gt;
&lt;img src=&#34;morris-16.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;morris-17.png&#34; &gt;
&lt;img src=&#34;morris-17.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;これを実装すると次のようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;morris&lt;/span&gt;(root):
    curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#75715e&#34;&gt;# 左部分木が存在するので，左部分期の右端葉ノードを探しに行く&lt;/span&gt;
            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; curr:
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr &lt;span style=&#34;color:#75715e&#34;&gt;# 右子ポインタで行きがけ順直後の頂点を登録（赤矢印）&lt;/span&gt;
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#75715e&#34;&gt;# 左部分木へ降りていく&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# すでに赤矢印が張ってあるということは左部分木は見終わったということになる&lt;/span&gt;
                prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None &lt;span style=&#34;color:#75715e&#34;&gt;# 赤矢印を剥がす&lt;/span&gt;
                process(curr)
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#75715e&#34;&gt;# 左部分木を見終わったので右部分木へ降りていく&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# curr.left is None&lt;/span&gt;
            process(curr)
            curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#75715e&#34;&gt;# 左部分木が存在しないので右部分木へ降りていく&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;やや複雑．これを何も見ずに書けと要求されるとしんどい．&lt;/p&gt;
&lt;h2 id=&#34;練習問題&#34;&gt;練習問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sum-of-left-leaves/&#34;&gt;https://leetcode.com/problems/sum-of-left-leaves/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Morris traversal：空間計算量O(1)で全頂点をin-orderで探索する．イメージとしては左部分木の右端から根への一時的なポインタを作りながら木を下に降りていき，葉ノードに到達したらそこから右へ右へ進んでいくとin-orderになっている．右へ右へ進む途中で一時的に張ったポインタを消しながら進む．&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfLeftLeaves&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; root:
                    prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:  &lt;span style=&#34;color:#75715e&#34;&gt;# in-order順でrootの直前のノードがprevになっている&lt;/span&gt;
                    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root  &lt;span style=&#34;color:#75715e&#34;&gt;# 一時的なリンクを張る&lt;/span&gt;
                    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None  &lt;span style=&#34;color:#75715e&#34;&gt;# ここで一時的に張ったリンクを消してる&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
                    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# ここに入り込む時点でrootは左端の葉ノード&lt;/span&gt;
                root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Peak Index in a Mountain Array</title>
      <link>/ja/post/peak-index-in-a-mountain-array/</link>
      <pubDate>Thu, 10 Mar 2022 14:08:57 +0900</pubDate>
      <guid>/ja/post/peak-index-in-a-mountain-array/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;大小関係がある位置を境に逆転する整数配列が与えられる．ピークとなる要素を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;めぐる式二分探索に落とし込む．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# めぐる式二分探索&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(arr):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True &lt;span style=&#34;color:#75715e&#34;&gt;# 条件を満たしているか判定してbool値を返す&lt;/span&gt;

    ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; XXX &lt;span style=&#34;color:#75715e&#34;&gt;# 絶対に条件を満たさないインデックス&lt;/span&gt;
    ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; YYY &lt;span style=&#34;color:#75715e&#34;&gt;# 絶対に条件を満たすインデックス&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
            ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ある位置以降で成否が一貫する条件を&lt;code&gt;is_ok(mid)&lt;/code&gt;で書けると簡単に解ける．今回の問題では，頂点となる位置以降で降順になるので条件は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr[mid] &amp;lt; arr[mid+1]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお，&lt;code&gt;mid+1&lt;/code&gt;がオーバーフローしないようにそこだけ条件分岐しておくことに注意．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;peakIndexInMountainArray&lt;/span&gt;(self, arr: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arr[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr[mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/peak-index-in-a-mountain-array/&#34;&gt;https://leetcode.com/problems/peak-index-in-a-mountain-array/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Palindrome Linked List</title>
      <link>/ja/post/palindrome-linked-list/</link>
      <pubDate>Tue, 22 Feb 2022 20:50:37 +0900</pubDate>
      <guid>/ja/post/palindrome-linked-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される連結リストが与えられる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与えられた連結リストが回分になっているか判定せよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回分になっているかを知るためにはとりあえず真ん中がほしいので，🐰と🐢が使える&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isPalindrome&lt;/span&gt;(self, head: Optional[ListNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-linked-list/&#34;&gt;https://leetcode.com/problems/palindrome-linked-list/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Middle of the Linked List</title>
      <link>/ja/post/middle-of-the-linked-list/</link>
      <pubDate>Tue, 22 Feb 2022 20:37:10 +0900</pubDate>
      <guid>/ja/post/middle-of-the-linked-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される連結リストが与えられたときに，真ん中の値はなにか計算する関数を書け．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head = [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5],        ans = [3] -&amp;gt; [4] -&amp;gt; [5]
head = [1] -&amp;gt; [2] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5] -&amp;gt; [6], ans = [4] -&amp;gt; [5] -&amp;gt; [6]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🐰と🐢テクニック
&lt;ul&gt;
&lt;li&gt;二倍の速度で動く🐰を端まで走らせると🐢は真ん中ぐらいにまだいる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;のループの条件は，ループ内部の実行時エラーが発生しない条件を考えれば良い．&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;middleNode&lt;/span&gt;(self, head: Optional[ListNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/middle-of-the-linked-list/&#34;&gt;https://leetcode.com/problems/middle-of-the-linked-list/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Remove Linked List Elements</title>
      <link>/ja/post/remove-linked-list-elements/</link>
      <pubDate>Tue, 22 Feb 2022 20:26:52 +0900</pubDate>
      <guid>/ja/post/remove-linked-list-elements/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義される連結リストに対して，指定された要素を削除する関数を書け．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;関数の引数と返り値は次の通り．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeElements&lt;/span&gt;(self, head: Optional[ListNode], val: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head = [1] -&amp;gt; [2] -&amp;gt; [6] -&amp;gt; [3] -&amp;gt; [4] -&amp;gt; [5] -&amp;gt; [6]
val = 6
ans = [1] -&amp;gt; [2] -&amp;gt;  [3] -&amp;gt; [4] -&amp;gt; [5] -&amp;gt; [6]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;単連結リストは「1つ次」が追えるデータ構造
&lt;ul&gt;
&lt;li&gt;つまり&lt;code&gt;curr&lt;/code&gt;があれば&lt;code&gt;curr.next&lt;/code&gt;が取れる（当たり前）&lt;/li&gt;
&lt;li&gt;その代わり1つ前が取れないので，追跡したいならそれ用の変数を用意しておく必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;単連結リストでの要素の削除は，「&lt;code&gt;curr&lt;/code&gt;を削除したいなら，&lt;code&gt;prev&lt;/code&gt;の次を（&lt;code&gt;curr&lt;/code&gt;を飛ばして）&lt;code&gt;curr.next&lt;/code&gt;にする」で実現される&lt;/li&gt;
&lt;li&gt;1つ前を追跡したいので&lt;code&gt;prev&lt;/code&gt;を考えるが，&lt;code&gt;head&lt;/code&gt;の1つ前はどうしようか，となり，&lt;code&gt;dummy_head&lt;/code&gt;を用意すればいいじゃないか，と至る．&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeElements&lt;/span&gt;(self, head: Optional[ListNode], val: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
        dummy_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head)

        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dummy_head
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; val:
                prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-linked-list-elements/&#34;&gt;https://leetcode.com/problems/remove-linked-list-elements/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Find Target Indices After Sorting Array</title>
      <link>/ja/post/find-target-indices-after-sorting-array/</link>
      <pubDate>Thu, 10 Feb 2022 17:23:09 +0900</pubDate>
      <guid>/ja/post/find-target-indices-after-sorting-array/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;配列&lt;code&gt;nums&lt;/code&gt;と整数&lt;code&gt;target&lt;/code&gt;が与えられる．&lt;code&gt;nums&lt;/code&gt;を昇順に整列したときに&lt;code&gt;nums[i] == target&lt;/code&gt;を満たすインデックス&lt;code&gt;i&lt;/code&gt;をすべて求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [1, 2, 5, 2, 3], target = 2
-&amp;gt; sorted nums = [1, 2, 2, 3, 5] -&amp;gt; ans = [1, 2]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;p&gt;言われたとおりにソートしてから位置を探す．ソートに時間がかかって$O(n \log n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;targetIndices&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;p&gt;整列後の配列に置いて，&lt;code&gt;target&lt;/code&gt;と等しい要素の位置を決定するのに，&lt;code&gt;target&lt;/code&gt;より大きい要素が整列されている必要はない．「&lt;code&gt;target&lt;/code&gt;より小さい値が何個あるのか」と「&lt;code&gt;target&lt;/code&gt;と等しい値が何個あるのか」で答えは求まる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nums&lt;/code&gt;を端から一舐めすれば十分で$O(n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;targetIndices&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        less &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                less &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(cnt):
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(less &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-target-indices-after-sorting-array/&#34;&gt;https://leetcode.com/problems/find-target-indices-after-sorting-array/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Happy Number</title>
      <link>/ja/post/happy-number/</link>
      <pubDate>Thu, 10 Feb 2022 17:09:58 +0900</pubDate>
      <guid>/ja/post/happy-number/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;happy number&lt;/code&gt;を次のように定義する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各桁の二乗和を取る操作を繰り返したときに繰り返し同じ数字が登場することなく&lt;code&gt;1&lt;/code&gt;で終わる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与えられた正の整数&lt;code&gt;n&lt;/code&gt;が&lt;code&gt;happy number&lt;/code&gt;であるかどうか判定せよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 19
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1 -&amp;gt; 19 is happy number!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;「各桁の二乗和を取る操作」での入出力の関係は隣接リストのように表現できて，そのリストが循環を含むのかを判定すれば良い．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;は各桁の二乗和を取っても&lt;code&gt;1&lt;/code&gt;に戻ることに注意．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isHappy&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc_next&lt;/span&gt;(n):
            total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n:
                n, d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
                total &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; d
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_next(n) &lt;span style=&#34;color:#75715e&#34;&gt;# ループの条件を下のようにするためにfasterを1つ進めておく&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_next(slower)
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calc_next(calc_next(faster))　
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/happy-number/&#34;&gt;https://leetcode.com/problems/happy-number/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linked List Cycle</title>
      <link>/ja/post/linked-list-cycle/</link>
      <pubDate>Thu, 10 Feb 2022 17:06:32 +0900</pubDate>
      <guid>/ja/post/linked-list-cycle/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;次のように定義された隣接リストが与えられたとき，そのリストが循環しているかを判定せよ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;:
     &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, x):
         self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
         self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;うさぎとかめテクニック．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasCycle&lt;/span&gt;(self, head: Optional[ListNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#75715e&#34;&gt;# うさぎは二歩進む&lt;/span&gt;
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#75715e&#34;&gt;# かめは一歩進む&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; slower:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True &lt;span style=&#34;color:#75715e&#34;&gt;# 循環していればどこかで必ず追いつく&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle/&#34;&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Count Vowel Substrings of a String</title>
      <link>/ja/post/count-vowel-substrings-of-a-string/</link>
      <pubDate>Thu, 03 Feb 2022 20:01:18 +0900</pubDate>
      <guid>/ja/post/count-vowel-substrings-of-a-string/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;word&lt;/code&gt;が与えられる．母音（&lt;code&gt;a&lt;/code&gt;，&lt;code&gt;e&lt;/code&gt;，&lt;code&gt;i&lt;/code&gt;，&lt;code&gt;o&lt;/code&gt;，&lt;code&gt;u&lt;/code&gt;）飲みからなる連続した部分文字列の個数を数え上げよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;word = &amp;quot;aeiouu&amp;quot; -&amp;gt; ans = 2 (&amp;quot;aeiou&amp;quot;, &amp;quot;aeiouu&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;しゃくとり法．数え上げ対象の部分列は連続した部分列になるので，両端を管理しながら数える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countVowelSubstrings&lt;/span&gt;(self, word: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}

        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        vowel_kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(word)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word[right] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; freq:
                v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[right]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freq[v] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    vowel_kind &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                freq[v] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; vowel_kind &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
                    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[head]
                    freq[h] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freq[h] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                        vowel_kind &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    head &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (head &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
                left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                vowel_kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;right&lt;/code&gt;を右に勧めながら，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子音にぶつかったらリセット&lt;/li&gt;
&lt;li&gt;母音にぶつかったら
&lt;ul&gt;
&lt;li&gt;観測した母音を頻度表に追加&lt;/li&gt;
&lt;li&gt;5種の母音を観測済みなら数え上げ開始
&lt;ul&gt;
&lt;li&gt;「観測済み母音種が5」を満たさなくなるまで&lt;code&gt;head&lt;/code&gt;を右に動かす（動かせるだけ数え上げ対象の部分列が存在することに）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head&lt;/code&gt;を動かせなくなったところで部分列の数を数えて記録&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/count-vowel-substrings-of-a-string/&#34;&gt;https://leetcode.com/problems/count-vowel-substrings-of-a-string/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Position of Large Groups</title>
      <link>/ja/post/position-of-large-groups/</link>
      <pubDate>Thu, 03 Feb 2022 19:56:52 +0900</pubDate>
      <guid>/ja/post/position-of-large-groups/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;s&lt;/code&gt;が与えられる．同種の文字が連続する部分のうち，長さが3以上の箇所をすべて取り出せ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = &amp;quot;abbxxxxzyy&amp;quot; -&amp;gt; [[3, 6]] (&amp;quot;xxxx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;しゃくとり法．伸ばせるところまで&lt;code&gt;right&lt;/code&gt;を伸ばして，条件を満たさなくなったら&lt;code&gt;left&lt;/code&gt;を&lt;code&gt;right+1&lt;/code&gt;まで一気に更新する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largeGroupPositions&lt;/span&gt;(self, s: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(s)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; s[left] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; s[right]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
                    ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([left, right&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
                left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/positions-of-large-groups/&#34;&gt;https://leetcode.com/problems/positions-of-large-groups/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shortest Distance to a Character</title>
      <link>/ja/post/shortest-distance-to-a-character/</link>
      <pubDate>Thu, 03 Feb 2022 18:30:24 +0900</pubDate>
      <guid>/ja/post/shortest-distance-to-a-character/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;文字列&lt;code&gt;s&lt;/code&gt;と文字&lt;code&gt;c&lt;/code&gt;が与えられる．次のような整数配列&lt;code&gt;answer&lt;/code&gt;を返せ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(answer) == len(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;answer[i]&lt;/code&gt;は位置&lt;code&gt;i&lt;/code&gt;から最も近い&lt;code&gt;c&lt;/code&gt;までの距離（インデックスの差の絶対値）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;s = &amp;quot;loveleetcode&amp;quot;, c = &amp;quot;e&amp;quot;
-&amp;gt; [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;各&lt;code&gt;i&lt;/code&gt;について，左右を見て近い&lt;code&gt;c&lt;/code&gt;を探せば良いのだが，これをそのまま書くのではなく，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各&lt;code&gt;i&lt;/code&gt;の左側をまず見る&lt;/li&gt;
&lt;li&gt;次に各&lt;code&gt;i&lt;/code&gt;の右側を見る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と書くとよい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   &amp;quot;l    o   v    e l e e t c o d e&amp;quot; (c = &amp;quot;e&amp;quot;)
-&amp;gt;) inf inf inf   0 1 0 0 1 2 3 4 0
     3   2   1    0 1 0 0 4 3 2 1 0 (&amp;lt;-
------------------------------------------------
-&amp;gt; [ 3   2   1    0 1 0 0 1 2 2 1 0] (min)
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shortestToChar&lt;/span&gt;(self, s: str, c: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c:
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; prev)

        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c:
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
            ans[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans[i], prev &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-distance-to-a-character/&#34;&gt;https://leetcode.com/problems/shortest-distance-to-a-character/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Uncommon Words From Two Sentences</title>
      <link>/ja/post/uncommon-words-from-two-sentences/</link>
      <pubDate>Thu, 03 Feb 2022 18:15:49 +0900</pubDate>
      <guid>/ja/post/uncommon-words-from-two-sentences/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;2文&lt;code&gt;s1&lt;/code&gt;，&lt;code&gt;s2&lt;/code&gt;が与えられる．片方の文に一度だけ登場する単語のリストを返す関数を実装せよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s1 = &amp;quot;this apple is sweet&amp;quot;
s2 = &amp;quot;this apple is sour&amp;quot;
-&amp;gt; [&amp;quot;sweet&amp;quot;,&amp;quot;sour&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;片方に一度だけ登場する単語は全体でも一度だけしか登場しない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uncommonFromSentences&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[str]:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2
        freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; freq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/uncommon-words-from-two-sentences/&#34;&gt;https://leetcode.com/problems/uncommon-words-from-two-sentences/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Count Common Words With One Occurrence</title>
      <link>/ja/post/count-common-words-with-one-occurrence/</link>
      <pubDate>Thu, 03 Feb 2022 18:06:32 +0900</pubDate>
      <guid>/ja/post/count-common-words-with-one-occurrence/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;文字列を格納する配列&lt;code&gt;words1&lt;/code&gt;，&lt;code&gt;words2&lt;/code&gt;が与えられる．どちらにも一度だけ登場する文字列の個数を求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;words1 = [&amp;quot;leetcode&amp;quot;,&amp;quot; is&amp;quot;, &amp;quot;amazing&amp;quot;, &amp;quot;as&amp;quot;, &amp;quot;is&amp;quot;]
words2 = [&amp;quot;amazing&amp;quot;, &amp;quot;leetcode&amp;quot;, &amp;quot;is&amp;quot;]
-&amp;gt; 2 (&amp;quot;leetcode&amp;quot;, &amp;quot;amazing&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;words1&lt;/code&gt;で一度しか登場しない文字列が確かに&lt;code&gt;words2&lt;/code&gt;でも一度しか登場しないかを確認すればいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countWords&lt;/span&gt;(self, words1: List[str], words2: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(words1)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; words2:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; freq[word] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                freq[word] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; freq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/count-common-words-with-one-occurrence/&#34;&gt;https://leetcode.com/problems/count-common-words-with-one-occurrence/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Pairs of Songs With Total Duration Divisible by 60</title>
      <link>/ja/post/pairs-of-songs-with-total-duration-divisible-by-60/</link>
      <pubDate>Thu, 03 Feb 2022 17:52:19 +0900</pubDate>
      <guid>/ja/post/pairs-of-songs-with-total-duration-divisible-by-60/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;time&lt;/code&gt;が与えられる．&lt;code&gt;time[i]&lt;/code&gt;は&lt;code&gt;i&lt;/code&gt;番目の歌の長さを表している．異なる歌同士の組み合わせで，その長さの合計が60で割り切れるようなペアの数を求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;times = [30, 20, 150, 100, 40] -&amp;gt; ans = 3 (30 + 150, 20 + 100, 20 + 40)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;2Sum問題のひねったバージョン．相方がいるかをメモっておけば二重ループを回避して$O(n)$で済む．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numPairsDivisibleBy60&lt;/span&gt;(self, time: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)]
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; time:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; memo[(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;]
            memo[t &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/&#34;&gt;https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Partition Array Into Disjoint Intervals</title>
      <link>/ja/post/partition-array-into-disjoint-intervals/</link>
      <pubDate>Thu, 03 Feb 2022 17:10:18 +0900</pubDate>
      <guid>/ja/post/partition-array-into-disjoint-intervals/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．&lt;code&gt;nums&lt;/code&gt;を以下の条件を満たすように左右に2分割することを考える．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左部分列のどの要素も，右部分列の要素以下である&lt;/li&gt;
&lt;li&gt;左右の部分列は空ではない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このとき，左部分列の長さを求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [5, 0, 3, 8, 6] -&amp;gt; ans = 3, [5, 0, 3] + [8, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;左部分列の最大値 &amp;lt;= 右部分列の最小値&lt;/code&gt;という条件を満たす&lt;code&gt;i&lt;/code&gt;を求める．&lt;/p&gt;
&lt;p&gt;左方向の最大値と右方向の最小値を別々に計算して最後に&lt;code&gt;i&lt;/code&gt;を見つけるというふうに考えると次のようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Time: O(N), Space: O(N)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partitionDisjoint&lt;/span&gt;(self, A: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(A)
        max_on_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
        max_on_left[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            max_on_left[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_on_left[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], A[i])
        min_on_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
        min_on_right[N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            min_on_right[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(min_on_right[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], A[i])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; max_on_left[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min_on_right[i]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max_on_left&lt;/code&gt;は単調増加な配列で，必要なのは直近の最大値だけなので配列じゃなくても良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Time: O(N), Space: O(N)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partitionDisjoint&lt;/span&gt;(self, A: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(A)
        min_on_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
        min_on_right[N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            min_on_right[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(min_on_right[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], A[i])
        current_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            current_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(current_max, A[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_max&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min_on_right[i]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更に空間計算量を減らすことができる．境界を左から右へ移していくとき，左側のその時点での最大値より小さい値に遭遇したら，そこは必ず左側に入ることが確定し，同時に左側部分列の長さが暫定で決まる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Time: O(N), Space: O(1)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partitionDisjoint&lt;/span&gt;(self, A: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(A)
        current_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        possible_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; A[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; A[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; current_max:
                length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                current_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; possible_max
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                possible_max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(possible_max, A[i])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; length
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-array-into-disjoint-intervals/&#34;&gt;https://leetcode.com/problems/partition-array-into-disjoint-intervals/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sum of Beauty in the Array</title>
      <link>/ja/post/sum-of-beauty-in-the-array/</link>
      <pubDate>Thu, 03 Feb 2022 16:54:48 +0900</pubDate>
      <guid>/ja/post/sum-of-beauty-in-the-array/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．&lt;code&gt;nums[i]&lt;/code&gt;の「綺麗さ」を次のように定める．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= j &amp;lt; i&lt;/code&gt;，&lt;code&gt;i &amp;lt; k &amp;lt;= nums.length - 1&lt;/code&gt;を満たすすべての&lt;code&gt;j&lt;/code&gt;，&lt;code&gt;k&lt;/code&gt;について，&lt;code&gt;nums[j] &amp;lt; nums[i] &amp;lt; nums[k]&lt;/code&gt;を満たすとき2点&lt;/li&gt;
&lt;li&gt;上記を満たさないとき，&lt;code&gt;nums[i - 1] &amp;lt; nums[i] &amp;lt; nums[i + 1]&lt;/code&gt;を満たすと1点&lt;/li&gt;
&lt;li&gt;さらに上記を満たさないとき，0点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すべての&lt;code&gt;i&lt;/code&gt;について綺麗さの合計を求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3] -&amp;gt; ans = 2
nums = [2, 4, 6, 4] -&amp;gt; ans = 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;1つ目の条件については，要するに「&lt;code&gt;max(nums[:i])&amp;lt; nums[i] &amp;lt; min(nums[i+1:])&lt;/code&gt;」．このまま書いてしまうと$O(n^2)$になってしまう．&lt;code&gt;i&lt;/code&gt;がちょっとずれただけで&lt;code&gt;i-1&lt;/code&gt;までの最大値最小値の結果が無駄にならないように実装する．&lt;/p&gt;
&lt;p&gt;一定方向の最大最小を事前に計算してく系の問題は結構ある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_on_left[i]&lt;/code&gt;：&lt;code&gt;nums[:i]&lt;/code&gt;の最大値&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_on_right[i]&lt;/code&gt;：&lt;code&gt;nums[i+1:]&lt;/code&gt;の最小値&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumOfBeauties&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)

        max_on_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, N, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            max_on_left[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(x, nums[i])

        min_on_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            min_on_right[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(x, nums[i])

        score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; max_on_left[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; min_on_right[i]:
                score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; score
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sum-of-beauty-in-the-array/&#34;&gt;https://leetcode.com/problems/sum-of-beauty-in-the-array/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ones and Zeros</title>
      <link>/ja/post/ones-and-zeros/</link>
      <pubDate>Wed, 02 Feb 2022 17:33:44 +0900</pubDate>
      <guid>/ja/post/ones-and-zeros/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;のみから構成される文字列を格納する配列&lt;code&gt;strs&lt;/code&gt;と整数&lt;code&gt;m&lt;/code&gt;，&lt;code&gt;n&lt;/code&gt;が与えられる．&lt;code&gt;strs&lt;/code&gt;からいくつかの文字列を取り出して，次の条件を満たすような文字列の集合&lt;code&gt;X&lt;/code&gt;を作りたい．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;に含まれる文字列について，&lt;code&gt;0&lt;/code&gt;の個数と&lt;code&gt;1&lt;/code&gt;の個数がそれぞれ最大でも&lt;code&gt;m&lt;/code&gt;個，&lt;code&gt;n&lt;/code&gt;個である&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt;の最大のサイズはいくつか&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ナップザック問題&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMaxForm&lt;/span&gt;(self, strs: List[str], m: int, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j][k]: 1, 2, ..., i番目までの文字列を対象に0が最大でj個，1が最大でi個存在するような部分集合を取ったときの要素数の最大値&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 更新式の立て方：dp[i][j][k]を一つ前の状態から更新することで求めると考える．今回はi番目のstrを入れるか入れないかの2つの状態から遷移してくるので&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j][k] = max(入れる場合, 入れない場合)になる．入れない場合は前と同じになるので&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j][k] = max(入れる場合, dp[i-1][j][k])．入れる場合を考えると，i番目のstrに0がzeros個，1がones個含まれているので，&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# i番目のstrを採用してdp[i][j][k]に至るということはその前はdp[i-1][j-zeros][k-ones]であるはずなので&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j][k] = max(dp[i-1][j-zeros][k-ones], dp[i-1][j][k])．ここで，j-zerosとk-onesがインデックスの値として正当な値になるためには0以上である必要があるので&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# j-zeros &amp;gt;= 0 and k-ones &amp;gt;= 0を条件に分岐する必要がある．elseの方はそもそも0をzeros個，1をones個追加してdp[i][j][k]に到達することができない（その前状態が存在してない）ので&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# i番目のstrを含むことができずそのままになる．&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# -----------------------------&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# if 0 &amp;lt;= j - zeros and 0 &amp;lt;= k - ones:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     dp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][j - zeros][k - ones] + 1)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# else:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     dp[i][j][k] = dp[i - 1][j][k]&lt;/span&gt;

        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(strs)
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
              &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count01&lt;/span&gt;(s):
            zeros, ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;:
                    zeros &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;:
                    ones &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (zeros, ones)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strs[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            zeros, ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count01(s)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; zeros &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ones:
                        dp[i][j][k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(
                            dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j][k], dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; zeros][k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ones] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        dp[i][j][k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j][k]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[l][m][n]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;出典&#34;&gt;出典&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/ones-and-zeroes/&#34;&gt;https://leetcode.com/problems/ones-and-zeroes/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Number</title>
      <link>/ja/post/single-number/</link>
      <pubDate>Wed, 02 Feb 2022 17:21:03 +0900</pubDate>
      <guid>/ja/post/single-number/</guid>
      <description>&lt;h2 id=&#34;問題1&#34;&gt;問題1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．&lt;code&gt;nums&lt;/code&gt;は1つのある整数$x$を除いてすべての整数が2個ずつ格納されている．$x$を求めよ．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number/&#34;&gt;https://leetcode.com/problems/single-number/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xor&lt;/code&gt;演算を使う
&lt;ul&gt;
&lt;li&gt;同じ整数同士の&lt;code&gt;xor&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;になることを利用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a ^ a == 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt;を全部&lt;code&gt;xor&lt;/code&gt;すれば1つしかない要素が残る&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;問題2&#34;&gt;問題2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．&lt;code&gt;nums&lt;/code&gt;は2つのある整数$x$，$y$を除いてすべての整数が2個ずつ格納されている．$x$，$y$を求めよ．&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number-iii/&#34;&gt;https://leetcode.com/problems/single-number-iii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;答え1&#34;&gt;答え1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;を使う&lt;/li&gt;
&lt;li&gt;時間計算量$O(n)$&lt;/li&gt;
&lt;li&gt;空間計算量$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
                s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(num)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;答え2&#34;&gt;答え2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xor&lt;/code&gt;を使う&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1つ目の問題と同じように考えると，&lt;code&gt;nums&lt;/code&gt;の要素全部の&lt;code&gt;xor&lt;/code&gt;を取った結果&lt;code&gt;P&lt;/code&gt;は&lt;code&gt;x&lt;/code&gt;と&lt;code&gt;y&lt;/code&gt;の重ね合わせになっているので分解する必要がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xor&lt;/code&gt;の特徴から，一方がわかれば良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;P&lt;/code&gt;を2進数表記したときに&lt;code&gt;1&lt;/code&gt;になっている桁に注目すると，そこに桁が立つということは，&lt;code&gt;x&lt;/code&gt;，&lt;code&gt;y&lt;/code&gt;のどっちかにもその位置の桁が立っていたはず（じゃないと&lt;code&gt;xor&lt;/code&gt;した結果に残らない）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;時間計算量$O(n)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空間計算量$O(1)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        xor1, xor2, i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 全部のxorを取る&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            xor1 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; num

        &lt;span style=&#34;color:#75715e&#34;&gt;# 1が立ってる最下位桁を取る（ホントはどこの桁でもいい）&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xor1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d:
                i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i:
                xor2 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; num

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [xor1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; xor2, xor2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Contains Duplicate</title>
      <link>/ja/post/contains-duplicate-1-2-3/</link>
      <pubDate>Wed, 02 Feb 2022 16:49:38 +0900</pubDate>
      <guid>/ja/post/contains-duplicate-1-2-3/</guid>
      <description>&lt;h2 id=&#34;contain-duplicate-1&#34;&gt;contain duplicate 1&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．2個以上同じ要素が&lt;code&gt;nums&lt;/code&gt;に含まれるかを判定せよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3, 1] -&amp;gt; True
nums = [1, 2, 3, 4] -&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;答え&#34;&gt;答え&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ソートして前から見ていく．&lt;/li&gt;
&lt;li&gt;時間計算量$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsDuplicate&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;contain-duplicate-2&#34;&gt;contain duplicate 2&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;，整数&lt;code&gt;k&lt;/code&gt;が与えられる．異なるインデックス&lt;code&gt;i&lt;/code&gt;，&lt;code&gt;j&lt;/code&gt;について，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums[i] == nums[j]&lt;/code&gt;かつ&lt;code&gt;abs(i - j) &amp;lt;= k&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を満たすような&lt;code&gt;(i, j)&lt;/code&gt;が存在するか判定せよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3, 1],       k = 3 -&amp;gt; True (i = 0, j = 3)
nums = [1, 2, 3, 1, 2, 3], k = 2 -&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;on2な答え&#34;&gt;$O(n^2)$な答え&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i, j)&lt;/code&gt;の組み合わせを全通り調べる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# TLE: O(n^2)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsNearbyDuplicate&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onな答え&#34;&gt;$O(n)$な答え&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最後に&lt;code&gt;num&lt;/code&gt;となる位置&lt;code&gt;i&lt;/code&gt;を覚えておけば判定可能&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsNearbyDuplicate&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict() &lt;span style=&#34;color:#75715e&#34;&gt;# {num: idx}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; memo:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; memo[num] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            memo[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;contain-duplicate-3&#34;&gt;contain duplicate 3&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;，整数&lt;code&gt;k&lt;/code&gt;，&lt;code&gt;t&lt;/code&gt;が与えられる．異なるインデックス&lt;code&gt;i&lt;/code&gt;，&lt;code&gt;j&lt;/code&gt;について，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abs(nums[i] - nums[j]) &amp;lt;= t&lt;/code&gt;かつ&lt;code&gt;abs(i - j) &amp;lt;= k&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を満たすような&lt;code&gt;(i, j)&lt;/code&gt;が存在するか判定せよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3, 1],       k = 3, t = 0 -&amp;gt; True (i = 0, j = 3)
nums = [1, 5, 9, 1, 5, 9], k = 2, t = 3 -&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;on2な答え-1&#34;&gt;$O(n^2)$な答え&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(i, j)&lt;/code&gt;の組み合わせを全通り調べる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# TLE: O(n^2)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsNearbyAlmostDuplicate&lt;/span&gt;(self, nums: List[int], k: int, t: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums[j]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; abs(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onな答え-1&#34;&gt;$O(n)$な答え&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;やや難しい&lt;/li&gt;
&lt;li&gt;バケットソートから発想&lt;/li&gt;
&lt;li&gt;（雑に言うと）&lt;code&gt;nums&lt;/code&gt;の数字を&lt;code&gt;MIN_NUM (= -2^31)&lt;/code&gt;からの距離で取り直した上で，幅&lt;code&gt;t&lt;/code&gt;でバケツを用意すると，同じバケツに属する数字は差が&lt;code&gt;t&lt;/code&gt;以内&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsNearbyAlmostDuplicate&lt;/span&gt;(self, nums: List[int], k: int, t: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        buckets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()  &lt;span style=&#34;color:#75715e&#34;&gt;# {remapped num: original num}&lt;/span&gt;
        MIN_NUM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            remapped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; MIN_NUM
            bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remapped &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bucket &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; buckets &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (bucket &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; buckets &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; buckets[bucket &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; remapped &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (bucket &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; buckets &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; remapped &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; buckets[bucket &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(buckets) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; k:  &lt;span style=&#34;color:#75715e&#34;&gt;# 位置が遠すぎる数字のbucketは不要なのでで消す&lt;/span&gt;
                last_bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (nums[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; MIN_NUM) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; buckets[last_bucket]
            buckets[bucket] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remapped

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Strongly Connected Components in Directed Graph</title>
      <link>/ja/post/strongly-connected-components-in-directed-graph/</link>
      <pubDate>Fri, 03 Dec 2021 12:25:43 +0900</pubDate>
      <guid>/ja/post/strongly-connected-components-in-directed-graph/</guid>
      <description>&lt;h2 id=&#34;有向グラフにおける強連結成分分解&#34;&gt;有向グラフにおける強連結成分分解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;強連結：任意の2頂点対$(u, v)$について，$u$から$v$に至るパスと$v$から$u$に至るパスの双方が存在する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;強連結成分：互いに強連結である頂点からなる頂点集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;強連結成分を計算するアルゴリズム&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2回のDFSを行う
&lt;ul&gt;
&lt;li&gt;【1】DFSを行って，頂点の帰りがけ順を求める&lt;/li&gt;
&lt;li&gt;【2】帰りがけ順上位から，元のグラフの辺の向きを逆転させたグラフ上でDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例題&#34;&gt;例題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/typical90/tasks/typical90_u&#34;&gt;https://atcoder.jp/contests/typical90/tasks/typical90_u&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

using namespace std;

int N, M;

bool has_visited[1 &amp;lt;&amp;lt; 18];
vector&amp;lt;int&amp;gt; G[1 &amp;lt;&amp;lt; 18];
vector&amp;lt;int&amp;gt; RG[1 &amp;lt;&amp;lt; 18];
vector&amp;lt;int&amp;gt; post_order;
long long cnt = 0;

void DFS(int node)
{
    has_visited[node] = true;
    for (int neighbor : G[node])
    {
        if (!has_visited[neighbor])
            DFS(neighbor);
    }
    post_order.push_back(node);
}

void RDFS(int node)
{
    has_visited[node] = true;
    cnt += 1;
    for (int neighbor : RG[node])
    {
        if (!has_visited[neighbor])
            RDFS(neighbor);
    }
}

int main()
{
    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
    for (int i = 1; i &amp;lt;= M; i++)
    {
        int A, B;
        cin &amp;gt;&amp;gt; A &amp;gt;&amp;gt; B;
        G[A].push_back(B);
        RG[B].push_back(A);
    }

    for (int i = 1; i &amp;lt;= N; i++)
        has_visited[i] = false;

    for (int node = 1; node &amp;lt;= N; node++)
    {
        if (!has_visited[node])
            DFS(node);
    }

    reverse(post_order.begin(), post_order.end());
    long long ans = 0;

    for (int i = 1; i &amp;lt;= N; i++)
        has_visited[i] = false;

    for (int node : post_order)
    {
        if (has_visited[node])
            continue;
        cnt = 0;
        RDFS(node);
        ans += cnt * (cnt - 1LL) / 2LL;
    }

    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Next Greater Element Series</title>
      <link>/ja/post/next-greater-element-series/</link>
      <pubDate>Sun, 24 Oct 2021 17:05:02 +0900</pubDate>
      <guid>/ja/post/next-greater-element-series/</guid>
      <description>&lt;h2 id=&#34;問題1&#34;&gt;問題1&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums1&lt;/code&gt;，&lt;code&gt;nums2&lt;/code&gt;が与えられる．&lt;code&gt;nums1&lt;/code&gt;は&lt;code&gt;nums2&lt;/code&gt;の部分配列である．&lt;code&gt;nums2&lt;/code&gt;には同じ整数が複数回登場することがないことが保証されている．ここで整数配列&lt;code&gt;nums&lt;/code&gt;の各要素&lt;code&gt;nums[i]&lt;/code&gt;に対して「次に大きい値」を次のように定める．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums[i+1:]&lt;/code&gt;で最初に&lt;code&gt;nums[i]&lt;/code&gt;より大きい値&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;nums1&lt;/code&gt;に含まれる要素について，&lt;code&gt;nums2&lt;/code&gt;における各要素の「次に大きい値」を求めよ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums1 = [4, 1, 2]
nums2 = [1, 3, 4, 2]

-&amp;gt; ans = [-1, 3, -1]
nums1[0] (= 4) ... nums2における「4の次に大きい値」は存在しないので -1
nums1[1] (= 1) ... nums2における「1の次に大きい値」は 3 (= nums2[1])
nums1[2] (= 2) ... nums2における「2の次に大きい値」は存在しないので -1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;h3 id=&#34;blute-force&#34;&gt;Blute-Force&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nums1&lt;/code&gt;の各要素について，毎回「次に大きい値」を$O(n)$で計算する．全体としては時間計算量が$O(n^2)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElement&lt;/span&gt;(self, nums1: List[int], nums2: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums1: &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
            idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(num)
            next_greater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; candidate &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums2[idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]: &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; candidate:
                    next_greater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; candidate
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(next_greater)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stackを使う&#34;&gt;stackを使う&lt;/h3&gt;
&lt;p&gt;「&lt;code&gt;nums2[i]&lt;/code&gt;の次に大きい値」候補は，確かに&lt;code&gt;nums2[i+1:]&lt;/code&gt;に含まれるがこれは無駄が多い．&lt;/p&gt;
&lt;p&gt;「&lt;code&gt;nums2[i]&lt;/code&gt;の次に大きい値」の候補は「&lt;code&gt;nums2[i+1]&lt;/code&gt;の次に大きい値，&lt;code&gt;nums2[i+2]&lt;/code&gt;の次に大きい値&amp;hellip;」である．&lt;/p&gt;
&lt;p&gt;これはつまり，&lt;code&gt;nums2[i]&lt;/code&gt;の次に大きい値を求める問題が&lt;code&gt;nums2[i+j]&lt;/code&gt;(&lt;code&gt;j = 1, 2, ...&lt;/code&gt;)という部分問題の貝を使って解けるということになる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[..., 5, 2, 1, 6]
      ^
5の次に大きい値 = max(2の次に大きい値, 1の次に大きい値, 6の次に大きい値)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これをstackで実装する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElement&lt;/span&gt;(self, nums1: List[int], nums2: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        next_greater &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict() &lt;span style=&#34;color:#75715e&#34;&gt;# nums2は重複要素が存在しないことが保証されている&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums2:
            next_greater[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums2)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;): &lt;span style=&#34;color:#75715e&#34;&gt;# 後ろから部分問題を解いていく&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums2[i]: &lt;span style=&#34;color:#75715e&#34;&gt;# nums2[i]以下の答え候補は答えになりえない&lt;/span&gt;
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                next_greater[nums2[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(nums2[i])

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [next_greater[num] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums1]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;問題2&#34;&gt;問題2&lt;/h2&gt;
&lt;p&gt;整数を要素とする循環配列&lt;code&gt;nums&lt;/code&gt;が与えられる．なお&lt;code&gt;nums[-1]&lt;/code&gt;の次の要素は&lt;code&gt;nums[0]&lt;/code&gt;であるとする．&lt;/p&gt;
&lt;p&gt;ここで整数配列&lt;code&gt;nums&lt;/code&gt;の各要素&lt;code&gt;nums[i]&lt;/code&gt;に対して「次に大きい値」を次のように定める．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums[i+1:]&lt;/code&gt;で最初に&lt;code&gt;nums[i]&lt;/code&gt;より大きい値&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;循環配列&lt;code&gt;nums&lt;/code&gt;の各要素について「次に大きい値」を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え-1&#34;&gt;答え&lt;/h2&gt;
&lt;h3 id=&#34;blute-force-1&#34;&gt;Blute-Force&lt;/h3&gt;
&lt;p&gt;循環配列は元の配列の2倍の長さにコピーしておけば普通の配列として扱える．あとは真面目に各要素について次に大きい値を$O(n)$で計算すればいい．全体としては$O(n^2)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElements&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums))]
        doubled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)): &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(nums)): &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; doubled[j]:
                    ret[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doubled[j]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nums&lt;/code&gt;の長さの剰余で実装してもいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElements&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums))]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)): &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)): &lt;span style=&#34;color:#75715e&#34;&gt;# O(n)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(nums)]:
                    ret[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(nums)]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stackを使う-1&#34;&gt;stackを使う&lt;/h3&gt;
&lt;p&gt;問題1と同じ発想．ただし循環配列なので2回配列を舐める必要がある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElements&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums))]
        filled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [False &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums))]
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#75715e&#34;&gt;# nums[i]の次に大きい値の候補（nums[i+?]の次に大きい値）をメモ&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):  &lt;span style=&#34;color:#75715e&#34;&gt;# 後ろからループ&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[i]:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()  &lt;span style=&#34;color:#75715e&#34;&gt;# nums[i]以下なのでstack[-1]は答えにならない&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                ret[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                filled[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(nums[i])  &lt;span style=&#34;color:#75715e&#34;&gt;# nums[i]はnums[i-1]以降の「次に大きい値」の候補&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# サイクルになっているので2周しておけば十分&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; filled[i]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[i]:
                    stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    ret[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                    filled[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;問題3&#34;&gt;問題3&lt;/h2&gt;
&lt;p&gt;整数&lt;code&gt;x&lt;/code&gt;が与えられる．&lt;code&gt;x&lt;/code&gt;と各桁の数字の集合が同じで&lt;code&gt;x&lt;/code&gt;の次に大きい整数を求めよ．存在しなければ&lt;code&gt;-1&lt;/code&gt;を返せ．&lt;/p&gt;
&lt;h2 id=&#34;答え-2&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;小さい桁から見ていく．小さい桁に向かって降順になっている部分を調べて，降順が崩れる箇所を特定する．降順になっている桁のうち，降順が崩れる桁の数字の次に大きい数字を交換して昇順に並べる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextGreaterElement&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(str(n))
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(digits) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# 降順になっている部分を探す&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; digits[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; digits[i]:
            i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 全部降順 -&amp;gt; 次に大きい値は存在しない&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(digits) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; digits[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; digits[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        digits[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], digits[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digits[j], digits[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        digits[i:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digits[i:][::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(digits))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;問題4&#34;&gt;問題4&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;日の気温が&lt;code&gt;temperatures[i]&lt;/code&gt;に記載されているような整数配列&lt;code&gt;temperatures&lt;/code&gt;が与えられる．各日付に対して，その日より暖かい日が何日後似合ったのかを計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え-3&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;「次に大きい値」系の問題そのもの．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dailyTemperatures&lt;/span&gt;(self, temperatures: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(temperatures))]
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(temperatures)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; temperatures[i]:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                ans[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i
            stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((temperatures[i], i))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;refs&#34;&gt;refs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/next-greater-element-i/&#34;&gt;https://leetcode.com/problems/next-greater-element-i/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/next-greater-element-ii/&#34;&gt;https://leetcode.com/problems/next-greater-element-ii/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/next-greater-element-iii/&#34;&gt;https://leetcode.com/problems/next-greater-element-iii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Maximum Difference Between Increasing Elements</title>
      <link>/ja/post/maximum-difference-between-increasing-elements/</link>
      <pubDate>Sun, 24 Oct 2021 15:51:26 +0900</pubDate>
      <guid>/ja/post/maximum-difference-between-increasing-elements/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．ここで，次に挙げる条件を満たすような2要素の差の最大値（&lt;code&gt;nums[j] - nums[i]&lt;/code&gt;）を求めよ．存在しなければ&lt;code&gt;-1&lt;/code&gt;を返せ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; len(nums)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[i] &amp;lt; nums[j]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;(i, j)&lt;/code&gt;の組み合わせを前通り調べ上げると$O(n^2)$．&lt;/p&gt;
&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nums&lt;/code&gt;を左から舐めながら，&lt;code&gt;min_sofar&lt;/code&gt;でその位置までの最小値を保存しておけば$O(n)$で求めたい答えが求まる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximumDifference&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        min_sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            min_sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(min_sofar, num)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min_sofar &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min_sofar)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法3&#34;&gt;解法3&lt;/h2&gt;
&lt;p&gt;Functionalに考える．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums:      [7, 1, 5, 4]
min_sofar: [7, 1, 1, 1]
diff:      [0, 0, 4, 3] # element-wise diff
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;diff&lt;/code&gt;の&lt;code&gt;max&lt;/code&gt;が答え．ただ，&lt;code&gt;nums = [9, 4, 3, 2]&lt;/code&gt;のような場合は返すべきは&lt;code&gt;-1&lt;/code&gt;なのでその処理のために&lt;code&gt;diff&lt;/code&gt;の&lt;code&gt;0&lt;/code&gt;を弾いてから&lt;code&gt;-1&lt;/code&gt;を追加した上で&lt;code&gt;max&lt;/code&gt;を取ると良い&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximumDifference&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools
        min_scan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accumulate(
            nums,
            min,
            initial&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+inf&amp;#34;&lt;/span&gt;)
        )

        min_scan &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(min_scan)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]

        zipped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zip(nums, min_scan)

        mapped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; _: _[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; _[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], zipped)

        filtered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; _: _ &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, mapped)

        &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; functools
        fold_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; func, acc, xs: functools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reduce(func, xs, acc)
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fold_left(max, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, filtered)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-difference-between-increasing-elements/&#34;&gt;https://leetcode.com/problems/maximum-difference-between-increasing-elements/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sliding Window Maximum</title>
      <link>/ja/post/sliding-window-maximum/</link>
      <pubDate>Sat, 09 Oct 2021 21:56:14 +0900</pubDate>
      <guid>/ja/post/sliding-window-maximum/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;と整数&lt;code&gt;k&lt;/code&gt;が与えられる．幅&lt;code&gt;k&lt;/code&gt;の窓を&lt;code&gt;nums&lt;/code&gt;上で左から右へ動かしながら，その窓の中の最大値を計算して返せ．&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;入力: nums = [1,3,-1,-3,5,3,6,7], k = 3
出力: [3,3,5,5,6,7]

window                     | max
---------------------------------
[1  3  -1] -3  5  3  6  7  | 3
 1 [3  -1  -3] 5  3  6  7  | 3
 1  3 [-1  -3  5] 3  6  7  | 5
 1  3  -1 [-3  5  3] 6  7  | 5
 1  3  -1  -3 [5  3  6] 7  | 6
 1  3  -1  -3  5 [3  6  7] | 7
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;総当りでやるなら$O(nk)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSlidingWindow&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(max(nums[i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;k]))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;monotonic queueを使うと$O(n)$で計算できる．
&lt;ul&gt;
&lt;li&gt;monotonic queue：要素が単調（増加｜減少）なキュー&lt;/li&gt;
&lt;li&gt;作りながら使う感じ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt;の&lt;code&gt;i&lt;/code&gt;番目までを&lt;code&gt;push()&lt;/code&gt;して&lt;code&gt;max_num()&lt;/code&gt;すると&lt;code&gt;max(nums[:i+1])&lt;/code&gt;が$O(1)$で取れるイメージ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正直まだ使い方・使い所は理解していない&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSlidingWindow&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MonoQueue&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deque() &lt;span style=&#34;color:#75715e&#34;&gt;# queueは単調減少&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(self, val):
                leftside &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# numsにおいて，valの左側に何個の数字があるか．&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; val:
                    leftside &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([val, leftside])

            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_num&lt;/span&gt;(self):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(self):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;popleft()

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        mq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MonoQueue()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            mq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(nums[i])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
            mq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push(nums[i])
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(mq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_num())
            mq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sliding-window-maximum/&#34;&gt;https://leetcode.com/problems/sliding-window-maximum/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ugly Number 2</title>
      <link>/ja/post/ugly-number-2/</link>
      <pubDate>Wed, 06 Oct 2021 14:45:53 +0900</pubDate>
      <guid>/ja/post/ugly-number-2/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;素因数が$2$，$3$，$5$のみからなる合成数を「ugly number」と呼ぶことにする．$n$番目のugly numberを計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;なんとなくugly numberを書き出してみると，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あるugly numberはそれ以前のugly numberのどれかに$2$，$3$，$5$のどれかを乗じて得られる最小の数になっている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nthUglyNumber&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        uglies &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        ptr2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ptr3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ptr5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n:
            ugly2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; uglies[ptr2]
            ugly3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; uglies[ptr3]
            ugly5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; uglies[ptr5]
            ugly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ugly2, ugly3, ugly5)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ugly &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ugly2:
                ptr2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ugly &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ugly3:
                ptr3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ugly &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ugly5:
                ptr5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            uglies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ugly)
            n &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; uglies[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/ugly-number-ii/&#34;&gt;https://leetcode.com/problems/ugly-number-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Merge $k$ Sorted List</title>
      <link>/ja/post/merge-k-sorted-list/</link>
      <pubDate>Wed, 06 Oct 2021 14:16:22 +0900</pubDate>
      <guid>/ja/post/merge-k-sorted-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$k$個の単連結リスト&lt;code&gt;lists&lt;/code&gt;が与えられる．連結リストは次のように定義される．各リストは昇順に整列されている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;すべてのリストを統合した上で昇順に整列した連結リストを返せ．&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1-&amp;gt;4-&amp;gt;5,
  1-&amp;gt;3-&amp;gt;4,
  2-&amp;gt;6
]
merging them into one sorted list:
1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;p&gt;なんにも考えずに，全ノードを一旦舐めて値を回収してソートする．マージ結果の連結リストに含まれるノード数を$N$として，時間計算量はソートがボトルネックになって$O(N \log N)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[ListNode]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        vals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lists:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                vals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
                node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        vals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode()
        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; vals:
            ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val)
            ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;p&gt;各連結リストの先頭から一番小さいやつを選んで新しいリストを作っていく．$n$を各リストの平均長として時間計算量は$O(kn)$．各リストから最小の要素を見つけるのに特に工夫をしなければ$O(n)$かかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[Optional[ListNode]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode()
        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lists:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(node)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(current) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            min_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;))
            min_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(current):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; min_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                    min_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node
                    min_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx
            ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min_node
            ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current[:min_idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; current[min_idx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(min_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法3&#34;&gt;解法3&lt;/h2&gt;
&lt;p&gt;解法2を改良する．「各リストから最小の要素を見つける」をPriority Queueを使って$O(1)$にできる．一方でPriority Queueへの要素の追加が$O(\log k)$かかるので，全体の時間計算量は$O(n \log k)$．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wrapper&lt;/code&gt;クラスを作って&lt;code&gt;ListNode&lt;/code&gt;に演算子&lt;code&gt;&amp;lt;&lt;/code&gt;を使えるようにする実装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[Optional[ListNode]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wrapper&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, node):
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node

            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __lt__(self, other):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val

        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode()
        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret

        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; queue &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; PriorityQueue
        pq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PriorityQueue()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lists:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            pq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(Wrapper(node))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; pq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty():
            min_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node
            ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min_node
            ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                pq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(Wrapper(min_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;どのリストから最小値のノードが取れたかを&lt;code&gt;lists&lt;/code&gt;上のインデックスとして保持しておく実装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[Optional[ListNode]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode()
        ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(lists):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val, idx))
        heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heapify(current)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(current) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            min_val, min_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(current)
            ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min_val)
            ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lists[min_idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(current, (lists[min_idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val, min_idx))
                lists[min_idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lists[min_idx]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法4&#34;&gt;解法4&lt;/h2&gt;
&lt;p&gt;「$k$個のリストのマージ」を「2個のリストのマージ，を$k-1$回」と考えて解くことも考えられる．一つ前の統合結果に次のリストを重ねて統合させていくイメージ．各リストの平均長を$n$として，全体の時間計算量は$O(nk^2)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[Optional[ListNode]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge_two_lists&lt;/span&gt;(list1, list2):
            dummy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dummy
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; list1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; list2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; list2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                    current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1
                    list1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2
                    list2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lists)):
            head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merge_two_lists(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next, lists[i])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法5&#34;&gt;解法5&lt;/h2&gt;
&lt;p&gt;解法4を改良する．解法4では，最初の方にマージされた頂点を何回も参照することになる．ここが無駄．そこで，分割統治法．2個ずつ，4個ずつ，8個ずつ&amp;hellip;マージしていけばいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeKLists&lt;/span&gt;(self, lists: List[Optional[ListNode]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[ListNode]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge_two_lists&lt;/span&gt;(list1, list2):
            dummy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dummy
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; list1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; list2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; list2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                    current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1
                    list1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2
                    list2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list1
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list2
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next

        N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lists)
        interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; interval &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; interval, interval &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
                lists[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merge_two_lists(lists[i], lists[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; interval])
            interval &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lists[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-k-sorted-lists/&#34;&gt;https://leetcode.com/problems/merge-k-sorted-lists/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sort Colors</title>
      <link>/ja/post/sort-colors/</link>
      <pubDate>Sun, 03 Oct 2021 14:54:54 +0900</pubDate>
      <guid>/ja/post/sort-colors/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;，&lt;code&gt;2&lt;/code&gt;，&lt;code&gt;3&lt;/code&gt; のみを要素として含む整数配列 &lt;code&gt;nums&lt;/code&gt; が与えられる．&lt;code&gt;nums&lt;/code&gt; を昇順に整列させるアルゴリズムを書きなさい．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;各要素が入るべき位置の末端を追跡しながら整列させる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;one&lt;/code&gt;：整列後の &lt;code&gt;nums&lt;/code&gt; に現れる連続する &lt;code&gt;1&lt;/code&gt; のうちの右端の位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;two&lt;/code&gt;：整列後の &lt;code&gt;nums&lt;/code&gt; に現れる連続する &lt;code&gt;2&lt;/code&gt; のうちの右端の位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;three&lt;/code&gt;：整列後の &lt;code&gt;nums&lt;/code&gt; に現れる連続する &lt;code&gt;3&lt;/code&gt; のうちの右端の位置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortColors&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Do not return anything, modify nums in-place instead.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        three &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; two &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; three:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[two] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                nums[one], nums[two] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[two], nums[one]
                one &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                two &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; nums[two] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
                two &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                nums[two], nums[three] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[three], nums[two]
                three &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;計算量は&lt;code&gt;two&lt;/code&gt;が&lt;code&gt;nums&lt;/code&gt;を左端から右端まで動くループが回るので$O(n)$&lt;/p&gt;
&lt;p&gt;一方で，&lt;code&gt;list.sort()&lt;/code&gt;すればいいという話もある．この場合は実際に実行されるアルゴリズムに依存するが$O(n \log n)$．&lt;/p&gt;
&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-colors/&#34;&gt;https://leetcode.com/problems/sort-colors/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Permutation in String</title>
      <link>/ja/post/permutation-in-string/</link>
      <pubDate>Sun, 05 Sep 2021 20:12:51 +0900</pubDate>
      <guid>/ja/post/permutation-in-string/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;2つの文字列&lt;code&gt;s1&lt;/code&gt;，&lt;code&gt;s2&lt;/code&gt;が与えられる．&lt;code&gt;s1&lt;/code&gt;の順列が&lt;code&gt;s2&lt;/code&gt;の部分文字列として含まれるか判定せよ．&lt;/p&gt;
&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Blute-force&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s1&lt;/code&gt;の順列を全部調べ上げる&lt;/li&gt;
&lt;li&gt;時間計算量：$O(l_1 !)$
&lt;ul&gt;
&lt;li&gt;ただし$l_1$は&lt;code&gt;s1&lt;/code&gt;の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permutation&lt;/span&gt;(s, sofar):
            nonlocal flag
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sofar &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s2:
                    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s)):
                permutation(s[:i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[i])

        permutation(s1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;code&gt;s1&lt;/code&gt;の順列が&lt;code&gt;s2&lt;/code&gt;の部分文字列として含まれるか判定せよ．」なので，実際に&lt;code&gt;s2&lt;/code&gt;に含まれる順列がどの順列なのかは不要&lt;/li&gt;
&lt;li&gt;要するに「&lt;code&gt;s1&lt;/code&gt;と同じ文字種・同じ個数で構成される」&lt;code&gt;s2&lt;/code&gt;の部分文字列があるかを調べれば良い&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s1&lt;/code&gt;をソートしたのと&lt;code&gt;s2&lt;/code&gt;の部分列をソートしたのが一致すれば十分&lt;/li&gt;
&lt;li&gt;時間計算量：$O(l_1 \log l_1 + (l_2 - l_1) l_1 \log l_1)$
&lt;ul&gt;
&lt;li&gt;$l_1 \log l_1$：&lt;code&gt;s1&lt;/code&gt;のソート&lt;/li&gt;
&lt;li&gt;$(l_2 - l_1) l_1 \log l_1$：長さ&lt;code&gt;len(s1)&lt;/code&gt;の部分列が&lt;code&gt;len(s2) - len(s1)&lt;/code&gt;個存在してそれぞれソートされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(sorted(s1))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(sorted(s2[i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;len(s1)])):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法3&#34;&gt;解法3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法2と同じ発想で別のやり方&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;s1&lt;/code&gt;と同じ文字種が同じ個数存在するか」を辞書の比較で実現&lt;/li&gt;
&lt;li&gt;時間計算量：$O(l_1 + (l_2 - l_1) l_1 )$
&lt;ul&gt;
&lt;li&gt;$l_1$：&lt;code&gt;s1&lt;/code&gt;に含まれる文字種がそれぞれ何個存在するかの辞書を作る&lt;/li&gt;
&lt;li&gt;$(l_2 - l_1) l_1$：&lt;code&gt;len(s2) - len(s1)&lt;/code&gt;個の部分文字列のそれぞれについて辞書を比較&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; len(s2):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        &lt;span style=&#34;color:#75715e&#34;&gt;# 辞書作る&lt;/span&gt;
        cnt1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(s1)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;# 辞書作る&lt;/span&gt;
            cnt2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s1)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cnt2:
                    cnt2[s2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    cnt2[s2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;# 辞書同士の比較&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt2:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法4&#34;&gt;解法4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法3を辞書じゃなくて&lt;code&gt;key&lt;/code&gt;を位置で代用した配列でやる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; len(s2):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        cnt1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s1:
            cnt1[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            cnt2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s2[i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;len(s1)]:
                cnt2[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt1[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; cnt2[i]:
                    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法5&#34;&gt;解法5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法4を改良する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(s2) - len(s1)&lt;/code&gt;個ある部分文字列のそれぞれに対して，ゼロから辞書を毎回作るのは無駄では？
&lt;ul&gt;
&lt;li&gt;一文字部分文字列がズレるときの辞書は，部分文字列から消える文字が何で，部分文字列に新しく加わる文字が何かを追えば差分を更新するだけで作れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量：$O(l_1 + (l_2 - l_1) * 26)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; len(s2):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        cnt1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
        cnt2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s1)):
            ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1[i]
            cnt1[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2[i]
            cnt2[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(cnt1, cnt2):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt1[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; cnt2[i]:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(s1)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; match(cnt1, cnt2):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2[i]
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(s1)]
            cnt2[ord(left) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            cnt2[ord(right) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; match(cnt1, cnt2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法5-1&#34;&gt;解法5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法4を改良する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;match(cnt1, cnt2)&lt;/code&gt;をいい感じにしたい&lt;/li&gt;
&lt;li&gt;個数が一致する文字種の数が一致するかを部分文字列の差分から計算できれば，辞書のすべての要素について個数をチェックするループが消せそう
&lt;ul&gt;
&lt;li&gt;定数倍計算量が削減できそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkInclusion&lt;/span&gt;(self, s1: str, s2: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; len(s2):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        cnt1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
        cnt2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s1)):
            ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1[i]
            cnt1[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2[i]
            cnt2[ord(ch) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        matched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 個数が一致する文字種の数&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt1[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt2[i]:
                matched &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(s1)):
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(s2[i]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(s2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(s1)]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matched &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

            cnt2[left] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 次のiで左端の文字は部分文字列から消える&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt2[left] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt1[left]:
                matched &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 左端の文字が部分文字列から消えた結果，個数が一致した文字種が増えた&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cnt2[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt1[left]:
                matched &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 左端の文字が部分文字列から消えた結果，個数が一致した文字種が減った&lt;/span&gt;

            cnt2[right] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 次のiで右端の文字は部分文字列に追加される&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt2[right] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt1[right]:
                matched &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 右端の文字が部分文字列に追加された結果，個数が一致した文字種が増えた&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cnt2[right] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cnt1[right]:
                matched &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 右端の文字が部分文字列に追加された結果，個数が一致した文字種が減った&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; matched &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/permutation-in-string/&#34;&gt;https://leetcode.com/problems/permutation-in-string/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minimum Size Subarray Sum</title>
      <link>/ja/post/minimum-size-subarray-sum/</link>
      <pubDate>Wed, 01 Sep 2021 00:08:00 +0900</pubDate>
      <guid>/ja/post/minimum-size-subarray-sum/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;正整数配列&lt;code&gt;nums&lt;/code&gt;と整数&lt;code&gt;target&lt;/code&gt;が与えられる．&lt;code&gt;nums&lt;/code&gt;の連続する部分列のうち，その和が&lt;code&gt;target&lt;/code&gt;以上となるような部分列の最小の長さを求めよ．そのような部分列が存在しないならば&lt;code&gt;0&lt;/code&gt;を返せ．&lt;/p&gt;
&lt;h2 id=&#34;方針&#34;&gt;方針&lt;/h2&gt;
&lt;p&gt;常に考えるべきは&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;まずはbrute-force&lt;/li&gt;
&lt;li&gt;無駄な計算はないか？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;brute-force&lt;/li&gt;
&lt;li&gt;考えられるすべての部分列を列挙して，それぞれについて和をとって&lt;code&gt;target&lt;/code&gt;以上になるかを調べる&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n^3)$
&lt;ul&gt;
&lt;li&gt;$O(n^2)$個の部分列それぞれに対して，$O(n)$で和を取る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, len(nums)):
                s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[i:j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; s:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法1を改良する&lt;/li&gt;
&lt;li&gt;部分列の和を累積和を使って$O(1)$で求めれば全体は$O(n^2)$に落とせる
&lt;ul&gt;
&lt;li&gt;累積和：&lt;code&gt;accum[0] = 0&lt;/code&gt;，&lt;code&gt;accum[i] = accum[i-1] + nums[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n^2)$
&lt;ul&gt;
&lt;li&gt;$O(n^2)$個の部分列それぞれに対して，$O(1)$で和を取る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(n)$
&lt;ul&gt;
&lt;li&gt;累積和の配列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, len(nums)):
                s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; accum[i]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; s:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法3&#34;&gt;解法3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法2を改良する&lt;/li&gt;
&lt;li&gt;累積和&lt;code&gt;accum&lt;/code&gt;は単調に増加する配列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target = accum[j+1] - accum[i]&lt;/code&gt;だから&lt;code&gt;accum[j+1] = target + accum[i]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;を固定したときに&lt;code&gt;j+1&lt;/code&gt;は&lt;code&gt;accum&lt;/code&gt;に対する二分探索で$O(\log n)$で求められる&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n \log n)$
&lt;ul&gt;
&lt;li&gt;$O(n)$で左端が回って，$O(\log n)$で部分和が&lt;code&gt;target&lt;/code&gt;を超える境目が取れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(n)$
&lt;ul&gt;
&lt;li&gt;累積和の配列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bisect_left(accum, accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; target)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(accum):
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法4&#34;&gt;解法4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尺取法というテク
&lt;ul&gt;
&lt;li&gt;解法3の改良（&lt;code&gt;accum&lt;/code&gt;を全部保持しない）とも捉えられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;左端を固定したときに，その部分列の和が&lt;code&gt;target&lt;/code&gt;を超えた時点で右端はそれ以上伸ばしても意味ない&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n)$
&lt;ul&gt;
&lt;li&gt;$O(n)$で左端が回っておしまい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            accum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; nums[right]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; accum:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                accum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; nums[left]
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-size-subarray-sum/&#34;&gt;https://leetcode.com/problems/minimum-size-subarray-sum/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find $K$ Closest Elements</title>
      <link>/ja/post/find-k-closest-elements/</link>
      <pubDate>Tue, 31 Aug 2021 20:20:51 +0900</pubDate>
      <guid>/ja/post/find-k-closest-elements/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;昇順に&lt;/strong&gt;ソートされた整数配列&lt;code&gt;arr&lt;/code&gt;と整数&lt;code&gt;k&lt;/code&gt;，&lt;code&gt;x&lt;/code&gt;が与えられる．&lt;code&gt;arr&lt;/code&gt;内の&lt;code&gt;x&lt;/code&gt;に「近い」&lt;code&gt;k&lt;/code&gt;個の整数を照準に格納した配列を返す関数を書け．&lt;/p&gt;
&lt;p&gt;ここで「整数&lt;code&gt;a&lt;/code&gt;が整数&lt;code&gt;b&lt;/code&gt;より整数&lt;code&gt;x&lt;/code&gt;に近い」とは，「&lt;code&gt;|a - x| &amp;lt; |b - x|&lt;/code&gt;」もしくは「&lt;code&gt;|a - x| == |b - x|&lt;/code&gt;かつ&lt;code&gt;a &amp;lt; b&lt;/code&gt;」となることを意味する．&lt;/p&gt;
&lt;h2 id=&#34;解法1&#34;&gt;解法1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;言われたとおりにソートして冒頭&lt;code&gt;k&lt;/code&gt;個を返す．&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n \log n + k \log k)$
&lt;ul&gt;
&lt;li&gt;$n$：&lt;code&gt;arr&lt;/code&gt;の長さ，$k$：与えられた整数&lt;code&gt;k&lt;/code&gt;（以下も同様）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findClosestElements&lt;/span&gt;(self, arr: List[int], k: int, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(arr, key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; a: abs(a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x))
        arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[:k]
        arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(arr)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法2&#34;&gt;解法2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配列がソートされているので，求める答えは&lt;code&gt;arr&lt;/code&gt;の長さ&lt;code&gt;k&lt;/code&gt;の部分配列になる&lt;/li&gt;
&lt;li&gt;いわゆる2 pointersというテクニック（？）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;，&lt;code&gt;right&lt;/code&gt;をそれぞれ左端，右端から詰めていく&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量：$O(n - k)$
&lt;ul&gt;
&lt;li&gt;ポインタの移動回数分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findClosestElements&lt;/span&gt;(self, arr: List[int], k: int, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr[left] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; arr[right] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x:
                right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# rightのほうがxから遠い&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arr[left:right&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法3&#34;&gt;解法3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;答えとなる部分配列の右端の整数は&lt;code&gt;x&lt;/code&gt;以上の値なはずなので，&lt;code&gt;right&lt;/code&gt;の位置をそこから始めても構わない！
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;の初期値を「&lt;code&gt;arr&lt;/code&gt;内で初めて&lt;code&gt;x&lt;/code&gt;以上になる最小の位置」から初めて良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;領域を広げていく方向で答えを求める&lt;/li&gt;
&lt;li&gt;時間計算量：$O(log n + k)$&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findClosestElements&lt;/span&gt;(self, arr: List[int], k: int, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bisect_left(arr, x) &lt;span style=&#34;color:#75715e&#34;&gt;# rightの初期位置&lt;/span&gt;
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr[left] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; arr[right] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x):
                left &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# leftの方がxに近いので左に伸ばす&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            k &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arr[left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:right]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法4&#34;&gt;解法4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解法3を改良する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;の初期値は&lt;code&gt;arr[0:len(arr) - k]&lt;/code&gt;のどこか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;の初期値を決定するときの無駄な計算が減る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間計算量：$O(log (n - k) + k)$&lt;/li&gt;
&lt;li&gt;空間計算量：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findClosestElements&lt;/span&gt;(self, arr: List[int], k: int, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bisect_left(arr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k], x)
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; arr[left] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; arr[right] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x):
                left &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            k &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; arr[left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:right]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/find-k-closest-elements/&#34;&gt;https://leetcode.com/problems/find-k-closest-elements/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search a 2D Matrix</title>
      <link>/ja/post/search-a-2d-matrix/</link>
      <pubDate>Mon, 30 Aug 2021 15:23:33 +0900</pubDate>
      <guid>/ja/post/search-a-2d-matrix/</guid>
      <description>&lt;h2 id=&#34;search-a-2d-array&#34;&gt;Search a 2D Array&lt;/h2&gt;
&lt;p&gt;昇順に整列された配列&lt;code&gt;nums&lt;/code&gt;から与えられた&lt;code&gt;target&lt;/code&gt;を効率よく探すには二分探索が有効．&lt;code&gt;nums&lt;/code&gt;の長さを$N$として，$O(log N)$で見つけられる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(nums, target):
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right:
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bisect&lt;/code&gt;というライブラリもある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bisect

nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# target以上になる最小のインデックスを返す&lt;/span&gt;
bisect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bisect_left(nums, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 2&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# targetより大きくなる最小のインデックスを返す&lt;/span&gt;
bisect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bisect(nums, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;めぐる式二分探索というバグらせない実装もある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# target以上になる最小のインデックスを返す&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(nums, target):
    ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
            ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;search-a-2d-matrix-1&#34;&gt;Search a 2D Matrix 1&lt;/h2&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://leetcode.com/problems/search-a-2d-matrix/&#34;&gt;https://leetcode.com/problems/search-a-2d-matrix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一列の整数配列と見なして二分探索できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchMatrix&lt;/span&gt;(self, matrix: List[List[int]], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high:
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix[mid &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; w][mid &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; w] &lt;span style=&#34;color:#75715e&#34;&gt;# ここが大事&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;search-a-2d-matrix-2&#34;&gt;Search a 2D Matrix 2&lt;/h2&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://leetcode.com/problems/search-a-2d-matrix-ii/&#34;&gt;https://leetcode.com/problems/search-a-2d-matrix-ii/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;解法1各列or-各列に対して二分探索&#34;&gt;解法1：各列（or 各列）に対して二分探索&lt;/h3&gt;
&lt;p&gt;各列（or 各列）に対して二分探索していく．どちらの方向に二分探索するかは与えられた二次元配列の縦横の大きさを比べて決めればいい．時間計算量は$O(\min(h \log w, w \log h))$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchMatrix&lt;/span&gt;(self, matrix: List[List[int]], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; high:
                mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matrix[h][mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; matrix[h][mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法2右上から左下に向かって探索範囲を絞る&#34;&gt;解法2：右上から左下に向かって探索範囲を絞る&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;matrix[i][j]&lt;/code&gt;の要素が&lt;code&gt;target&lt;/code&gt;より小さいなら，&lt;code&gt;target&lt;/code&gt;は&lt;code&gt;i+1&lt;/code&gt;行目以下にあるはず．
&lt;code&gt;matrix[i][j]&lt;/code&gt;の要素が&lt;code&gt;target&lt;/code&gt;より大きいなら，&lt;code&gt;target&lt;/code&gt;は&lt;code&gt;j-1&lt;/code&gt;列目以左にあるはず．
時間計算量は，最悪の場合右上から左下まで下or左で到達するまでループが回るので$O(h + w)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchMatrix&lt;/span&gt;(self, matrix: List[List[int]], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        &lt;span style=&#34;color:#75715e&#34;&gt;# 右上&lt;/span&gt;
        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; w:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matrix[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; matrix[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                h &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                w &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法3二分探索っぽく探索領域を狭めていく&#34;&gt;解法3：二分探索っぽく探索領域を狭めていく&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;matrix[i][j]&lt;/code&gt;の要素が&lt;code&gt;target&lt;/code&gt;より小さいなら，領域&lt;code&gt;(0, 0), (i, j)&lt;/code&gt;（&lt;code&gt;(i, j)&lt;/code&gt;を右下端とする左上方向の長方形領域）は全部&lt;code&gt;target&lt;/code&gt;より小さいので探索範囲から除外できる．
&lt;code&gt;matrix[i][j]&lt;/code&gt;の要素が&lt;code&gt;target&lt;/code&gt;より大きいなら，領域&lt;code&gt;(i, j), (h, w)&lt;/code&gt;（&lt;code&gt;(i, j)&lt;/code&gt;を左上端とする右下方向の長方形領域）は全部&lt;code&gt;target&lt;/code&gt;より大きいので探索範囲から除外できる．&lt;/p&gt;
&lt;p&gt;時間計算量の考察はやや複雑．漸化式で計算量を表現できてそれを解くことで得られる．結果だけ書くと$O(h \log (w/h))$（ただし$h \lt w$）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchMatrix&lt;/span&gt;(self, matrix: List[List[int]], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_submatrix&lt;/span&gt;(top_row, left_col, bottom_row, right_col):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; top_row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bottom_row &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; left_col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; right_col:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

            mid_row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (top_row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bottom_row) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left_col
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right_col
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right:
                mid_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matrix[mid_row][mid_col] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; matrix[mid_row][mid_col] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid_col &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid_col &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            upper_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; search_submatrix(
                top_row, left, mid_row &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right_col)
            lower_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; search_submatrix(
                mid_row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, left_col, bottom_row, right)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; upper_right &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; lower_left

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_submatrix(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>$K$th Smallest Element in a Sorted Matrix</title>
      <link>/ja/post/k-th-smallest-element-in-a-sorted-matrix/</link>
      <pubDate>Tue, 24 Aug 2021 12:36:57 +0900</pubDate>
      <guid>/ja/post/k-th-smallest-element-in-a-sorted-matrix/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$N \times N$の二次元配列&lt;code&gt;matrix&lt;/code&gt;が与えられる．&lt;code&gt;matrix&lt;/code&gt;の各行・各列は昇順に整列されている．&lt;code&gt;matrix&lt;/code&gt;内の$k$番目に小さい値を取得せよ．&lt;/p&gt;
&lt;h2 id=&#34;min-heapを使う&#34;&gt;min heapを使う&lt;/h2&gt;
&lt;p&gt;「$k$番目に小さい値」系だとheapが使えることが多い印象．ソートされている行列を舐めながら候補となる値を次々にheapに突っ込んで，先頭から$k$個取っていけばいい．heapに突っ込むのと先頭を取るのを同時にやるのでやや混乱するかも知れない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kthSmallest&lt;/span&gt;(self, matrix: List[List[int]], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; heapq
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(heap, (matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][col], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, col))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            (_, row, col) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(heap)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(heap, (matrix[row&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][col], row&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, col))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; heap[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二分探索&#34;&gt;二分探索&lt;/h2&gt;
&lt;p&gt;「昇順」から二分探索が使えそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kthSmallest&lt;/span&gt;(self, matrix: List[List[int]], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; high:
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(matrix)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; matrix[i][j]:
                    j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
                low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; low
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;「$k$番目に小さい値$x$を求めよ」を「初めて$x$以下の数字が$k$個以上あるような$x$を求めよ」と言い換えてめぐる式二分探索に落とし込む．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kthSmallest&lt;/span&gt;(self, matrix: List[List[int]], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# 無駄の多い is_ok()&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# def is_ok(mid):&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     cnt = 0&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     for i in range(len(matrix)):&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#         for j in range(len(matrix[0])):&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#             if matrix[i][j] &amp;lt;= mid:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#                 cnt += 1&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#             else:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#                 break&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     return k &amp;lt;= cnt&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# 改良版&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(matrix)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; matrix[i][j]:
                    j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cnt

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/&#34;&gt;https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1次元の座標圧縮</title>
      <link>/ja/post/one-dimention-coordinate-compression/</link>
      <pubDate>Mon, 09 Aug 2021 17:30:50 +0900</pubDate>
      <guid>/ja/post/one-dimention-coordinate-compression/</guid>
      <description>&lt;h2 id=&#34;1次元の座標圧縮&#34;&gt;1次元の座標圧縮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与えられた数列から，その大小関係だけを表すように値を振り直す操作&lt;/li&gt;
&lt;li&gt;入力例：&lt;code&gt;3, 3, 1, 6, 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力例：&lt;code&gt;1, 1, 0, 2, 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;辞書を使う実装&#34;&gt;辞書を使う実装&lt;/h2&gt;
&lt;p&gt;ソートして位置を辞書に保存しておく&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; zip;   &lt;span style=&#34;color:#75715e&#34;&gt;// 圧縮前 -&amp;gt; 圧縮後
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; unzip; &lt;span style=&#34;color:#75715e&#34;&gt;// 圧縮前 &amp;lt;- 圧縮後
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
sort(X.begin(), X.end());
X.erase(unique(X.begin(), X.end()), X.end());
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; X.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  zip[X[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  unzip[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X[i];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二分探索を使う実装&#34;&gt;二分探索を使う実装&lt;/h2&gt;
&lt;p&gt;ソートして位置を保存しておく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X;
sort(vals.begin(), vals.end());
vals.erase(unique(vals.begin(), vals.end()), vals.end());
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)X.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 各要素の位置を二分探索で求めてる
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    X[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(vals.begin(), vals.end(), X[i]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; vals.begin();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc036/tasks/abc036_c&#34;&gt;https://atcoder.jp/contests/abc036/tasks/abc036_c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; X(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; X[i];
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vals(N);
    vals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; X;
    sort(vals.begin(), vals.end());
    vals.erase(unique(vals.begin(), vals.end()), vals.end());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)X.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        X[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(vals.begin(), vals.end(), X[i]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; vals.begin();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; X[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc113/tasks/abc113_c&#34;&gt;https://atcoder.jp/contests/abc113/tasks/abc113_c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; P(M, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Y(M, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; P[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Y[i];
        P[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vals(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        vals[P[i]].push_back(Y[i]);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; p&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        sort(vals[p].begin(), vals[p].end());
        vals[p].erase(unique(vals[p].begin(), vals[p].end()), vals[p].end());
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; P[i];
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%06d&amp;#34;&lt;/span&gt;, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(vals[p].begin(), vals[p].end(), Y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; vals[p].begin();
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%06d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, id &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Path Parameter, Query Parameter, Request Body</title>
      <link>/ja/post/path-parameter-query-parameter-request-body/</link>
      <pubDate>Mon, 26 Jul 2021 15:21:02 +0900</pubDate>
      <guid>/ja/post/path-parameter-query-parameter-request-body/</guid>
      <description>&lt;p&gt;Path Parameter，Query Parameter，Request Bodyの使い分け．&lt;/p&gt;
&lt;h2 id=&#34;path-parameter&#34;&gt;Path Parameter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;あるリソースを識別するのに必要な情報&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：&lt;code&gt;GET posts/1&lt;/code&gt;：1本目のブログ投稿&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：&lt;code&gt;GET users/1&lt;/code&gt;：1人目のユーザ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;query-parameter&#34;&gt;Query Parameter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;あるリソースに対する操作を通じてデータを取得するのに必要な情報&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「リソースに対する操作」とは例えばソートするとか検索するとか範囲を絞るとか&lt;/li&gt;
&lt;li&gt;検索・フィルタの条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：&lt;code&gt;GET groups/2?sort=true&amp;amp;limit=20&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グループをソートして上位20件を取得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：&lt;code&gt;https://www.google.com/search?q=google&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索クエリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;request-body&#34;&gt;Request Body&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;あるリソースに対する追加・更新に必要な情報
&lt;ul&gt;
&lt;li&gt;追加・更新する内容自体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フローチャート&#34;&gt;フローチャート&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;if パラメタが「一意にリソースを特定する識別子」:
    PathParameter
elif パラメタが「リソースのソート・フィルタリング・検索などの条件」:
    QueryParameter
elif パラメタが「リソースに対する追加・更新の情報」:
    RequestBody
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;認証情報とかメタデータだとどうするみたいな話もあるが今はとりあえず割愛．&lt;/p&gt;
&lt;h2 id=&#34;refs&#34;&gt;Refs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7231&#34;&gt;https://tools.ietf.org/html/rfc7231&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sakuraya/items/6f1030279a747bcce648&#34;&gt;https://qiita.com/sakuraya/items/6f1030279a747bcce648&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Shokorep/items/b7697a146cbb1c3e9f0b&#34;&gt;https://qiita.com/Shokorep/items/b7697a146cbb1c3e9f0b&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Product of Array Expect Self</title>
      <link>/ja/post/product-of-array-expect-self/</link>
      <pubDate>Thu, 08 Jul 2021 15:11:58 +0900</pubDate>
      <guid>/ja/post/product-of-array-expect-self/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;nums&lt;/code&gt;がが与えられる．そこで，$i$番目の要素が&lt;code&gt;nums&lt;/code&gt;の$i$番目以外の要素の積からなる配列&lt;code&gt;answer&lt;/code&gt;を返す関数を書け．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;answer[i]&lt;/code&gt;を定義どおりに計算すると全体で$O(n^2)$．これを回避したい．&lt;code&gt;answer[i]&lt;/code&gt;と&lt;code&gt;answer[i+1]&lt;/code&gt;のそれぞれの因数は共通している部分が多いので，無駄な計算をしていそう．そこで累積積（累積和からの造語）を考えてみるとうまくいきそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productExceptSelf&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
            output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(p)
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nums[i]
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            output[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nums[i]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Squares of a Sorted Array</title>
      <link>/ja/post/squares-of-a-sorted-array/</link>
      <pubDate>Mon, 05 Jul 2021 18:47:49 +0900</pubDate>
      <guid>/ja/post/squares-of-a-sorted-array/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;昇順にソートされた整数配列&lt;code&gt;nums&lt;/code&gt;が与えられる．各要素の二乗からなる昇順の整数配列を求めよ&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$O(n \log n)$な答え
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abs&lt;/code&gt;を基準に&lt;code&gt;nums&lt;/code&gt;をソートして二乗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedSquares&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(nums, key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: abs(x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, nums))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;$O(n)$な答え
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;ポインタと&lt;code&gt;deque&lt;/code&gt;を使う
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;：両端への要素の追加が$O(1)$なデータ構造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;【格言】「昇順」を見たらbinary searchかtwo pointer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedSquares&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deque()
        l, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; r:
            left, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(nums[l]), abs(nums[r])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left:
                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;appendleft(left &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                l &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;appendleft(right &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                r &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(ans)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Subtree of Another Tree</title>
      <link>/ja/post/subtree-of-another-tree/</link>
      <pubDate>Mon, 05 Jul 2021 17:57:04 +0900</pubDate>
      <guid>/ja/post/subtree-of-another-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;二分木&lt;code&gt;root&lt;/code&gt;，&lt;code&gt;subRoot&lt;/code&gt;が与えられる．&lt;code&gt;subRoot&lt;/code&gt;が&lt;code&gt;root&lt;/code&gt;の部分木であるかを判定せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;再帰的に解く
&lt;ul&gt;
&lt;li&gt;根から再帰的に値が一致しているかを確認&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isSubtree(root, subRoot)&lt;/code&gt;: &lt;code&gt;root&lt;/code&gt;を根として&lt;code&gt;subRoot&lt;/code&gt;と重ねる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check(s, t)&lt;/code&gt;: &lt;code&gt;s&lt;/code&gt;を根とする木と&lt;code&gt;t&lt;/code&gt;を根とする木が重なるかを確認する&lt;/li&gt;
&lt;li&gt;計算量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;の頂点数を$s$，&lt;code&gt;subRoot&lt;/code&gt;の頂点数を$t$とすると，$O(s \times t)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubtree&lt;/span&gt;(self, root: TreeNode, subRoot: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(s, t):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; check(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; check(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; t

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; check(root, subRoot) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isSubtree(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, subRoot) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isSubtree(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, subRoot)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E6%9C%A8&#34;&gt;merkle tree&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;木構造をハッシュ関数でまとめる&lt;/li&gt;
&lt;li&gt;ハッシュ関数が衝突しない限り正解&lt;/li&gt;
&lt;li&gt;計算量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;の頂点数を$s$，&lt;code&gt;subRoot&lt;/code&gt;の頂点数を$t$とすると，$O(s + t)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubtree&lt;/span&gt;(self, root: TreeNode, subRoot: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sha256
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_hash&lt;/span&gt;(x):
            S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256()
            S&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(x))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merkle&lt;/span&gt;(node):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
            left_merkle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merkle(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            right_merkle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; merkle(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merkle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _hash(left_merkle &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right_merkle)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merkle

        merkle(root)
        merkle(subRoot)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(node):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merkle &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; subRoot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merkle &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/subtree-of-another-tree/&#34;&gt;https://leetcode.com/problems/subtree-of-another-tree/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Range Query</title>
      <link>/ja/post/range-query/</link>
      <pubDate>Tue, 29 Jun 2021 18:34:17 +0900</pubDate>
      <guid>/ja/post/range-query/</guid>
      <description>&lt;p&gt;「与えられた配列に対して，&lt;strong&gt;ある範囲&lt;/strong&gt;についての&lt;strong&gt;大量のクエリを&lt;/strong&gt;処理しろ」というときには以下のテクニックが有効．基本的には「大量のクエリ」を処理するために，$O(N)$ぐらいの前処理をしてクエリ自体には$O(1)$で答えられるようにするというのが基本戦略．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;累積和&lt;/li&gt;
&lt;li&gt;Binary Index Tree&lt;/li&gt;
&lt;li&gt;Segment Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;累積和&#34;&gt;累積和&lt;/h2&gt;
&lt;p&gt;「累積和の差」が「範囲の和」になるということを利用．累積和の作り方は添字が煩雑になりやすいので，次のように作ると決めてしまうと楽．&lt;/p&gt;
&lt;p&gt;長さ&lt;code&gt;N&lt;/code&gt;の整数配列&lt;code&gt;arr&lt;/code&gt;の累積和&lt;code&gt;accum&lt;/code&gt;は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accum[0]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accum[i+1]&lt;/code&gt; = &lt;code&gt;accum[i]&lt;/code&gt; + &lt;code&gt;arr[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このとき，範囲&lt;code&gt;[left, right)&lt;/code&gt;について&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr[left:right]&lt;/code&gt; = &lt;code&gt;accum[right]&lt;/code&gt; - &lt;code&gt;accum[left]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;

&lt;img src=&#34;accumulative-sum.png&#34; alt=&#34;&#34; &gt;


  
  
  &lt;figcaption&gt;
    累積和
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;ここで意識すべきは，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accum[0]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;範囲は右開区間
&lt;ul&gt;
&lt;li&gt;問題上で範囲が与えられるときは左右閉区間で与えられることが多いので，その時は&lt;code&gt;accum&lt;/code&gt;にアクセスするタイミングで1足すなりして対応する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例題1&#34;&gt;例題1&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;長さ$N$の整数列$A$があります．$A$の空でない連続する部分列であって，その総和が$0$になるものの個数を求めてください．ただし，ここで数えるのは部分列の取り出し方であることに注意してください．つまり，ある$2$つの部分列が列として同じでも，取り出した位置が異なるならば，それらは別々に数えるものとします．&lt;/p&gt;
&lt;p&gt;from &lt;code&gt;https://atcoder.jp/contests/agc023/tasks/agc023_a&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;累積和をとって，集計する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Counter
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)))
accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(A) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(A)):
    accum[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; A[i]

freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(accum)
ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; freq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values():
    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(ans)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;例題2&#34;&gt;例題2&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, handle multiple queries of the following type:&lt;/p&gt;
&lt;p&gt;Calculate the sum of the elements of &lt;code&gt;nums&lt;/code&gt; between indices &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; inclusive where &lt;code&gt;left&lt;/code&gt; &amp;lt;= &lt;code&gt;right&lt;/code&gt;.
Implement the &lt;code&gt;NumArray&lt;/code&gt; class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumArray(int[] nums)&lt;/code&gt; Initializes the object with the integer array &lt;code&gt;nums&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int sumRange(int left, int right)&lt;/code&gt; Returns the sum of the elements of &lt;code&gt;nums&lt;/code&gt; between indices &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; inclusive (i.e. &lt;code&gt;nums[left] + nums[left + 1] + ... + nums[right]&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;from &lt;code&gt;https://leetcode.com/problems/range-sum-query-immutable/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;まさしく累積和を使ってほしいという意図が見える問題．問題文中では範囲が閉区間で行われているので，それに合わせて&lt;code&gt;sumRange&lt;/code&gt;内で&lt;code&gt;right&lt;/code&gt;の扱いに注意する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NumArray&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums: List[int]):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
        accums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums)):
            accums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accums[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accums

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumRange&lt;/span&gt;(self, left: int, right: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accums[right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accums[left]


&lt;span style=&#34;color:#75715e&#34;&gt;# Your NumArray object will be instantiated and called as such:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# obj = NumArray(nums)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# param_1 = obj.sumRange(left,right)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二次元累積和&#34;&gt;二次元累積和&lt;/h2&gt;
&lt;p&gt;ついでなので二次元配列の累積和についても記載しておく．&lt;/p&gt;
&lt;p&gt;二次元配列&lt;code&gt;A&lt;/code&gt;が与えられたときに，&lt;code&gt;[x1, x2) x [y1, y2)&lt;/code&gt;である長方形の範囲内の要素の総和を求めるクエリを考える．&lt;/p&gt;
&lt;p&gt;累積和&lt;code&gt;accum&lt;/code&gt;は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accum[0][0]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accum[i][j]&lt;/code&gt; = &lt;code&gt;[0, i)&lt;/code&gt; x &lt;code&gt;[0, j)&lt;/code&gt;の長方形範囲の総和
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accum[i+1][j+1] = accum[i+1][j] + accum[i][j+1] - accum[i][j] + A[i][j]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうすることで，&lt;code&gt;[x1, x2) x [y1, y2)&lt;/code&gt;である長方形の範囲内の要素の総和は，&lt;code&gt;accum[x2][y2] - accum[x1][y2] - accum[x2][y1] + accum[x1][y1]&lt;/code&gt;で求められる．&lt;/p&gt;
&lt;h3 id=&#34;例題&#34;&gt;例題&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a 2D matrix &lt;code&gt;matrix&lt;/code&gt;, handle multiple queries of the following type:&lt;/p&gt;
&lt;p&gt;Calculate the sum of the elements of &lt;code&gt;matrix&lt;/code&gt; inside the rectangle defined by its upper left corner &lt;code&gt;(row1, col1)&lt;/code&gt; and lower right corner &lt;code&gt;(row2, col2)&lt;/code&gt;.
Implement the &lt;code&gt;NumMatrix&lt;/code&gt; class:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NumMatrix(int[][] matrix)&lt;/code&gt; Initializes the object with the integer matrix &lt;code&gt;matrix&lt;/code&gt;.
&lt;code&gt;int sumRegion(int row1, int col1, int row2, int col2)&lt;/code&gt; Returns the sum of the elements of &lt;code&gt;matrix&lt;/code&gt; inside the rectangle defined by its upper left corner &lt;code&gt;(row1, col1)&lt;/code&gt; and lower right corner &lt;code&gt;(row2, col2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;from &lt;code&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NumMatrix&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, matrix: List[List[int]]):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;matrix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; matrix
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(matrix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, W):
                accum[h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[h][w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; accum[h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; accum[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; matrix[h][w]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumRegion&lt;/span&gt;(self, row1: int, col1: int, row2: int, col2: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        row2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        col2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accum[row2][col2] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accum[row2][col1] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accum[row1][col2] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accum[row1][col1]


&lt;span style=&#34;color:#75715e&#34;&gt;# Your NumMatrix object will be instantiated and called as such:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# obj = NumMatrix(matrix)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# param_1 = obj.sumRegion(row1,col1,row2,col2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;
&lt;p&gt;配列を「区間」を単位に完全二分木で管理する．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;-indexな配列上に完全二分木を実装する．頂点&lt;code&gt;i&lt;/code&gt;の子供は頂点&lt;code&gt;2*i&lt;/code&gt;，頂点&lt;code&gt;2*i + 1&lt;/code&gt;．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;segment-tree0.png&#34; alt=&#34;&#34; &gt;


  
  
  &lt;figcaption&gt;
    セグメント木は配列で実装する
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;update&lt;/code&gt;クエリでは上にさかのぼっていきながら木を更新する．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;segment-tree1.png&#34; alt=&#34;&#34; &gt;


  
  
  &lt;figcaption&gt;
    &lt;code&gt;update&lt;/code&gt;クエリ系
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt;クエリでは下から該当する範囲を拾っていくイメージ．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;segment-tree2.png&#34; alt=&#34;&#34; &gt;


  
  
  &lt;figcaption&gt;
    &lt;code&gt;range&lt;/code&gt;クエリ系
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;なお，クエリ時のインデックスは&lt;code&gt;0&lt;/code&gt;-indexであることに注意．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SegmentTree&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, init_list, func, ele):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        init_list: 管理対象の整数配列
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        func:      区間に対して実行する処理（min/max/sum/productなど）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ele:       単位元
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(init_list)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ele &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ele
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ele &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num)]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init_list[i] &lt;span style=&#34;color:#75715e&#34;&gt;# set leaf&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self, pos, val):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        init_listのpos番目の要素をvalに更新
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        note: posは0-origin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        pos &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pos:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(self, left, right):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        init_listの[left, right)に対してfuncした結果を返す
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        note: left, rightは0-origin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ele

        left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num
        right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func(ret, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[left])
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func(ret, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
seg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SegmentTree(init_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lst, func&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;min, ele&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+inf&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(seg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
seg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# lst[2] = 0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(seg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;例題-1&#34;&gt;例題&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, handle multiple queries of the following types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the value of an element in &lt;code&gt;nums&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Calculate the sum of the elements of &lt;code&gt;nums&lt;/code&gt; between indices &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; inclusive where &lt;code&gt;left&lt;/code&gt; &amp;lt;= &lt;code&gt;right&lt;/code&gt;.
Implement the &lt;code&gt;NumArray&lt;/code&gt; class:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumArray(int[] nums)&lt;/code&gt; Initializes the object with the integer array &lt;code&gt;nums&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void update(int index, int val)&lt;/code&gt; Updates the value of &lt;code&gt;nums[index]&lt;/code&gt; to be &lt;code&gt;val&lt;/code&gt;.
&lt;code&gt;int sumRange(int left, int right)&lt;/code&gt; Returns the sum of the elements of &lt;code&gt;nums&lt;/code&gt; between indices left and right inclusive (i.e.&lt;code&gt; nums[left] + nums[left + 1] + ... + nums[right]&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;from &lt;code&gt;https://leetcode.com/problems/range-sum-query-mutable/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要するに&lt;code&gt;func=sum&lt;/code&gt;なセグメント木を実装しろという問題．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NumArray&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums: List[int]):
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self, index: int, val: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None:
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; index:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[index] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[index &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sumRange&lt;/span&gt;(self, left: int, right: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num
        right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[left]
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret


&lt;span style=&#34;color:#75715e&#34;&gt;# Your NumArray object will be instantiated and called as such:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# obj = NumArray(nums)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# obj.update(index,val)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# param_2 = obj.sumRange(left,right)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;binary-index-treebit&#34;&gt;Binary Index Tree（BIT）&lt;/h2&gt;
&lt;p&gt;セグメント木から機能を削ぎ落とした感じ．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;./binary-index-tree.png&#34; alt=&#34;&#34; &gt;


  
  
  &lt;figcaption&gt;
    Binary Index Tree
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;BITは&lt;code&gt;1&lt;/code&gt;-indexな配列上に作る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;クエリ
&lt;ul&gt;
&lt;li&gt;次に更新すべきBIT上の位置は，現在見ている位置にその位置が相当する区間の長さを&lt;strong&gt;足す&lt;/strong&gt;と出てくる&lt;/li&gt;
&lt;li&gt;BIT上の位置&lt;code&gt;pos&lt;/code&gt;について，&lt;code&gt;pos&lt;/code&gt;の担当する範囲の長さは&lt;code&gt;pos &amp;amp; -pos&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pos&lt;/code&gt;のビット列の&lt;code&gt;1&lt;/code&gt;が立ってる一番小さい桁を取ってる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt;クエリ
&lt;ul&gt;
&lt;li&gt;BITに対する&lt;code&gt;range&lt;/code&gt;クエリは「&lt;code&gt;[0, idx)&lt;/code&gt;の範囲の和」というクエリ
&lt;ul&gt;
&lt;li&gt;これを2つ組み合わせれば任意の範囲の和が取れる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[idx0, idx1)&lt;/code&gt; = &lt;code&gt;[0, idx1)&lt;/code&gt; - &lt;code&gt;[0, idx0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;次に足すべきBIT上の位置は，現在見ている位置にその位置が相当する区間の長さを&lt;strong&gt;引く&lt;/strong&gt;と出てくる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BIT&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, n):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#75715e&#34;&gt;# 0で初期化&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(self, pos, val):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        位置posの要素にvalを加える
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        note: posは0-origin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; val
            pos &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pos)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;(self, pos):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        範囲[0, pos)の和を返す
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        note: posは0-origin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pos:
            ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tree[pos]
            pos &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; (pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pos)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;refs&#34;&gt;Refs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/drken/items/56a6b68edef8fc605821&#34;&gt;https://qiita.com/drken/items/56a6b68edef8fc605821&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;累積和&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/agc023/tasks/agc023_a&#34;&gt;https://atcoder.jp/contests/agc023/tasks/agc023_a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-immutable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-mutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-mutable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🔒 &lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-mutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-mutable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/iwiwi/ss-3578491&#34;&gt;https://www.slideshare.net/iwiwi/ss-3578491&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;セグメント木&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/takayg1/items/c811bd07c21923d7ec69&#34;&gt;https://qiita.com/takayg1/items/c811bd07c21923d7ec69&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;セグメント木のPython実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hos.ac/slides/20140319_bit.pdf&#34;&gt;http://hos.ac/slides/20140319_bit.pdf&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;BIT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ikatakos.com/pot/programming_algorithm/data_structure/binary_indexed_tree&#34;&gt;https://ikatakos.com/pot/programming_algorithm/data_structure/binary_indexed_tree&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;BIT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Counting Bits</title>
      <link>/ja/post/counting-bits/</link>
      <pubDate>Tue, 29 Jun 2021 16:51:54 +0900</pubDate>
      <guid>/ja/post/counting-bits/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;0以上&lt;code&gt;num&lt;/code&gt;以下の数字を2進数で表記したときの，ビット&lt;code&gt;1&lt;/code&gt;の個数を計算し，長さ&lt;code&gt;nums + 1&lt;/code&gt;の配列にして返せ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;を2進数表記したときの&lt;code&gt;1&lt;/code&gt;の個数を&lt;code&gt;f[i]&lt;/code&gt;とすると，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f[i]&lt;/code&gt; = &lt;code&gt;f[i // 2]&lt;/code&gt; + &lt;code&gt;i % 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が成立する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(num):
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        table[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [0, 1, 1, 2, 1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pythonの標準の便利関数を使うと簡単だけどこれは求められていなさそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [bin(i)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [0, 1, 1, 2, 1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Latency vs Throughput vs Bandwidth</title>
      <link>/ja/post/latency-vs-throughput-vs-bandwidth/</link>
      <pubDate>Wed, 16 Jun 2021 20:06:39 +0900</pubDate>
      <guid>/ja/post/latency-vs-throughput-vs-bandwidth/</guid>
      <description>&lt;p&gt;&lt;code&gt;Latency&lt;/code&gt;と&lt;code&gt;Throughtput&lt;/code&gt;と&lt;code&gt;Bandwidth&lt;/code&gt;の違いがよく分からなかったので調べてみました．&lt;/p&gt;
&lt;h2 id=&#34;latency&#34;&gt;Latency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Latency measures delay. Delay is simply the time taken for a data packet to reach its destination after being sent.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;あるパケットAを地点Sから地点Tへ送ったときに何秒かかるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;round-tripで測ることが多い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「地点S -&amp;gt; 地点T -&amp;gt; 地点S」にかかる時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Latency&lt;/code&gt;が大きいとネットワークのパフォーマンスは悪い&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Latency&lt;/code&gt;大 -&amp;gt; 一つのパケットの伝送に要する時間が大きい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;throughput&#34;&gt;Throughput&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the amount of data able to be transmitted and received during a specific time period.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定の時間幅で送受信できるデータの量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;throughput provides a practical measurement of the actual delivery of packets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理論値ではなくて実測値&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;よく使われる単位は&lt;code&gt;bits per second&lt;/code&gt; = &lt;code&gt;bps&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もしくは&lt;code&gt;packets per second&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;throughtput&lt;/code&gt;が落ちてるとネットワーク内でパケロスが発生しているかもしれない&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bandwidth&#34;&gt;Bandwidth&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the amount of data that can be transmitted and received during a specific period of time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定の時間幅で送受信できるデータの量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;よく使われる単位は&lt;code&gt;bits per second&lt;/code&gt; = &lt;code&gt;bps&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gigabit per second&lt;/code&gt; = &lt;code&gt;Gbps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;megabit per second&lt;/code&gt; = &lt;code&gt;Mbps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;high bandwidth doesn’t necessarily guarantee optimal network performance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bandwidth&lt;/code&gt;が大きいことが即座に&lt;code&gt;throughtput&lt;/code&gt;が大きいことを意味するとは限らない．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bandwidth measures capacity, not speed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;車で言うなら，「この車は時速500km出せます」は&lt;code&gt;bandwidth&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ISPが帯域でネットワークの性能を推してくることがこの誤解を広めてしまっているという指摘．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bandwidth&lt;/code&gt;が大きいネットワークを使えると，任意のタイミングで大きいデータを転送しようとすることができる，ということであって，その転送が瞬時に終わるということではない．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;throughput-vs-latency&#34;&gt;Throughput vs Latency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Throughtput&lt;/code&gt;と&lt;code&gt;Latency&lt;/code&gt;はコインの表裏みたいなもの&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Latency&lt;/code&gt;が大きければ&lt;code&gt;Throughput&lt;/code&gt;は小さい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Throughput&lt;/code&gt;が小さければ&lt;code&gt;Latency&lt;/code&gt;が大きいだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;latency-vs-bandwidth&#34;&gt;Latency vs Bandwidth&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Latency&lt;/code&gt;も&lt;code&gt;Bandwidth&lt;/code&gt;もネットワークの性能を測る指標&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Latency&lt;/code&gt;は土管の長さ
&lt;ul&gt;
&lt;li&gt;土管が長ければデータが土管に入って抜けるまでに必要な時間が長くなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bandwidth&lt;/code&gt;は土管の直径
&lt;ul&gt;
&lt;li&gt;土管の直径が大きくなれば一度により多くのデータを送れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;しばしば「&lt;code&gt;Bandwidth&lt;/code&gt;が〇〇だから&lt;code&gt;Latency&lt;/code&gt;が△△」
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bandwidth&lt;/code&gt;が大きいから&lt;code&gt;Latency&lt;/code&gt;が小さい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bandwidth&lt;/code&gt;が小さいから&lt;code&gt;Latency&lt;/code&gt;が大きい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bandwidth-vs-throughput&#34;&gt;Bandwidth vs Throughput&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bandwidth&lt;/code&gt;は土管の直径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Throughtput&lt;/code&gt;はその土管に流れている水の量&lt;/li&gt;
&lt;li&gt;bandwidth represents the theoretical measurement of the highest amount of data packets able to be transferred, and throughput represents the actual amount of packets successfully delivered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bandwidth&lt;/code&gt;は理論値，&lt;code&gt;Throughtput&lt;/code&gt;は実測値．&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;refs&#34;&gt;refs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dnsstuff.com/latency-throughput-bandwidth&#34;&gt;https://www.dnsstuff.com/latency-throughput-bandwidth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Number Swapper</title>
      <link>/ja/post/number-swapper/</link>
      <pubDate>Sun, 06 Jun 2021 16:52:29 +0900</pubDate>
      <guid>/ja/post/number-swapper/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;一時変数を使用しないで数字の交換を実装せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;差をうまく使うやり方&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a: {}, b: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a: {}, b: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xor&lt;/code&gt;をうまく使うやり方
&lt;ul&gt;
&lt;li&gt;同じ数字同士の&lt;code&gt;xor&lt;/code&gt;はキャンセルされることを利用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a: {}, b: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a: {}, b: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Find the Duplicate Number</title>
      <link>/ja/post/find-the-duplicate-number/</link>
      <pubDate>Sun, 06 Jun 2021 16:25:24 +0900</pubDate>
      <guid>/ja/post/find-the-duplicate-number/</guid>
      <description>&lt;h2 id=&#34;find-the-duplicate-number&#34;&gt;Find the Duplicate Number&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-duplicate-number/&#34;&gt;https://leetcode.com/problems/find-the-duplicate-number/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解法1&#34;&gt;解法1&lt;/h3&gt;
&lt;p&gt;配列をソートして前から順番に要素を見ていく．同じ要素が隣り合っていたらそれを返す．ソートに$O(n \log n)$かかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findDuplicate&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[i]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums[i]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法2&#34;&gt;解法2&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;を使って見たことある要素をメモしておく．時間計算量$O(n)$，空間計算量$O(n)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findDuplicate&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num
            seen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(num)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法3&#34;&gt;解法3&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nums&lt;/code&gt;の要素を&lt;code&gt;nums&lt;/code&gt;上のインデックスだと考えると，配列で連結リストを作ったことになる．このとき，ダブった要素の位置で連結リストがループを作ることになるのでそれを検出する．&lt;/p&gt;
&lt;p&gt;足の速いうさぎ🐰と足の遅い亀🐢を走らせるという有名テクニックがある．&lt;/p&gt;
&lt;p&gt;配列の要素を一度は見ることになるので時間計算量$O(n)$．一方でポインタを追いかけるだけなので空間計算量は&lt;code&gt;nums&lt;/code&gt;のサイズに依存せず$O(1)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findDuplicate&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[nums[faster]]
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[slower]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; slower:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; faster:
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[faster]
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[slower]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Missing Number</title>
      <link>/ja/post/missing-number/</link>
      <pubDate>Sun, 06 Jun 2021 15:58:55 +0900</pubDate>
      <guid>/ja/post/missing-number/</guid>
      <description>&lt;h2 id=&#34;missing-number&#34;&gt;Missing Number&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/missing-number/&#34;&gt;https://leetcode.com/problems/missing-number/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解法1&#34;&gt;解法1&lt;/h3&gt;
&lt;p&gt;ソートして頭から順番に要素を見ていく．配列の整列で$O(n \log n)$かかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;missingNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(nums):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(nums)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
            expected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; expected:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; expected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法2&#34;&gt;解法2&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;を使う．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;missingNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(nums)
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法3&#34;&gt;解法3&lt;/h3&gt;
&lt;p&gt;配列の要素の集合と配列の添字の集合の&lt;code&gt;xor&lt;/code&gt;を考えるとかっこよく解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;missingNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        missing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            missing &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; missing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解法4&#34;&gt;解法4&lt;/h3&gt;
&lt;p&gt;配列の要素の和を考えると抜けてる要素分だけ不足する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;missingNumber&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        allsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; allsum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sum(nums)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Centralities on Graph</title>
      <link>/ja/post/centralities-on-graph/</link>
      <pubDate>Tue, 18 May 2021 22:13:18 +0900</pubDate>
      <guid>/ja/post/centralities-on-graph/</guid>
      <description>&lt;h2 id=&#34;中心性とは&#34;&gt;中心性とは&lt;/h2&gt;
&lt;p&gt;グラフ理論における頂点の中心性とは，その頂点のグラフのトポロジ観点での「重要度」．トポロジ観点とは，そのグラフの頂点や辺の意味とは無関係で，ただ純粋にグラフの形によってのみ依存するという意味．ソーシャルネットワーク上の影響力のある人物とか疫病のスーパースプレッダーを見つけたりするなどの応用ができる．これらの応用では「グラフ上のトポロジ的に重要な頂点は，意味においても特別である」という前提を置いていている．グラフの「中心」の定義は様々あり，それらに対応して「中心らしさ」の定義も様々ある．代表的な中心性指標を取り上げて記載する．&lt;/p&gt;
&lt;p&gt;以下，グラフの図示には &lt;code&gt;networkx&lt;/code&gt; / &lt;code&gt;matplotlib&lt;/code&gt; などを使う．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# import libraries&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; networkx &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; nx
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.colors &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; mcolors

&lt;span style=&#34;color:#75715e&#34;&gt;# drawing function&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;(G, pos, measures, measure_name):
    normalized_measures &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(measures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; measures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
        normalized_measures[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; s
    nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw_networkx_nodes(G, pos,
                                   cmap&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plasma,
                                   node_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(value &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; normalized_measures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values()),
                                   node_color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(normalized_measures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values()),
                                   nodelist&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;normalized_measures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
    nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_norm(mcolors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SymLogNorm(linthresh&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, linscale&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, base&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
    labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw_networkx_labels(G, pos)
    edges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw_networkx_edges(G, pos)

    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(measure_name)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colorbar(nodes)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axis(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;span style=&#34;color:#75715e&#34;&gt;# example graph&lt;/span&gt;
G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;karate_club_graph()
pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spring_layout(G, seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# example directed graph&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# - this graph is same as one in https://en.wikipedia.org/wiki/PageRank&lt;/span&gt;
DiG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DiGraph()
DiG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edges_from([(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;),
                    (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
                    (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)])
dpos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.55&lt;/span&gt;],
        &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.27&lt;/span&gt;],
        &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.24&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.35&lt;/span&gt;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;degree-centrality次数中心性&#34;&gt;Degree Centrality：次数中心性&lt;/h2&gt;
&lt;p&gt;頂点に生えている辺の本数が多ければ多いほどその頂点は重要であるという中心性．有向グラフに対しては入次数中心性と出次数中心性が計算できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;degree_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Degree Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./degree-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;h2 id=&#34;eigenvector-centrality固有ベクトル中心性&#34;&gt;Eigenvector Centrality：固有ベクトル中心性&lt;/h2&gt;
&lt;p&gt;「重要な頂点と隣接している頂点ほど重要」であるとする中心性．頂点$i$の固有ベクトル中心性$x_i$は&lt;/p&gt;
&lt;p&gt;$$
x_i = \sum_{j}A_{ij}x_j
$$&lt;/p&gt;
&lt;p&gt;ただし$A$はグラフ$G$の隣接行列表現．これを全頂点についてまとめて書くと&lt;/p&gt;
&lt;p&gt;$$
Ax = \lambda x
$$&lt;/p&gt;
&lt;p&gt;の解$x$と書ける．ここで$\lambda$が$A$の固有値，$x$が固有ベクトル．固有ベクトル中心性は絶対値が最大な固有値に対応する第一固有ベクトルを中心性として扱う．固有ベクトルの$i$行目成分が頂点$i$の固有ベクトル中心性．&lt;/p&gt;
&lt;p&gt;固有ベクトル中心性は次数中心性の拡張とも言える．次数中心性では隣接頂点をすべて平等に扱っているが，固有ベクトル中心性では，より重要な隣接頂点の寄与をより大きく採用する．&lt;/p&gt;
&lt;p&gt;有向グラフに対する固有ベクトル中心性では，入次数が0な頂点は無視されることになるという問題がある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eigenvector_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Eigenvector Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./eigenvector-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.leonidzhukov.net/hse/2014/socialnetworks/papers/Bonacich-Centrality.pdf&#34;&gt;Phillip Bonacich. “Power and Centrality: A Family of Measures.” American Journal of Sociology 92(5):1170–1182, 1986&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/0199206651&#34;&gt;Mark E. J. Newman. Networks: An Introduction. Oxford University Press, USA, 2010, pp. 169&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;katz-centralityカッツ中心性&#34;&gt;Katz Centrality：カッツ中心性&lt;/h2&gt;
&lt;p&gt;入次数0の頂点の扱いを工夫した固有ベクトル中心性．初期値として全ての頂点の中心性として小さい値$\beta$を与える．&lt;/p&gt;
&lt;p&gt;$$
x_i = \alpha \sum_{j}A_{ij}x_{j} + \beta
$$&lt;/p&gt;
&lt;p&gt;これを全頂点についてまとめて記述すると&lt;/p&gt;
&lt;p&gt;$$
x = \alpha Ax + \beta 1
$$&lt;/p&gt;
&lt;p&gt;の解$x$が全頂点の中心性になっている．パラメタ$\alpha$で隣接頂点の重要度をどの程度自分の重要度に考慮するかを調整する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;katz_centrality(G, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, beta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./katz-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(DiG, dpos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;katz_centrality(DiG, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, beta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Katz Centrality (Directed Graph)&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./katz-centrality-directed.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phya.snu.ac.kr/~dkim/PRL87278701.pdf&#34;&gt;Leo Katz: A New Status Index Derived from Sociometric Index. Psychometrika 18(1):39–43, 1953&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pagerank&#34;&gt;PageRank&lt;/h2&gt;
&lt;p&gt;Katz中心性を拡張したもの．&lt;/p&gt;
&lt;p&gt;$$
x_i = \alpha \sum_{j}A_{ij}\frac{x_j}{k_{j}^{out}} + \beta
$$&lt;/p&gt;
&lt;p&gt;全頂点についてまとめてかくと&lt;/p&gt;
&lt;p&gt;$$
x = \alpha AD^{-1}x + \beta 1
$$&lt;/p&gt;
&lt;p&gt;ただし，$D$は対角行列で$D_{ii} = max(k_{i}^{out}, 1)$&lt;/p&gt;
&lt;p&gt;低出次数の頂点はより大きく隣接する頂点の重要度に寄与する．&lt;/p&gt;
&lt;p&gt;グラフ上をRandom Walkするときの定常状態における各頂点での滞在確率に等しくなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pagerank(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PageRank&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./pagerank.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(DiG, dpos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pagerank(DiG), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PageRank (Directed Graph)&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./pagerank-directed.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dbpubs.stanford.edu:8090/pub/showDoc.Fulltext?lang=en&amp;amp;doc=1999-66&amp;amp;format=pdf&#34;&gt;Page, Lawrence; Brin, Sergey; Motwani, Rajeev and Winograd, Terry, The PageRank citation ranking: Bringing order to the Web. 1999&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hits&#34;&gt;HITS&lt;/h2&gt;
&lt;p&gt;「重要度にも二種類あるよね」という発想から生まれた中心性．グラフの「中心」にはいないけど重要な頂点だってあるじゃないか，ならばそいつらも捉えたいというのがHITS．例えば，サーベイ論文は「重要な論文」へのリンクを大量に含んでいるという意味で重要だけれど，サーベイ論文自体に新規性があるわけではないので，そこから新しい派生研究が出てくる訳ではないという意味で重要ではない．&lt;/p&gt;
&lt;p&gt;HITSでは重要な頂点の分類を与える．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authorities&lt;/code&gt;：&lt;code&gt;Hubs&lt;/code&gt;からたくさん引用される頂点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hubs&lt;/code&gt;：&lt;code&gt;Authorities&lt;/code&gt;をたくさん引用する頂点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Authorities&lt;/code&gt;がエポックメイキングな論文で，&lt;code&gt;Hubs&lt;/code&gt;がサーベイ論文という感じ．&lt;/p&gt;
&lt;p&gt;再帰的な定義になっている．頂点$i$の&lt;code&gt;Authority Centrality&lt;/code&gt;を$x_i$，&lt;code&gt;Hub Centrality&lt;/code&gt;を$y_i$とすると&lt;/p&gt;
&lt;p&gt;$$
x_i = \alpha \sum_{j}A_{ij}y_j
$$&lt;/p&gt;
&lt;p&gt;$$
y_i = \beta \sum_{j}A_{ji}x_j
$$&lt;/p&gt;
&lt;p&gt;全頂点についてまとめて書くと&lt;/p&gt;
&lt;p&gt;$$
x = \alpha A y
$$&lt;/p&gt;
&lt;p&gt;$$
y = \beta A^{T} x
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hub, authority &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hits(DiG)
draw(DiG, dpos, hub, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HITS Hubs (Directed Graph)&amp;#39;&lt;/span&gt;)
draw(DiG, dpos, authority, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HITS Authorities (Directed Graph)&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./hub.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;














&lt;figure&gt;

&lt;img src=&#34;./authority.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/home/kleinber/auth.pdf&#34;&gt;Jon Kleinberg, Authoritative sources in a hyperlinked environment Journal of the ACM 46 (5): 604-32, 1999. doi:10.1145/324133.324140&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://citeseer.ist.psu.edu/713792.html&#34;&gt;A. Langville and C. Meyer, “A survey of eigenvector methods of web information retrieval.”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;closeness-centrality近接中心性&#34;&gt;Closeness Centrality：近接中心性&lt;/h2&gt;
&lt;p&gt;頂点$i$から他の全頂点への最短経路長の平均の逆数で中心性としたもの．中心な頂点ほど周りの頂点に近い．「なんとなくみんなにリーチしやすい人」はその集団の中心にいそう．&lt;/p&gt;
&lt;p&gt;$$
x_i = \frac{1}{l_i} = \frac{n}{\sum_{j}d_{ij}}
$$&lt;/p&gt;
&lt;p&gt;ただし，$l_i = \frac{\sum_{j}d_{ij}}{n}$で，$d_{ij}$は頂点$i$と頂点$j$の最短経路長．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;closeness_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Closeness Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./closeness-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://leonidzhukov.ru/hse/2013/socialnetworks/papers/freeman79-centrality.pdf&#34;&gt;Linton C. Freeman: Centrality in networks: I. Conceptual clarification. Social Networks 1:215-239, 1979.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;current-flow-closeness-aka-information-centrality情報中心性&#34;&gt;Current Flow Closeness (a.k.a Information Centrality)：情報中心性&lt;/h2&gt;
&lt;p&gt;近接中心性の派生．グラフ上を伝って伝播していく情報に注目した中心性．頂点$i$と頂点$j$を繋ぐ経路上を流れる情報が，経路長の逆数に比例して分散するとしたときの各頂点で得られる情報量の調和平均．伝言ゲームで「より正確なことを聞ける人」は中心にいそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_flow_closeness_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current Flow Closeness Centrality a.k.a Information Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./information-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://algo.uni-konstanz.de/publications/bf-cmbcf-05.pdf&#34;&gt;Ulrik Brandes and Daniel Fleischer, Centrality Measures Based on Current Flow. Proc. 22nd Symp. Theoretical Aspects of Computer Science (STACS ‘05). LNCS 3404, pp. 533-544. Springer-Verlag, 2005.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1016/0378-8733(89)90016-6&#34;&gt;Karen Stephenson and Marvin Zelen: Rethinking centrality: Methods and examples. Social Networks 11(1):1-37, 1989.&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;情報中心性として提案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;betweenness-centrality媒介中心性&#34;&gt;Betweenness Centrality：媒介中心性&lt;/h2&gt;
&lt;p&gt;任意の頂点対$(s, t)$の最短経路のうち，頂点$i$を通過する最短経路はどのくらいあるか，を中心性として採用したもの．ここからあそこまで行くのにあの頂点をとらないといけないというとき，その頂点はネットワーク上での伝達を考えたときの要衝であると言えそう．ソーシャルネットワークであれば，異なる集団を繋ぐキーパーソンだと媒介中心性は大きい．&lt;/p&gt;
&lt;p&gt;$$
x_i = \sum_{s, t \in V} \frac{\sigma (s, t | i)}{\sigma (s, t)}
$$&lt;/p&gt;
&lt;p&gt;ただし，$\sigma(s, t)$は頂点$s$と$t$の最短経路数，$\sigma(s, t | i)$はそれらのうち頂点$i$を経由する経路数．&lt;/p&gt;
&lt;p&gt;大規模なグラフに対してBrandesが提案するアルゴリズムで厳密な媒介中心性は$O(nm)$で計算できるが，頂点数が100万を超えてくるグラフには難しい．近年では近似値を高速に求めるというところが盛んに研究されている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;betweenness_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Betweenness Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./betweenncess-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf&#34;&gt;Ulrik Brandes: A Faster Algorithm for Betweenness Centrality. Journal of Mathematical Sociology 25(2):163-177, 2001.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf&#34;&gt;Ulrik Brandes: On Variants of Shortest-Path Betweenness Centrality and their Generic Computation. Social Networks 30(2):136-145, 2008.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moreno.ss.uci.edu/23.pdf&#34;&gt;Linton C. Freeman: A set of measures of centrality based on betweenness. Sociometry 40: 35–41, 1977&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;current-flow-betweenness-aka-random-walk-betweenness-centrality&#34;&gt;Current Flow Betweenness (a.k.a Random Walk Betweenness Centrality)&lt;/h2&gt;
&lt;p&gt;媒介中心性では，情報が最短経路上を伝播することを仮定しているが，それを緩めて，頂点間最短経路のみならず，すべての経路上を伝播するとして，その中でも経路長が短いものの寄与をより重視する中心性として提案された．媒介中心性の拡張．歴史的にはCurrent Flow Betweennessが直感に反する場合があることをNewmanが示して，代替案としてRandom Walk Betweenness Centralityを提案した．&lt;/p&gt;
&lt;p&gt;頂点$i$のRandom Walk Betweennessは，頂点$p$から出発して頂点$q$で終了するRandom Walkがその途中で頂点$i$を通過する回数を全ての頂点対$(p, q)$で平均したものとして定義される．情報がRandom Walkするとき，何回も訪問する頂点はきっと重要．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current_flow_betweenness_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current Flow Betweenness Centrality a.k.a Random Walk Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./random-walk-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://algo.uni-konstanz.de/publications/bf-cmbcf-05.pdf&#34;&gt;Centrality Measures Based on Current Flow. Ulrik Brandes and Daniel Fleischer, Proc. 22nd Symp. Theoretical Aspects of Computer Science (STACS ‘05). LNCS 3404, pp. 533-544. Springer-Verlag, 2005.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/cond-mat/0309045.pdf&#34;&gt;A measure of betweenness centrality based on random walks, M. E. J. Newman, Social Networks 27, 39-54 (2005).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;communicability-betweenness&#34;&gt;Communicability Betweenness&lt;/h2&gt;
&lt;p&gt;Betweenness CentralityとRandom Walk Betweenness Centralityの中間にあるような中心性．頂点$i$のCommunicability Betweennessは，頂点$p$から出発して頂点$q$で終了するRandom Walkがその途中で頂点$i$を通過する回数を全ての頂点対$(p, q)$とその経路長で加重平均したもの．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;communicability_betweenness_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Communicability Betweenness Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./communicability-centrality.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/0905.4102&#34;&gt;Ernesto Estrada, Desmond J. Higham, Naomichi Hatano, “Communicability Betweenness in Complex Networks” Physica A 388 (2009) 764-774.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;power-centralityボナチッチ中心性パワー中心性&#34;&gt;Power Centrality：ボナチッチ中心性・パワー中心性&lt;/h2&gt;
&lt;p&gt;重要な頂点と繋がっている頂点は重要では &lt;strong&gt;ない&lt;/strong&gt; とする中心性．&lt;a href=&#34;https://tjo.hatenablog.com/entry/2015/12/09/190000&#34;&gt;このブログ&lt;/a&gt;によると『&lt;a href=&#34;https://www.amazon.co.jp/dp/4320019288&#34;&gt;ネットワーク分析&lt;/a&gt;』という本に&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例えば、商取引のネットワークを考えてみよう。頂点は企業や個人など取引の主体であり、辺（ここではとりあえず無向辺とする）は取引関係を表す。ここで次数の高い頂点は、数多くの取引先を持つ主体である。取引先を他より多くもつ主体は、取引において有利な立場に立ち得る。なぜなら、自分は他にも取引相手の選択肢があるということを、交渉において相手への圧力として使えるからである（「安くしてくれないなら他から買う」など）。つまり、関係ある相手の力が強いほど、自分の力は弱くなるということである。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と例えられているとのこと．&lt;/p&gt;
&lt;p&gt;本質的には固有ベクトル中心性と同じ計算で求まる．&lt;/p&gt;
&lt;h2 id=&#34;group-betweenness-centrality&#34;&gt;Group Betweenness Centrality&lt;/h2&gt;
&lt;p&gt;媒介中心性を頂点集合に対して計算するように拡張したもの．頂点集合$C$のグループ中心性$BC_{C}$は&lt;/p&gt;
&lt;p&gt;$$
BC_{C} = \sum_{s, t \in V - C; s &amp;lt; t} \frac{\sigma (s, t | C)}{\sigma (s, t)}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.analytictech.com/borgatti/group_centrality.htm&#34;&gt;M G Everett and S P Borgatti: The Centrality of Groups and Classes. Journal of Mathematical Sociology. 23(3): 181-201. 1999.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.72.9610&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Ulrik Brandes: On Variants of Shortest-Path Betweenness Centrality and their Generic Computation. Social Networks 30(2):136-145, 2008.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.cs.ucsb.edu/~arlei/pubs/sdm18.pdf&#34;&gt;Sourav Medya et. al.: Group Centrality Maximization via Network Design. SIAM International Conference on Data Mining, SDM 2018, 126–134.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;subgraph-centrality&#34;&gt;Subgraph Centrality&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;networkx&lt;/code&gt;には&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subgraph centrality of a node n is the sum of weighted closed walks of all lengths starting and ending at node n. The weights decrease with path length. Each closed walk is associated with a connected subgraph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と定義されているがよくわからん．水面に水滴を垂らしたら同心円状に波及していくイメージ？&lt;/p&gt;
&lt;p&gt;頂点$u$のsubgraph centrality$SC_u$は&lt;/p&gt;
&lt;p&gt;$$
SC_u = \sum_{j = 1}^n (v_{j}^u)^2 e^{\lambda_{j}}
$$&lt;/p&gt;
&lt;p&gt;ただし$v_j$はグラフ$G$の固有ベクトル，$\lambda_j$はそれに対応する固有値．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subgraph_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subgraph Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./subgraph.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/cond-mat/0504730&#34;&gt;Ernesto Estrada, Juan A. Rodriguez-Velazquez, “Subgraph centrality in complex networks”, Physical Review E 71, 056103 (2005).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;harmonic-centrality調和中心性&#34;&gt;Harmonic Centrality：調和中心性&lt;/h2&gt;
&lt;p&gt;頂点$u$の調和中心性$x_u$はその他の頂点への最短経路長の逆数の和で定義される．&lt;/p&gt;
&lt;p&gt;$$
x_u = \sum_{v \neq u} \frac{1}{d(v, u)}
$$&lt;/p&gt;
&lt;p&gt;ただし$d(v, u)$は頂点$v$と頂点$u$の最短経路長．&lt;/p&gt;
&lt;p&gt;距離に注目した中心性指標．PageRankとHarmonic Centralityは似たような結果になる一方で，Harmonic Centralityの方が計算時間が短くて済む．PageRankとHarmonic Centralityは上位の頂点が一致するが下位の頂点ではずれる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;harmonic_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Harmonic Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./harmonic.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1308.2140&#34;&gt;Boldi, Paolo, and Sebastiano Vigna. “Axioms for centrality.” Internet Mathematics 10.3-4 (2014): 222-262.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;second-order-centrality&#34;&gt;Second Order Centrality&lt;/h2&gt;
&lt;p&gt;グラフ$G$上で頂点$u$からRandom Walkを実行したときに，始点頂点$u$を再び通過するまでの歩長の標準偏差（平均からのブレ）をSecond Order Centralityという．&lt;/p&gt;
&lt;p&gt;Second Order Centralityが小さいほど，重要な頂点であるといえる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;networkx&lt;/code&gt;での実装ではRandom Walkを実際に実行するのではなく，代数的に解く実装になっている．計算量は$O(n^3)$と大きく，規模の大きいグラフに対しては近似が必要になりそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;draw(G, pos, nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;second_order_centrality(G), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Second Order Centrality&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;












&lt;figure&gt;

&lt;img src=&#34;./second-order.png&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://homepages.laas.fr/gtredan/pdf/SOC_COMCOM2010.pdf&#34;&gt;Anne-Marie Kermarrec, Erwan Le Merrer, Bruno Sericola, Gilles Trédan “Second order centrality: Distributed assessment of nodes criticity in complex networks”, Elsevier Computer Communications 34(5):619-628, 2011.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;
&lt;p&gt;中心性という概念の歴史の話がこちらにまとまっていました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.preferred.jp/ja/blog/%E4%B8%AD%E5%BF%83%E6%80%A7%EF%BC%9A%E5%A7%8B%E3%81%BE%E3%82%8A%E3%81%8B%E3%82%89%E6%9C%80%E8%BF%91%E3%81%BE%E3%81%A7/&#34;&gt;中心性：始まりから最近まで（Preferred Networks R&amp;amp;D Blog）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tips on initialization of List</title>
      <link>/ja/post/tips-on-init-of-list/</link>
      <pubDate>Fri, 16 Apr 2021 00:12:12 +0900</pubDate>
      <guid>/ja/post/tips-on-init-of-list/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;リストの初期化は内包表記で書くべし．&lt;code&gt;*&lt;/code&gt;使って予期しないことが起きることを回避しよう．&lt;/p&gt;
&lt;h2 id=&#34;リストの初期化&#34;&gt;リストの初期化&lt;/h2&gt;
&lt;p&gt;リストを適切な値で初期化したい場面はよくある．&lt;/p&gt;
&lt;p&gt;例えば，こんな感じ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 要素数3のリストを0で初期化&lt;/span&gt;
arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 3x3のリストを0で初期化&lt;/span&gt;
mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
        row&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    mat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これは下の書ける．この書き方はリスト内包表記と言われる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 要素数3のリストを0で初期化&lt;/span&gt;
arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;# 3x3のリストを0で初期化&lt;/span&gt;
mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また，こうも書ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 要素数3のリストを0で初期化&lt;/span&gt;
arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 3x3のリストを0で初期化&lt;/span&gt;
mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;が，掛け算を使った書き方には罠がある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [0, 0, 0]&lt;/span&gt;
arr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 0, 0]: 期待通りの動作&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hoge&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
arr2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Hoge()] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;([id(hoge) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hoge &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arr2]) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [4349443472, 4349443472, 4349443472]&lt;/span&gt;
arr2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;([hoge&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hoge &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arr2]) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [99, 99, 99]&lt;/span&gt;

mat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(mat) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [[0, 0, 0], [0, 0, 0], [0, 0, 0]]&lt;/span&gt;
mat[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(mat) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [[1, 0, 0], [1, 0, 0], [1, 0, 0]]: ？？？&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;([id(row) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mat]) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [4349542144, 4349542144, 4349542144]: 全部同じ番地を指してる&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;を使って初期化すると参照で初期化するっぽい．リスト内包表記ではその都度インスタンスを作っているっぽい．&lt;/p&gt;
&lt;p&gt;要するに内包表記で書けば事故は起きないということ．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Previious Permutation and Next Permutation</title>
      <link>/ja/post/prev-permutation-and-next-permutation/</link>
      <pubDate>Thu, 15 Apr 2021 20:53:29 +0900</pubDate>
      <guid>/ja/post/prev-permutation-and-next-permutation/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数を要素として持つリストが与えられたとき，辞書順でそのリストの前後の順列を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev_permutation&lt;/span&gt;(arr):
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; arr[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; arr[i]:
        i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# arrは昇順に整列されている&lt;/span&gt;
        arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[i]
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; arr[i]:
      j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# arr[i+1:]は昇順に整列されているので二分探索も可&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# j = bisect_left(arr[i+1:], arr[i]) + i&lt;/span&gt;
    arr[i], arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j], arr[i]
    arr[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed(arr[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next_permutation&lt;/span&gt;(arr):
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; arr[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; arr[i]:
        i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# arrは降順に整列されている&lt;/span&gt;
        arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[i]
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(arr) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; pivot:
        j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    arr[i], arr[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr[j], arr[i]
    arr[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed(arr[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
prev_permutation(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [3, 2, 1]&lt;/span&gt;

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
prev_permutation(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
next_permutation(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 3, 2]&lt;/span&gt;

arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
next_permutation(arr)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(arr) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>$N$ Queens Problem</title>
      <link>/ja/post/n-queens-problem/</link>
      <pubDate>Mon, 12 Apr 2021 19:29:49 +0900</pubDate>
      <guid>/ja/post/n-queens-problem/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$N \times N$の盤面に$N$個のクイーンを互いに 1 手では襲撃できないように配置せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;DFS で全探索．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())

queens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
board &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_board&lt;/span&gt;(board, row, col, x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
        board[row][_col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
        board[_row][col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x

    &lt;span style=&#34;color:#75715e&#34;&gt;# (+1, +1)&lt;/span&gt;
    _row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row
    _col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; _row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; _col &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N:
        _row &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        _col &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        board[_row][_col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x

    &lt;span style=&#34;color:#75715e&#34;&gt;# (+1, -1)&lt;/span&gt;
    _row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row
    _col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; _row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _col &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        _row &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        _col &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        board[_row][_col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x

    &lt;span style=&#34;color:#75715e&#34;&gt;# (-1, +1)&lt;/span&gt;
    _row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row
    _col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _row &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; _col &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N:
        _row &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        _col &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        board[_row][_col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x

    &lt;span style=&#34;color:#75715e&#34;&gt;# (-1, -1)&lt;/span&gt;
    _row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; row
    _col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _row &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; _col &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        _row &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        _col &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        board[_row][_col] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_queens&lt;/span&gt;(queens, board, row):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N:
        &lt;span style=&#34;color:#75715e&#34;&gt;# print board with Qs&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; queens:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; board[row][col] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            queens[row] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; col
            update_board(board, row, col, &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            set_queens(queens, board, row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            update_board(board, row, col, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

set_queens(queens, board, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ python3 main.py
Q.......
....Q...
.......Q
.....Q..
..Q.....
......Q.
.Q......
...Q....

Q.......
.....Q..
.......Q
..Q.....
......Q.
...Q....
.Q......
....Q...

Q.......
......Q.
...Q....
.....Q..
.......Q
.Q......
....Q...
..Q.....

...（続く）...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Sqrt(x)</title>
      <link>/ja/post/sqrtx/</link>
      <pubDate>Fri, 09 Apr 2021 23:03:40 +0900</pubDate>
      <guid>/ja/post/sqrtx/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;非負整数が与えられる．その平方の整数部分を計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;二分探索で書く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mySqrt&lt;/span&gt;(self, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; mid

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全部調べる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mySqrt&lt;/span&gt;(self, x: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x:
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>String Compression</title>
      <link>/ja/post/string-compression/</link>
      <pubDate>Wed, 31 Mar 2021 22:36:30 +0900</pubDate>
      <guid>/ja/post/string-compression/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;与えられた文字列について次の規則に従って文字列を圧縮せよ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もしある文字&lt;code&gt;x&lt;/code&gt;が連続して 1 つしか存在しないなら&lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;もしある文字&lt;code&gt;x&lt;/code&gt;が連続して&lt;code&gt;y&lt;/code&gt;つ以上存在するなら&lt;code&gt;xy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compress&lt;/span&gt;(self, chars: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        pos_anchor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        pos_write &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pos_read, char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(chars):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos_read &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(chars) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; chars[pos_read &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                chars[pos_write] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; char
                pos_write &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos_anchor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pos_read:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str(pos_read &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pos_anchor &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                        chars[pos_write] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; digit
                        pos_write &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                pos_anchor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pos_read &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pos_write
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;英語だと run length compressopm と呼ばれている？&lt;/p&gt;
&lt;p&gt;反対にデコードする問題も考えられる．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/decompress-run-length-encoded-list/&#34;&gt;https://leetcode.com/problems/decompress-run-length-encoded-list/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decompressRLElist&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
            freq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i]
            num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(freq):
                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [num]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/string-compression/&#34;&gt;https://leetcode.com/problems/string-compression/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Count and Say</title>
      <link>/ja/post/count-and-say/</link>
      <pubDate>Wed, 31 Mar 2021 22:11:52 +0900</pubDate>
      <guid>/ja/post/count-and-say/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; - 1個の1 -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; - 2個の1 -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; - 1個の2と1個の1 -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1211&lt;/span&gt; -&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上のように続く数列の第$n$項を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count_and_say&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_count_and_say&lt;/span&gt;(curr):
        ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(curr)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curr[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; ch:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (str(cnt) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ch)
                ch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr[i]
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (str(cnt) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ch)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_next_count_and_say(ret)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これは一種の符号化方式．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Letter Case Permutation</title>
      <link>/ja/post/letter-case-permutation/</link>
      <pubDate>Wed, 31 Mar 2021 00:01:38 +0900</pubDate>
      <guid>/ja/post/letter-case-permutation/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;アルファベットと数字で構成される文字列が与えられる．任意のアルファベットについて大文字小文字に変換できる．この変換によって得られるすべての文字列を計算せよ．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/letter-case-permutation/&#34;&gt;https://leetcode.com/problems/letter-case-permutation/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;DFS．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;letterCasePermutation&lt;/span&gt;(self, S: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[str]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(pos, sofar):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(S):
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; S[pos]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isalpha():
                rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[pos])
                rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[pos]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swapcase())
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[pos])
        rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>$2$-Sum, $3$-Sum, ..., $N$-Sum Problems</title>
      <link>/ja/post/n-sum-problems/</link>
      <pubDate>Tue, 30 Mar 2021 18:03:45 +0900</pubDate>
      <guid>/ja/post/n-sum-problems/</guid>
      <description>&lt;p&gt;整数を要素として格納する配列が与えられ，そこから$N$個要素を取り上げてその和が$X$になるような要素のとり方はいくつあるか，要素のとり方そのものを返せ，という系統の問題についてお勉強したのでまとめる．&lt;/p&gt;
&lt;h2 id=&#34;2-sum&#34;&gt;$2$-Sum&lt;/h2&gt;
&lt;p&gt;与えられた配列&lt;code&gt;nums&lt;/code&gt;から要素を 2 つ取り出して，その和が&lt;code&gt;target&lt;/code&gt;と等しくなるような組み合わせを配列における位置のペアで返せ．&lt;/p&gt;
&lt;p&gt;主なアプローチは 3 つありそう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「足して&lt;code&gt;target&lt;/code&gt;になる相方」がいるかを管理しながら要素を舐める（$O(n)$）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt;を昇順に整列して「足して&lt;code&gt;target&lt;/code&gt;になる相方」を線形に探索（$O(n)$）
&lt;ul&gt;
&lt;li&gt;この方法だと与えられた配列に重複要素が含まれているときに対応しやすい？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt;を昇順に整列して「足して&lt;code&gt;target&lt;/code&gt;になる相方」を二分探索（$O(n \log n)$）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;足してtargetになる相方がいるかを管理しながら要素を舐める&#34;&gt;「足して&lt;code&gt;target&lt;/code&gt;になる相方」がいるかを管理しながら要素を舐める&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum&lt;/span&gt;(nums, target):
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
        remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [idx, table[remain]]
        table[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(two_sum(nums, target)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;numsを昇順に整列して足してtargetになる相方を線形に探索&#34;&gt;&lt;code&gt;nums&lt;/code&gt;を昇順に整列して「足して&lt;code&gt;target&lt;/code&gt;になる相方」を線形に探索&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum&lt;/span&gt;(nums, target):
    nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
        added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [left, right]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
            left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# target &amp;lt; added&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;昇順になっているならば，「足し上げた結果が&lt;code&gt;target&lt;/code&gt;より小さいときは片方を大きくすればいいし，&lt;code&gt;target&lt;/code&gt;を超えちゃったときは片方を小さくすれば良い」という操作をインデックスの隣への移動で実現できる．&lt;/p&gt;
&lt;p&gt;また，要素の重複があるような配列を渡されたときに重複要素を無視する操作もインデックスの移動でできる．&lt;/p&gt;
&lt;h3 id=&#34;numsを昇順に整列して足してtargetになる相方を二分探索&#34;&gt;&lt;code&gt;nums&lt;/code&gt;を昇順に整列して「足して&lt;code&gt;target&lt;/code&gt;になる相方」を二分探索&lt;/h3&gt;
&lt;p&gt;昇順になっていれば相方を二分探索で探すこともできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum&lt;/span&gt;(nums, target):
    nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(nums, target):
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
        remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num
        remain_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary_search(nums, remain)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[remain_idx] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [idx, remain_idx]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(two_sum(nums, target)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [0, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-sum&#34;&gt;$3$-Sum&lt;/h2&gt;
&lt;p&gt;与えられた配列&lt;code&gt;nums&lt;/code&gt;から要素を 3 つ取り出して，その和が&lt;code&gt;target&lt;/code&gt;と等しくなるような組み合わせを配列における位置のペアで返せ．&lt;/p&gt;
&lt;p&gt;これは，&lt;code&gt;nums[i] + nums[j] + nums[k] == target&lt;/code&gt;とすると，&lt;code&gt;nums[i] + nums[j] == target - nums[k]&lt;/code&gt;という，「毎回&lt;code&gt;target&lt;/code&gt;の変わる$2$-Sum」と見て解くことができる．&lt;/p&gt;
&lt;p&gt;なんと Wikipedia に&lt;a href=&#34;https://en.wikipedia.org/wiki/3SUM&#34;&gt;記事&lt;/a&gt;もある．&lt;/p&gt;
&lt;h2 id=&#34;参考問題&#34;&gt;参考問題&lt;/h2&gt;
&lt;h3 id=&#34;two-sumhttpsleetcodecomproblemstwo-sum&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum/&#34;&gt;Two Sum&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;これは相方をメモしておく解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [idx, table[remain]]
            table[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;two-sum-ii---input-array-is-sortedhttpsleetcodecomproblemstwo-sum-ii-input-array-is-sorted&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/&#34;&gt;Two Sum II - Input array is sorted&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;相方をメモしておく解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(self, numbers: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(numbers):
            remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [idx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, table[remain] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; table[remain] &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; [table[remain] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, idx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            table[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;昇順に並んでいることを利用して相方を探す解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(self, numbers: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(numbers) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; numbers[right]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# target &amp;lt; added&lt;/span&gt;
                right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;two-sum-iii---data-structure-designhttpsleetcodecomproblemstwo-sum-iii-data-structure-design&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum-iii-data-structure-design/&#34;&gt;Two Sum III - Data structure design&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not Yet.&lt;/p&gt;
&lt;h3 id=&#34;two-sum-iv---input-is-a-bsthttpsleetcodecomproblemstwo-sum-iv-input-is-a-bst&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&#34;&gt;Two Sum IV - Input is a BST&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二分探索木を DFS しながら相方をメモする解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTarget&lt;/span&gt;(self, root: TreeNode, k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [root]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            seen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再帰で二分探索木を DFS しながら相方をメモする解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTarget&lt;/span&gt;(self, root: TreeNode, k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            seen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DFS(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; DFS(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DFS(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BFS で二分探索木を BFS しながら相方をメモする解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTarget&lt;/span&gt;(self, root: TreeNode, k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [root]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            seen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二分探索木を間順走査すると昇順にソートされた配列が計算できるので，配列に対する$2$-Sum 問題に帰着して解く解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTarget&lt;/span&gt;(self, root: TreeNode, k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        inordered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                inorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            inordered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                inorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        inorder(root)

        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(inordered) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inordered[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; inordered[right]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;two-sum-bstshttpsleetcodecomproblemstwo-sum-bsts&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum-bsts/&#34;&gt;Two Sum BSTs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;2 つの二分探索木が与えられたときの$2$-Sum 問題．二分探索木では&lt;code&gt;root.left.val &amp;lt; root.val &amp;lt; root.right.val&lt;/code&gt;が成立するのである意味「整列している」とも言える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum_bsts&lt;/span&gt;(root1, root2, target):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(root1, root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val, target) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; two_sum_bsts(root1, root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, target) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; two_sum_bsts(root1, root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, target)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helper&lt;/span&gt;(root1, root2_val, target):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; root2_val
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, root2_val, target)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# target &amp;lt; added&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, root2_val, target)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;two-sum-less-than-khttpsleetcodecomproblemstwo-sum-less-than-k&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum-less-than-k/&#34;&gt;Two Sum Less Than K&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配列が与えられて，その中から和が$K$を超えない範囲で最も大きくなるように重複を許さずに 2 つ要素を選んだときの，その和を計算せよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]
K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum_less_than_k&lt;/span&gt;(nums, target):
    nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
        added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, added)
            left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(two_sum_less_than_k(nums, K)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 58&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3sumhttpsleetcodecomproblems3sum&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/3sum/&#34;&gt;3Sum&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;全体としては$O(n^2)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;threeSum&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[i]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# skip same num&lt;/span&gt;
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# target = nums[i]&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
                added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([nums[i], nums[left], nums[right]])
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#75715e&#34;&gt;# skip same num&lt;/span&gt;
                        left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[right] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#75715e&#34;&gt;# skip same num&lt;/span&gt;
                        right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 0 &amp;lt; added&lt;/span&gt;
                    right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3sum-closesthttpsleetcodecomproblems3sum-closest&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/3sum-closest/&#34;&gt;3Sum Closest&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;threeSumClosest&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
                added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; added) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(diff):
                    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; added
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; diff &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3sum-smallerhttpsleetcodecomproblems3sum-smaller&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/3sum-smaller/&#34;&gt;3Sum Smaller&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;配列が与えられて，その中から和が$K$を超えない範囲で最も大きくなるように重複を許さずに 3 つ要素を選ぶときの数字の選び方の総数を求めよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum_smaller&lt;/span&gt;(nums, target):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum&lt;/span&gt;(nums, target):
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left)
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

    nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; two_sum(nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(two_sum_smaller(nums, target)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4sumhttpsleetcodecomproblems4sum&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/4sum/&#34;&gt;4Sum&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;$3$-Sum と同様に考えれば$K$-Sum は$2$-Sum に帰着できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fourSum&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k_sum&lt;/span&gt;(nums, target, k):
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; nums[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; two_sum(nums, target)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[i]:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ret &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; k_sum(nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums[i], k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                    ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([nums[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; _ret)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;two_sum&lt;/span&gt;(nums, target):
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
                added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[right]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
                    ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([nums[left], nums[right]])
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[left] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                        left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nums[right]:
                        right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; added &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret


        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; k_sum(nums, target, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4sum-iihttpsleetcodecomproblems4sum-ii&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/4sum-ii/&#34;&gt;4Sum II&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;（&lt;code&gt;A&lt;/code&gt;，&lt;code&gt;B&lt;/code&gt;）と（&lt;code&gt;C&lt;/code&gt;，&lt;code&gt;D&lt;/code&gt;）でそれぞれの組でありえる組み合わせをメモしておいて，違うに打ち消し合うやつがあればカウントする．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fourSumCount&lt;/span&gt;(self, A: List[int], B: List[int], C: List[int], D: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        counter_AB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter()
        counter_CD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; product(A, B):
            counter_AB[a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (c, d) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; product(C, D):
            counter_CD[c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sum_ab &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counter_AB:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sum_ab &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counter_CD:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; counter_AB[sum_ab] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; counter_CD[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sum_ab]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;max-number-of-k-sum-pairshttpsleetcodecomproblemsmax-number-of-k-sum-pairs&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/max-number-of-k-sum-pairs/&#34;&gt;Max Number of K-Sum Pairs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;相方候補が何人いるかをカウントする．ダブルカウントに注意．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxOperations&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cnt:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; min(cnt[num], cnt[k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;count-good-mealshttpsleetcodecomproblemscount-good-meals&#34;&gt;&lt;a href=&#34;https://leetcode.com/problems/count-good-meals/&#34;&gt;Count Good Meals&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countPairs&lt;/span&gt;(self, deliciousness: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        MOD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;_000_000_007
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(deliciousness)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cnt:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; item:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cnt[item] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (cnt[item] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cnt[item] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cnt[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; item]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; MOD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AOJ ITP1 in Python</title>
      <link>/ja/post/aoj-itp1/</link>
      <pubDate>Mon, 29 Mar 2021 15:34:00 +0900</pubDate>
      <guid>/ja/post/aoj-itp1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://judge.u-aizu.ac.jp/onlinejudge/finder.jsp?course=ITP1&#34;&gt;AOJ-ITP1&lt;/a&gt;を Python で解く．&lt;/p&gt;
&lt;h2 id=&#34;itp1_1_a&#34;&gt;ITP1_1_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_1_b&#34;&gt;ITP1_1_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_1_c&#34;&gt;ITP1_1_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;h, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_1_d&#34;&gt;ITP1_1_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}:{}:{}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(S &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;, (S &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, S &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_2_a&#34;&gt;ITP1_2_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a &amp;lt; b&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a == b&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a &amp;gt; b&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_2_b&#34;&gt;ITP1_2_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a, b, c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; c:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_2_c&#34;&gt;ITP1_2_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lst)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_2_d&#34;&gt;ITP1_2_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;W, H, x, y, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_3_a&#34;&gt;ITP1_3_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_3_b&#34;&gt;ITP1_3_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case {}: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i, x))
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_3_c&#34;&gt;ITP1_3_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x:
        x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(x, y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_3_d&#34;&gt;ITP1_3_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a, b, c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(a, b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cnt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_4_a&#34;&gt;ITP1_4_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; b, a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{:.6f}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_4_b&#34;&gt;ITP1_4_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pi
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{:.6f} {:.6f}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; r, pi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_4_c&#34;&gt;ITP1_4_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    lhs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
    op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    rhs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(lhs &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rhs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(lhs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; rhs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(lhs &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; rhs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(lhs &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; rhs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_4_d&#34;&gt;ITP1_4_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(min(lst), max(lst), sum(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_5_a&#34;&gt;ITP1_5_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    h, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(h):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_5_b&#34;&gt;ITP1_5_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    h, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(h &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_5_c&#34;&gt;ITP1_5_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    H, W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_5_d&#34;&gt;ITP1_5_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str(i):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_6_a&#34;&gt;ITP1_6_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lst)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_6_b&#34;&gt;ITP1_6_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
suits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]
cards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    s, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;:
        cards&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(n))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;:
        cards&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(n))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;:
        cards&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(n))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        cards&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(n))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cards:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(suits[(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;], (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ele in lst&lt;/code&gt;は&lt;code&gt;n = len(lst)&lt;/code&gt;として$O(n)$らしい．&lt;/p&gt;
&lt;/details&gt;
&lt;h2 id=&#34;itp1_6_c&#34;&gt;ITP1_6_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
room &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    b, f, r, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    room[b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][f &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(room[i][j][k]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;####################&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_6_d&#34;&gt;ITP1_6_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N, M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(input()) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M):
        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; A[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; B[j]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(ans)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_7_a&#34;&gt;ITP1_7_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    m, f, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; score:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; score:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; score:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; score:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; r:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_7_b&#34;&gt;ITP1_7_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    N, X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; X &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N:
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cnt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_7_c&#34;&gt;ITP1_7_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;H, W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
sheet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
    sheet[h]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sum(sheet[h]))
sheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)])
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
        sheet[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; sheet[h][w]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sheet:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_7_d&#34;&gt;ITP1_7_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N, M, L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M)]

C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(L)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(L):
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M):
            c &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; A[i][k] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; B[k][j]
        C[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; C:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_8_a&#34;&gt;ITP1_8_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swapcase())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_8_b&#34;&gt;ITP1_8_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; x:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        x &lt;span style=&#34;color:#f92672&#34;&gt;//=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(ans)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_8_c&#34;&gt;ITP1_8_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()
cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
alphabets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [chr(ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; string:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alphabets:
        cnt[alphabets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(x)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{} : {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(alphabets[i], cnt[i]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_8_d&#34;&gt;ITP1_8_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(p) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_9_a&#34;&gt;ITP1_9_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(word))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_9_b&#34;&gt;ITP1_9_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    cards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cards &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
        interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cards[:interval]
        tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cards[interval:]
        cards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cards)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_9_c&#34;&gt;ITP1_9_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
taro &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
hanako &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    card_taro, card_hanako &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; card_taro &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; card_hanako:
        taro &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        hanako &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; card_taro &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; card_hanako:
        hanako &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        taro &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(taro, hanako)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_9_d&#34;&gt;ITP1_9_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; command[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replace&amp;#34;&lt;/span&gt;:
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; command[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
        text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text[:a] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; text[b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; command[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reverse&amp;#34;&lt;/span&gt;:
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
        text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text[:a] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(reversed(text[a:b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; text[b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(command[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(text[a:b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_10_a&#34;&gt;ITP1_10_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x1, y1, x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(float, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(((x1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x2) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (y1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y2) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_10_b&#34;&gt;ITP1_10_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
a, b, C&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;map(float, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
theta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;radians(C)
h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(theta)
S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(a &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(theta))
L &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(S, L, h, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_10_c&#34;&gt;ITP1_10_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
    mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(score) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; N
    variant &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
        variant &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (score[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mean) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;((variant &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; N) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_10_d&#34;&gt;ITP1_10_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dist&lt;/span&gt;(xs, ys, p):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(xs, ys):
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; p
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p)

N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
ys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(dist(xs, ys, p))
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(max(abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(xs, ys)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_11_a&#34;&gt;ITP1_11_A:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dice&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate&lt;/span&gt;(self, dir):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s2, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s5, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s2, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s5
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s2, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s5, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s5, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s2
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s4, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s4, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# dir == &amp;#34;W&amp;#34;:&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s4, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s6, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s4

nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
ops &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dice(nums)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ops:
    d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(op)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_11_b&#34;&gt;ITP1_11_B:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dice&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate&lt;/span&gt;(self, dir):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# dir == &amp;#34;W&amp;#34;:&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(self, top, front):
        saved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NNNNWNNNWNNNENNNENNNWNNN&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(dir)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; front:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; saved
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dice(nums)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    top, front &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(top, front))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_11_c&#34;&gt;ITP1_11_C:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dice&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate&lt;/span&gt;(self, dir):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# dir == &amp;#34;W&amp;#34;:&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(self, top, front):
        saved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NNNNWNNNWNNNENNNENNNWNNN&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(dir)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; front:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; saved
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_equal&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NNNNWNNNWNNNENNNENNNWNNN&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(dir)
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[k] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[k]:
                    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False


nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
d1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dice(nums)
nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
d2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Dice(nums)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; d1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_equal(d2):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;itp1_11_d&#34;&gt;ITP1_11_D:&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dice&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, nums):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate&lt;/span&gt;(self, dir):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# dir == &amp;#34;W&amp;#34;:&lt;/span&gt;
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(self, top, front):
        saved &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NNNNWNNNWNNNENNNENNNWNNN&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(dir)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; front:
                ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; saved
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_equal&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NNNNWNNNWNNNENNNENNNWNNN&amp;#34;&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rotate(dir)
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[k] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nums[k]:
                    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
dices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N):
    nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
    dices&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Dice(nums))

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dices[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_equal(dices[j]):
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Diameter of a Tree</title>
      <link>/ja/post/diameter-of-a-tree/</link>
      <pubDate>Mon, 29 Mar 2021 15:10:30 +0900</pubDate>
      <guid>/ja/post/diameter-of-a-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;木の直径を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;任意の頂点$x$から BFS をして$x$から最遠の頂点$u$を計算し，再び$u$から BFS して$u$から最遠の頂点$v$を計算する．このとき，$u$-$v$はその木の直径をなすパスの両端点になっている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())

T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    s, t, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    T[s]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((t, w))
    T[t]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((s, w))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(tree, s):
    dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
    dist[s] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [s]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; suspended:
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[u]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (v, w) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tree[u]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
              dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cost &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w
              suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dist)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(d), d

u, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BFS(T, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
v, diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BFS(T, u)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(diameter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;対象となる木が「二分木」であるときは別の解き方もできる．ある頂点を根としたとき，「その根の左部分木の直径」，「その根の右部分木の直径」，「その根の左右の部分木の高さの和+1」のうちの最大値がその木の直径となる．これを再帰的に書いても答えが得られる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_height&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# root.left is not None and root.right is not None:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left), get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_diameter&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    left_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    right_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

    root_diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left_height &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right_height &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    left_diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_diameter(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    right_diameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_diameter(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(left_diameter, right_diameter, root_diameter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Volume of Histogram</title>
      <link>/ja/post/volume-of-histogram/</link>
      <pubDate>Sun, 28 Mar 2021 18:07:16 +0900</pubDate>
      <guid>/ja/post/volume-of-histogram/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;あるヒストグラムを考えよう．そのヒストグラムを容器に見立てて上から水を流し込む．このとき，ヒストグラム内に貯まる水の量はいくつか．&lt;/p&gt;
&lt;p&gt;入力としてヒストグラムはリストの形で与えられる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;                        _
                       |x|             _
               _       |x|            |x|
              |x|      |x|       _    |x|
              |x|      |x|      |x|   |x|
              |x|      |x|      |x|   |x|    _
              |x|      |x|      |x|   |x|   |x|
        ------------------------------------------------
input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 0, 4, 0, 0, 6, 0, 0, 3, 0, 5, 0, 1, 0, 0, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;時間計算量on2空間計算量o1な答え&#34;&gt;時間計算量$O(n^2)$・空間計算量$O(1)$な答え&lt;/h2&gt;
&lt;p&gt;ある位置&lt;code&gt;i&lt;/code&gt;で溜まる水の高さは，その位置から左右両側を見て，その位置より高い地点があるならそれらの低い方の高さになる．これを各位置について計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;volume_of_hist&lt;/span&gt;(hist):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    volume &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(hist)):
        max_by_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(hist[:i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        max_by_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(hist[:i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        volume &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, min(max_by_left, max_by_right) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hist[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; volume

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(volume_of_hist(hist)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;時間計算量on空間計算量onな答え&#34;&gt;時間計算量$O(n)$・空間計算量$O(n)$な答え&lt;/h2&gt;
&lt;p&gt;ある位置&lt;code&gt;i&lt;/code&gt;から見て左右の高さの最大値は，位置&lt;code&gt;i - 1&lt;/code&gt;でのそれと位置&lt;code&gt;i&lt;/code&gt;の高さのうちの高い方なので，左右から「その位置での直近の最大値」を計算し，各位置で小さい方を取れば水面の高さが取れる．&lt;code&gt;max_by_left&lt;/code&gt;/&lt;code&gt;max_by_right&lt;/code&gt;を真面目に求めるのではなくて直近との比較で時間効率良く求めるというのがこのやり方．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;algorithm.png&#34; data-caption=&#34;アルゴリズム概観&#34;&gt;
&lt;img src=&#34;algorithm.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    アルゴリズム概観
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;volume_of_hist&lt;/span&gt;(hist):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    max_by_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(hist)
    max_by_left[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hist[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(hist)):
        max_by_left[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_by_left[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], hist[i])

    max_by_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(hist)
    max_by_right[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hist[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        max_by_right[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_by_right[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], hist[i])

    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(hist)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(hist)):
        height[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(max_by_left[i], max_by_right[i])

    volume &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(hist)):
        volume &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (height[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hist[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; volume

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(volume_of_hist(hist)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;                _
               |x|             _
       _       |x|            |x|
      |x|      |x|       _    |x|
      |x|      |x|      |x|   |x|
      |x|      |x|      |x|   |x|    _
      |x|      |x|      |x|   |x|   |x|
------------------------------------------------
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 0, 4, 0, 0, 6, 0, 0, 3, 0, 5, 0, 1, 0, 0, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;- input
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 0, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;- max_by_left
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;- max_by_right
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 0, 4, 4, 4, 6, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;- height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;max_by_left&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, max_by_right&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 0, 0, 4, 4, 0, 5, 5, 2, 5, 0, 1, 0, 0, 0, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;- volume &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; height - input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;時間計算量on空間計算量o1な答え&#34;&gt;時間計算量$O(n)$・空間計算量$O(1)$な答え&lt;/h2&gt;
&lt;p&gt;左右から同時に高さを求めていくことで空間計算量を削減する．左右からポインタを交差するまで走らせ，走らせながら高さを確定させていく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;volume_of_hist&lt;/span&gt;(hist):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(hist) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    max_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    volume &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hist[left] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; hist[right]:
            curr_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hist[left]
            left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            curr_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hist[right]
            right &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        volume &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, max_height &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; curr_height)
        max_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_height, curr_height)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; volume

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(volume_of_hist(hist)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;類題&#34;&gt;類題&lt;/h2&gt;
&lt;p&gt;3 次元のヒストグラムが与えられたときの溜まる水の量を計算せよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;1, 4, 3, 1, 3, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 2, 1, 3, 2, 4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 3, 3, 2, 3, 1&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;類題答え&#34;&gt;類題答え&lt;/h2&gt;
&lt;p&gt;外堀から埋めていく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;hist_3d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
]

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; heapq

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;volume_of_hist_3d&lt;/span&gt;(hist_3d):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(hist_3d) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; len(hist_3d[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(hist_3d)
    W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(hist_3d[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 外堀が作れず全部流出してしまう&lt;/span&gt;

    has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((hist_3d[h][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], h, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((hist_3d[h][W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], h, W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, W &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((hist_3d[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][w], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, w))
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((hist_3d[H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w], H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, w))
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, w))
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, w))

    heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heapify(queue)
    max_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    volume &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        curr_height, h, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(queue)
        volume &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, max_height &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; curr_height)
        max_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_height, curr_height)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]:
            nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
            nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (nh, nw) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(queue, (hist_3d[nh][nw], nh, nw))
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((nh, nw))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; volume

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(volume_of_hist_3d(hist_3d)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;refs&#34;&gt;refs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/trapping-rain-water/&#34;&gt;https://leetcode.com/problems/trapping-rain-water/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/trapping-rain-water-ii/&#34;&gt;https://leetcode.com/problems/trapping-rain-water-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Find $K$th Smallest Elements</title>
      <link>/ja/post/find-k-th-smallest-elements/</link>
      <pubDate>Sun, 28 Mar 2021 13:06:44 +0900</pubDate>
      <guid>/ja/post/find-k-th-smallest-elements/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;同一要素を含まない，長さ$n$の配列&lt;code&gt;lst&lt;/code&gt;が与えられる．小さい順に$k$個の要素を取り出せ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;h3 id=&#34;on-log-n昇順にソートして先頭k個取り出す&#34;&gt;$O(n \log n)$：昇順にソートして先頭$k$個取り出す&lt;/h3&gt;
&lt;p&gt;ソートするのに$O(n \log n)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[:k]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onkバブルソートを途中でやめる&#34;&gt;$O(nk)$：バブルソートを途中でやめる&lt;/h3&gt;
&lt;p&gt;先頭$k$個が決定するまで昇順のバブルソートを実行し，途中でやめる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, k, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, i, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lst[j]:
                lst[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lst[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[j], lst[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[:k]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ok-log-nヒープソートを途中でやめる&#34;&gt;$O(k \log n)$：ヒープソートを途中でやめる&lt;/h3&gt;
&lt;p&gt;先頭$k$個が決定するまで昇順のヒープソートを実行し，途中でやめる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; heapq
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heapify(lst)
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k):
        ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(lst))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;heapq&lt;/code&gt;にはそれ用の&lt;code&gt;heapq.nsmallest()&lt;/code&gt;関数が用意されている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; heapq
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nsmallest(k, lst)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on-log-kサイズkの-max-heap-を作る&#34;&gt;$O(n \log k)$：サイズ$k$の Max Heap を作る&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lst&lt;/code&gt;の要素を一つずつ見ながら Max Heap を作る．今見てる要素より Max Heap の先頭が大きかったら現在の Max Heap の先頭は答えに含まれないので&lt;code&gt;pop&lt;/code&gt;して今見てる要素を&lt;code&gt;push&lt;/code&gt;する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_heapify&lt;/span&gt;(lst):
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p:
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(lst) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(lst) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; lst[p] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[left]:
                lst[p], lst[left] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[left], lst[p]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; lst[p] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[right]:
                lst[p], lst[right] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[right], lst[p]
            p &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_heappop&lt;/span&gt;(lst):
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        max_heapify(lst)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max_heappush&lt;/span&gt;(lst, ele):
        lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ele)
        max_heapify(lst)

    heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(heap) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
            max_heappush(heap, ele)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; heap[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
            max_heappop(heap)
            max_heappush(heap, ele)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; heap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onselection-rank-algorithm&#34;&gt;$O(n)$：Selection Rank Algorithm&lt;/h3&gt;
&lt;p&gt;$k$番目に小さい値を効率よく見つけ出し，それ以上の値を取ってくるというアルゴリズム．分割統治法．最悪の時間計算量は$O(n^2)$だが，うまく行けば$O(n)$が期待できる．クイックソートの探索版を使って$k$番目に小さい値を拾ってくる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(lst, k):
    &lt;span style=&#34;color:#75715e&#34;&gt;# partition lst[left:right+1] by pivot = lst[right]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# left, right: 0-origin&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# [left_side] &amp;lt;= pivot &amp;lt; [right_side]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt;(lst, left, right):
        pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[right]
        left_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(left, right):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[curr] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; pivot:
                lst[left_end], lst[curr] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[curr], lst[left_end]
                left_end &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        lst[left_end], lst[right] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[right], lst[left_end]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left_end &lt;span style=&#34;color:#75715e&#34;&gt;# tail index of left side(0-origin)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# rank, left, right: 0-origin&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_ele_at_rank&lt;/span&gt;(lst, left, right, rank):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; rank &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; rank &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left:
            left_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partition(lst, left, right)
            left_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 1-origin count&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rank:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[left_end]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rank &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; get_ele_at_rank(lst, left, left_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, rank)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; get_ele_at_rank(lst, left_end  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right, rank &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left_size)

    &lt;span style=&#34;color:#75715e&#34;&gt;# given k: 1-origin&lt;/span&gt;
    kth_smallest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_ele_at_rank(lst, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [ele &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; kth_smallest]

lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)]
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(lst)
lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(lst)

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}th smallest elements: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(k, smallest_k(lst, k)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TODO: selection rank の実装&lt;/p&gt;
&lt;h3 id=&#34;on二分探索木を作って間順走査&#34;&gt;$O(n)$：二分探索木を作って間順走査&lt;/h3&gt;
&lt;p&gt;正しい二分探索木を間順走査すれば昇順に$k$個の頂点を訪れる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(self, val):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; val:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; val:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(val)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# self.key &amp;gt; key&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(val)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;(self):
        lines, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display_aux()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(line)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_display_aux&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Returns list of strings, width, height, and horizontal coordinate of the root.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# No child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(line)
            height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; width &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [line], width, height, middle

        &lt;span style=&#34;color:#75715e&#34;&gt;# Only left child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            lines, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display_aux()
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
            first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s
            second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            shifted_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [line &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shifted_lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Only right child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            lines, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display_aux()
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
            first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            shifted_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; line &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shifted_lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Two children.&lt;/span&gt;
        left, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display_aux()
        right, m, q, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display_aux()
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
        first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
        second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q:
            left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p:
            right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; q)
        zipped_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zip(left, right)
        lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zipped_lines]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, max(p, q) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)]
random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(lst)
lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]

root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(ele)
root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;display()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_k&lt;/span&gt;(root, k, sofar):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smallest_k(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, k, sofar)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sofar) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
        sofar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smallest_k(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, k, sofar)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sofar

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smallest_k(root, k, [])
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(ret)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_bst&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_bst(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; is_bst(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(is_bst(root))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Find Majority Element From a List</title>
      <link>/ja/post/find-majority-element-from-a-list/</link>
      <pubDate>Sun, 28 Mar 2021 01:18:26 +0900</pubDate>
      <guid>/ja/post/find-majority-element-from-a-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;配列$A$が与えられる．$A$の過半数を占める要素があればそれを見つけなさい．なければ&lt;code&gt;-1&lt;/code&gt;を返しなさい．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;ナイーブなやり方：各要素の頻度を計算して過半数に達しているかを確認する．時間について$O(n^2)$，空間について$O(1)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_majority_element&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(lst, candidate):
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; candidate:
                count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check(lst, ele):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ele
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配列を一度舐めるだけで，過半数に達しているかもしれない要素は見つけることができる．これを使うと時間について$O(n)$，空間について$O(1)$で済む．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_majority_element&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_candidate&lt;/span&gt;(lst):
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        candidate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#75715e&#34;&gt;# 旧candidateと同数の異なる要素が存在したので候補から落ち，&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# 今見ている要素が新candidateとなる．&lt;/span&gt;
                candidate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ele
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;  candidate:
                count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
              count &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; candidate
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(lst, candidate):
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; candidate:
                count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; count

    candidate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_candidate(lst)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; candidate &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; validate(lst, candidate) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(find_majority_element([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(find_majority_element([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))    &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Pick Up M Elements From List</title>
      <link>/ja/post/pick-up-m-elements-from-list/</link>
      <pubDate>Sun, 28 Mar 2021 00:30:18 +0900</pubDate>
      <guid>/ja/post/pick-up-m-elements-from-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;長さ$N$の配列からランダムに$M$個要素を取り出した配列を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;標準ライブラリを使う．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick_m_random_elements&lt;/span&gt;(lst, m):
    random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(lst)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[:m]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fisher-Yates アルゴリズムと似た感じでやることもできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pick_m_random_elements&lt;/span&gt;(lst, m):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[:m]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m, len(lst), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m:
            ret[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Shuffle a Deck of Cards</title>
      <link>/ja/post/shuffle-a-deck-of-cards/</link>
      <pubDate>Sat, 27 Mar 2021 23:15:43 +0900</pubDate>
      <guid>/ja/post/shuffle-a-deck-of-cards/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$N$枚のカードをシャッフルせよ．シャッフルの結果に偏りがあってはならない．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;標準ライブラリを使うとさすがにチートか．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
cards &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(cards)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(cards)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://svn.python.org/projects/python/trunk/Lib/random.py&#34;&gt;&lt;code&gt;random.shuffle&lt;/code&gt;&lt;/a&gt;の内部的には&lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher-Yates のアルゴリズム&lt;/a&gt;が用いられている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;To shuffle an array A of N elements &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;indices: 0...N-1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in range&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;N - 1, 0, -1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        j &amp;lt;- random_integer_between&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0, i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 0 &amp;lt;= j &amp;lt;= i&lt;/span&gt;
        swap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;A&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, A&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fisher-Yates アルゴリズムでは末尾の要素から決定する．$i$番目の要素を$0$番目から$i$番目までの中からランダムに選択する．&lt;/p&gt;
&lt;p&gt;自前で実装すると以下．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fisher_yates_shuffle&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i) &lt;span style=&#34;color:#75715e&#34;&gt;# randint(a, b) returns a random value in a &amp;lt;= n &amp;lt;= b&lt;/span&gt;
        lst[i], lst[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[j], lst[i]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fisher-Yates アルゴリズムでは$N - 1$回乱数を引くことになる．乱数を 1 度だけ引くようなシャッフルアルゴリズムは存在しないのだろうか？&lt;/p&gt;
&lt;p&gt;$N$枚のカードのシャッフル結果の総数は$N!$通りある．そこで，それらに$0$から$N!-1$までのインデックスを付けて，一度だけ引いた乱数がと等しいインデックスの結果をシャッフルの結果とするというのを考える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
        memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        memo[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(n, memo):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; memo[n] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; rec(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, memo)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(n, memo)
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factorial(len(lst))
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(f)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        fi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factorial(i)
        q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; fi
        lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(q))
        idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;乱数を引く回数が減らせる代わりに，階乗を求めるときの計算でメモリを消費する．&lt;/p&gt;
&lt;p&gt;手元での実験の感覚では，$N$が大きくなると階乗を計算することが困難になるので，余り効率は良くないと思える．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Without Plus</title>
      <link>/ja/post/add-without-plus/</link>
      <pubDate>Sat, 27 Mar 2021 21:15:59 +0900</pubDate>
      <guid>/ja/post/add-without-plus/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;を&lt;strong&gt;使わずに&lt;/strong&gt;足し算を実装せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;計算機はビット演算で四則演算を実装している．足し算とは，各桁の数字の足し算と繰り上がりの処理からなる．これらは別々に計算して最後に足し合わせるというやり方でも正しい足し算ができる．10 進数でやると次の通り．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;762&lt;/span&gt;
+  &lt;span style=&#34;color:#ae81ff&#34;&gt;949&lt;/span&gt;
------
   &lt;span style=&#34;color:#ae81ff&#34;&gt;601&lt;/span&gt; &amp;lt;- 繰り上がりを無視した各桁同士の和（各桁同士の和 % 10）
+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1110&lt;/span&gt; &amp;lt;- 繰り上がりだけを並べる
------
  &lt;span style=&#34;color:#ae81ff&#34;&gt;1711&lt;/span&gt; &amp;lt;- 正しい答え
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを 2 進数でやればいい．「繰り上がりを無視した足し算」はそのまま&lt;code&gt;xor&lt;/code&gt;が対応する．「繰り上がりだけ並べる」というのは，&lt;code&gt;&amp;amp;&lt;/code&gt;を取って左 1 シフトと対応する．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x + y = (x XOR y) + 2 * (x AND y)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 32 bits integer max&lt;/span&gt;
    MAX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7FFFFFFF&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 32 bits interger min&lt;/span&gt;
    MIN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# mask to get last 32 bits&lt;/span&gt;
    mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFFFFF&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# a + 0 = a&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; MAX &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; mask)
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; add(a, b)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繰り返しで書くと次の通り．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 32 bits integer max&lt;/span&gt;
    MAX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7FFFFFFF&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 32 bits interger min&lt;/span&gt;
    MIN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# mask to get last 32 bits&lt;/span&gt;
    mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFFFFF&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; b:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; mask
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; MAX &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; mask)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Simple Calculator</title>
      <link>/ja/post/simple-calculator/</link>
      <pubDate>Sat, 27 Mar 2021 20:40:58 +0900</pubDate>
      <guid>/ja/post/simple-calculator/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;文字列として与えられる数式を計算するプログラムを書け．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(compute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2*3+5/6*3+15&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 23.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; enum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Enum, auto
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Op&lt;/span&gt;(Enum):
    ADD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auto()
    SUB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auto()
    MUL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auto()
    DIV &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auto()
    NOP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auto()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;priority&lt;/span&gt;(op):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ADD &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SUB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MUL &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DIV:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# op == Op.NOP&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute&lt;/span&gt;(s):
    num_stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    op_stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_num&lt;/span&gt;(s, i):
        buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; s[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit():
            buf &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s[i]
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(buf)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse_op&lt;/span&gt;(s, i):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s):
            op_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[i]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op_str &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ADD
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op_str &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SUB
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op_str &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MUL
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op_str &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DIV
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NOP

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(next_op, num_stack, op_stack):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(num_stack) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; len(op_stack):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; priority(next_op) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; priority(op_stack[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]):
                right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ADD:
                    num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SUB:
                    num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(left &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; right)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MUL:
                    num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(left &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; right)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DIV:
                    num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(left &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; right)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# op == Op.NOP&lt;/span&gt;
                    num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(right)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s):
        num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse_num(s, i)
        num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(num)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; len(str(num))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        next_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse_op(s, i)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        apply(next_op, num_stack, op_stack)
        op_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(next_op)

    apply(Op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NOP, num_stack, op_stack)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(num_stack) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; len(op_stack) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num_stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2*3+5/6*3+15&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(compute(s)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 23.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Smallest Difference in Two Arrays</title>
      <link>/ja/post/smallest-difference-in-two-arrays/</link>
      <pubDate>Sat, 27 Mar 2021 17:56:58 +0900</pubDate>
      <guid>/ja/post/smallest-difference-in-two-arrays/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;配列&lt;code&gt;a&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt;が与えられる．それぞれの配列から一つずつ要素を選んだとき，その差の絶対値が最小となるような要素のペアとその差を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;全てのペアを全探索しながら最小の差を与えるペアを探せば原理的に解ける．$O(AB)$．ただし$A$，$B$はそれぞれの配列の長さ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_diff&lt;/span&gt;(a, b):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(b)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[j]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; diff:
                diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[j])
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a[i], b[j])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; diff, ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(smallest_diff(a, b)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (3, (11, 8))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;両配列を昇順に並び替えてから探すと効率が良くなる．昇順に並び替えてあると，小さい方を動かすことで&lt;code&gt;diff&lt;/code&gt;が小さくなるかもしれないから大きい要素の方の位置を固定して小さい要素の位置を動かす．ソートするのに$O(A \log A + B \log B)$かかり，探索に$O(A + B)$かかるので，全体としては$O(A \log A + B \log B)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smallest_diff&lt;/span&gt;(a, b):
    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(a) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(b):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[j]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; diff:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a[i], b[j])
            diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[j])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b[j]:
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; diff, ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(smallest_diff(a, b)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (3, (11, 8))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How Many Zeros in Suffix of Factorial</title>
      <link>/ja/post/how-many-zeros-in-suffix-of-factorial/</link>
      <pubDate>Sat, 27 Mar 2021 17:42:03 +0900</pubDate>
      <guid>/ja/post/how-many-zeros-in-suffix-of-factorial/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$n$の階乗の末尾には$0$がいくつ並んでいるか．求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;よくある中学受験問題．素因数分解したときに$2$より$5$のほうが数が多いので，$5$の個数を数えれば良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial_zeros&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor_of_5&lt;/span&gt;(n):
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; factor_of_5(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$5$の累乗の倍数がそれぞれ何個あるかを計算して足し上げてもいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial_zeros&lt;/span&gt;(n):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; i
        i &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;階段を縦に見てるか，横に見てるかの違い．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swap Two Intergers Without Additional Mrmory</title>
      <link>/ja/post/swap-two-intergers-without-additional-mrmory/</link>
      <pubDate>Sat, 27 Mar 2021 17:17:31 +0900</pubDate>
      <guid>/ja/post/swap-two-intergers-without-additional-mrmory/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;一時変数を使わずに整数&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;を交換せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 10 3&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#75715e&#34;&gt;# (1)&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a &lt;span style=&#34;color:#75715e&#34;&gt;# (2)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 3, 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt;を交換前の数字とすると，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)：&lt;code&gt;(a - b) + b = a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2)：&lt;code&gt;a - (a - b) = b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xor&lt;/code&gt;を使う方が汎用性は高そう．&lt;code&gt;a xor a = 0&lt;/code&gt;，&lt;code&gt;0 xor a = a&lt;/code&gt;という性質を利用する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 10 3&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#75715e&#34;&gt;# (1)&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#75715e&#34;&gt;# (2)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 3, 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt;を交換前の数字とすると，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)：&lt;code&gt;(a xor b) xor b = a xor (b xor b) = a xor 0 = a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2)：&lt;code&gt;(a xor b) xor a = b xor (a xor a) = b xor 0 = b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Find Key in Listy</title>
      <link>/ja/post/find-key-in-listy/</link>
      <pubDate>Sat, 27 Mar 2021 15:06:19 +0900</pubDate>
      <guid>/ja/post/find-key-in-listy/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;みたいなデータ構造&lt;code&gt;Listy&lt;/code&gt;を考える．&lt;code&gt;Listy&lt;/code&gt;は次のように定義される．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Listy&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, lst):
        lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;(self, idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(lst):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lst[idx]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本的に&lt;code&gt;Listy&lt;/code&gt;は要素を昇順に格納している&lt;code&gt;List&lt;/code&gt;のようなものである．ここで&lt;code&gt;Listy&lt;/code&gt;にはその長さを返すメソッドが用意されていない．つまり&lt;code&gt;Listy&lt;/code&gt;の長さを直接知ることはできない．一方で，&lt;code&gt;Listy.at(idx)&lt;/code&gt;メソッドが用意されており，&lt;code&gt;idx&lt;/code&gt;の位置に存在する要素を$O(1)$で返すことができる．もし&lt;code&gt;idx&lt;/code&gt;が&lt;code&gt;Listy&lt;/code&gt;の範囲を超えると&lt;code&gt;-1&lt;/code&gt;を返す．&lt;/p&gt;
&lt;p&gt;ある&lt;code&gt;Listy&lt;/code&gt;と&lt;code&gt;key&lt;/code&gt;を与えられたとき，&lt;code&gt;key&lt;/code&gt;が&lt;code&gt;Listy&lt;/code&gt;内に存在するかを判定し，存在するならその位置（0-オリジン）を返す関数を書け．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;「要素が昇順に並んでいる」ので二分探索を使いたいところ．&lt;code&gt;Listy&lt;/code&gt;の全長を知ることができないので&lt;code&gt;[2^i, 2^(i + 1))&lt;/code&gt;で探索範囲を広げながら二分探索する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;listy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Listy([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; ,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(listy, key):

    &lt;span style=&#34;color:#75715e&#34;&gt;# listyの[left:right)から要素がkey以上となる最小の位置を二分探索&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(listy, key, left, right):
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; listy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at(mid)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#75715e&#34;&gt;# okの位置にある要素がkeyと等しければ発見成功&lt;/span&gt;
        found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at(ok) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; found, ok

    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; listy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at(right) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; listy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;at(right) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; key:
        right &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; binary_search(listy, key, left, right)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (False, 0)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (True, 0)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (True, 1)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (True, 2)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (True, 7)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (True, 8)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(search(listy, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; (False, 16)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Merge Two Sorted Array in Place</title>
      <link>/ja/post/merge-two-sorted-array-in-place/</link>
      <pubDate>Sat, 27 Mar 2021 14:01:58 +0900</pubDate>
      <guid>/ja/post/merge-two-sorted-array-in-place/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;共に昇順に整列された配列&lt;code&gt;a&lt;/code&gt;と配列&lt;code&gt;b&lt;/code&gt;が与えられる．&lt;code&gt;a&lt;/code&gt;には&lt;code&gt;b&lt;/code&gt;の要素を全て格納するほどのバッファが存在する．このとき，追加のメモリを使用せずに&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;を昇順に整列された状態にマージせよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;後ろからやる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sorted_merge&lt;/span&gt;(a, b, tail_a, tail_b):
    idx_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tail_a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    idx_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tail_b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    idx_merged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tail_a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tail_b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; idx_b:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; idx_a &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; b[idx_b] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a[idx_a]:
            a[idx_merged] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[idx_a]
            idx_a &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            a[idx_merged] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[idx_b]
            idx_b &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        idx_merged &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

sorted_merge(a, b, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [1, 2, 3, 4, 7, 8, 10, 11, 14]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Coin Change</title>
      <link>/ja/post/coin-change/</link>
      <pubDate>Sat, 27 Mar 2021 11:57:01 +0900</pubDate>
      <guid>/ja/post/coin-change/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;手元に$1$円硬貨，$5$円硬貨，$10$円硬貨，$25$円硬貨が無限に存在する．$n$円支払うときの，硬貨の出し方の総数はいくらか．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;coins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_change&lt;/span&gt;(n, coins):
    &lt;span style=&#34;color:#75715e&#34;&gt;# remain円をcoins[pos:]を使って支払うときの支払い方の総数&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(coins, pos, remain):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(coins) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# remain円を1円硬貨で支払う方法は「remain枚の1円硬貨」の1通り&lt;/span&gt;
        ways &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; remain:
            ways &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rec(coins, pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos])
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ways
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(coins, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実際の支払い方を保存しておくこともできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;coins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_change&lt;/span&gt;(n, coins):
    payments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#75715e&#34;&gt;# remain円をcoins[pos:]を使って支払うときの支払い方の総数&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(remain, pos, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(coins) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            payments&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(remain)])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# remain円を1円硬貨で支払う方法は「remain枚の1円硬貨」の1通り&lt;/span&gt;
        ways &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; remain:
            ways &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rec(remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos], pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [coins[pos] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i)])
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ways
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rec(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, [])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans, payments

ways, payments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_change(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, coins)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ways:&amp;#34;&lt;/span&gt;, ways)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, payment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(payments):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}: coin usage: {}, payment: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i, len(payment), payment))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rec()&lt;/code&gt;の求めるものを「&lt;code&gt;remain&lt;/code&gt;円を&lt;code&gt;coins[:pos]&lt;/code&gt;を使って支払うときの支払い方の総数」とした方が自然．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_change&lt;/span&gt;(n, coins):
    &lt;span style=&#34;color:#75715e&#34;&gt;# remain円をcoins[:pos+1]を使って支払うときの支払い方の総数&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(remain, pos):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ways &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; remain:
            ways &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rec(remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; coins[pos], pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ways
    coins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort() &lt;span style=&#34;color:#75715e&#34;&gt;# coins = [1, ...]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(n, len(coins) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TODO：メモ化&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Valid Parentheses</title>
      <link>/ja/post/valid-parentheses/</link>
      <pubDate>Sat, 27 Mar 2021 11:51:05 +0900</pubDate>
      <guid>/ja/post/valid-parentheses/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$n$個の&lt;code&gt;()&lt;/code&gt;を，全ての開きカッコと閉じカッコの対応が正しいように並べたときの全通りを求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;valid_parentheses&lt;/span&gt;(n):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(left, right, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left:
            rec(left &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
          rec(left, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
    rec(n, n, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(valid_parentheses(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; [&amp;#39;((()))&amp;#39;, &amp;#39;(()())&amp;#39;, &amp;#39;(())()&amp;#39;, &amp;#39;()(())&amp;#39;, &amp;#39;()()()&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Recursive Multiply</title>
      <link>/ja/post/recursive-multiply/</link>
      <pubDate>Sat, 27 Mar 2021 00:34:23 +0900</pubDate>
      <guid>/ja/post/recursive-multiply/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;を使わずに掛け算を実装せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;(a, b):
    smaller &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; b
    larger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; a
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helper&lt;/span&gt;(smaller, larger): &lt;span style=&#34;color:#75715e&#34;&gt;# sum up `larger` in `smaller` times&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 0 x larger = 0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 1 x larger = larger&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; larger
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        half &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helper(s, larger)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; larger
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; half
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(smaller, larger)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;メモ化再帰でもっと効率良くできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;(a, b):
    smaller &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; b
    larger &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; a
    memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (smaller &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helper&lt;/span&gt;(smaller, larger, memo):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; larger
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; memo[smaller] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[smaller]
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        half &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helper(s, larger, memo)
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; smaller &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; larger
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; half
        memo[smaller] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; helper(smaller, larger, memo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Magic Index</title>
      <link>/ja/post/magic-index/</link>
      <pubDate>Fri, 26 Mar 2021 22:49:09 +0900</pubDate>
      <guid>/ja/post/magic-index/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;すべての要素が互いに異なりかつ昇順に整列された配列$a$が与えられる．ここで&lt;/p&gt;
&lt;p&gt;$$
a_i = i
$$&lt;/p&gt;
&lt;p&gt;つまり，配列$a$の$i$番目の要素が$i$であるような$i$を magic index と呼ぶことにする．&lt;/p&gt;
&lt;p&gt;配列が与えられたとき，magic index を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;すべての要素を一つずつ見ながら magic index であるかを確認することで求まる．$O(n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_magic_index&lt;/span&gt;(lst):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(lst):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; idx:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(idx)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;だが，これでは「与えられる配列が昇順になっている」という条件を使えていない．&lt;/p&gt;
&lt;p&gt;「昇順」と来たら，二分探索．$O(\log n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_magic_index&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(lst, left, right):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; mid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(lst, mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[mid]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(lst, left, mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(lst, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How Many Ways to Run Up the Stairs?</title>
      <link>/ja/post/how-many-ways-to-run-up-the-stairs/</link>
      <pubDate>Fri, 26 Mar 2021 22:10:18 +0900</pubDate>
      <guid>/ja/post/how-many-ways-to-run-up-the-stairs/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;$n$段の階段がある．おじさんは筋トレにハマっており，$i$段飛ばしが好きだ．現状おじさんは$i = 1, 2, 3$の$i$段飛ばしができる．おじさんが$n$段の階段をのぼる方法は全部で何通りあるか．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;メモ化再帰&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(n, memo):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; memo[n] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n]
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, memo) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, memo) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solve(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, memo)
    memo[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Convert a Number to a Number</title>
      <link>/ja/post/convert-a-number-to-a-number/</link>
      <pubDate>Fri, 26 Mar 2021 19:14:42 +0900</pubDate>
      <guid>/ja/post/convert-a-number-to-a-number/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;整数$A$を整数$B$に変換するのに必要なビット反転の回数を計算せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(a, b):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#75715e&#34;&gt;# 異なる桁だけ1が立つ&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうも書ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(a, b):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 右端の1が0になる&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Insert a Number in a Number</title>
      <link>/ja/post/insert-a-number-in-a-number/</link>
      <pubDate>Fri, 26 Mar 2021 19:06:11 +0900</pubDate>
      <guid>/ja/post/insert-a-number-in-a-number/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;ビット列の指定された位置に別のビット列を挿入せよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100000000&lt;/span&gt; の 2桁目から6桁目にB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 101101を挿入
-&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101011010&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# aのi桁目からj桁目にbを挿入&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(a, b, i, j):
    ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 全部1&lt;/span&gt;
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ones &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; right
    a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; mask
    b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; i
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;(1 &amp;lt;&amp;lt; i) - 1&lt;/code&gt;：&lt;code&gt;1&lt;/code&gt;が$i$個右端に並ぶ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sub of Subarray</title>
      <link>/ja/post/sub-of-subarray/</link>
      <pubDate>Fri, 26 Mar 2021 00:41:37 +0900</pubDate>
      <guid>/ja/post/sub-of-subarray/</guid>
      <description>&lt;h2 id=&#34;部分和問題&#34;&gt;部分和問題&lt;/h2&gt;
&lt;p&gt;配列&lt;code&gt;lst&lt;/code&gt;と整数&lt;code&gt;W&lt;/code&gt;が与えられたとき，&lt;code&gt;lst&lt;/code&gt;の部分配列の和が&lt;code&gt;W&lt;/code&gt;になることような部分配列は存在するか．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;再帰で解く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(lst, W):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(pos, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(lst):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sofar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[pos]):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(lst, W):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(pos, remain):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(lst):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lst[pos]):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, W)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(lst, W):
    memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst))] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(pos, remain):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; memo[remain][pos] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[remain][pos]
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lst[pos]):
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain):
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memo[remain][pos] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ret
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rec(N, W)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ビット全探索&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(lst, W):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len(lst)):
        sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j):
                sofar &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; lst[j]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sofar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Longest Increasing Subarray</title>
      <link>/ja/post/longest-increasing-subarray/</link>
      <pubDate>Thu, 25 Mar 2021 13:58:26 +0900</pubDate>
      <guid>/ja/post/longest-increasing-subarray/</guid>
      <description>&lt;h2 id=&#34;longest-increasing-subarray最長増加部分列問題&#34;&gt;Longest Increasing Subarray：最長増加部分列問題&lt;/h2&gt;
&lt;p&gt;長さ$N$の数列が与えられたとき，そのうちいくつかの項を順番を変えずに取り出して部分列を作る．これら部分列のうち，それが増加列であるようなものの中で，最大の長さを求めよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 5, 2, 6, 7, 1, 4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
-&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3, 5, 6, 7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;h3 id=&#34;o2n-times-nな力技&#34;&gt;$O(2^N \times N)$な力技&lt;/h3&gt;
&lt;p&gt;考えられる部分列を全て列挙し，それぞれが増加列であるかを調べる．部分列の列挙に$O(2^N)$，ある部分列が増加列であるかを調べるのに$O(N)$かかる．&lt;/p&gt;
&lt;p&gt;再帰で全探索．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LIS&lt;/span&gt;(lst):
    subs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(pos, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(lst):
            subs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar)
        rec(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[pos]])
    rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, [])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_increasing&lt;/span&gt;(lst):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lst[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sub &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; subs:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_increasing(sub):
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, len(sub))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LIS(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ビット全探索．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LIS&lt;/span&gt;(lst):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_increasing&lt;/span&gt;(lst):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lst[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len(lst)):
        sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j):
                sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(lst[j])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_increasing(sub):
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, len(sub))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LIS(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on2で解く-dp&#34;&gt;$O(N^2)$で解く DP&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt;を「&lt;code&gt;lst[i]&lt;/code&gt;が右端となるような増加部分列の最大の長さ」とすると，&lt;code&gt;dp[i + 1]&lt;/code&gt;は「&lt;code&gt;j &amp;lt; i + 1&lt;/code&gt;かつ&lt;code&gt;lst[j] &amp;lt;= lst[i + 1]&lt;/code&gt;な&lt;code&gt;j&lt;/code&gt;についての&lt;code&gt;dp[j]&lt;/code&gt;の最大値 + 1」と更新できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LIS&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: lst[i]が右端となるような増加部分列の最大の長さ&lt;/span&gt;
    dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst))]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; lst[i]:
                dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LIS(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on2で解く-dp-1&#34;&gt;$O(N^2)$で解く DP&lt;/h3&gt;
&lt;p&gt;一つ前のと添字を逆転させる．つまり，&lt;code&gt;dp[i]&lt;/code&gt;を「長さ&lt;code&gt;i + 1&lt;/code&gt;の増加部分列のうちの最小の右端」とする．&lt;code&gt;dp[i+1]&lt;/code&gt;は&lt;code&gt;dp[i]&lt;/code&gt;より大きい最小の&lt;code&gt;lst&lt;/code&gt;要素．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LIS&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: 長さがi+1の増加部分列の最小の右端&lt;/span&gt;
    INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;)
    dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [INF &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst))]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(dp)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; dp[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[i]:
                dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(dp[j], lst[i])
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(dp)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; INF:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LIS(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on-log-nで解く-dp&#34;&gt;$O(N \log N)$で解く DP&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;dp[j]&lt;/code&gt;ごとにそこに入れるべき&lt;code&gt;lst&lt;/code&gt;要素を決めるのでなくて，&lt;code&gt;lst&lt;/code&gt;要素ごとに&lt;code&gt;dp&lt;/code&gt;のどこに入れるべきなのかを二分探索で計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; 4&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bisect &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bisect_left

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LIS&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: 長さがi+1の増加部分列の最小の右端&lt;/span&gt;
    INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;)
    dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [INF &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst))]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        dp[bisect_left(dp, lst[i])] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bisect_left(dp, INF)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(LIS(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Next Lexicographical Permutation</title>
      <link>/ja/post/next-lexicographical-permutation/</link>
      <pubDate>Thu, 25 Mar 2021 00:48:36 +0900</pubDate>
      <guid>/ja/post/next-lexicographical-permutation/</guid>
      <description>&lt;h2 id=&#34;辞書順で直後の順列を求めたい&#34;&gt;辞書順で直後の順列を求めたい&lt;/h2&gt;
&lt;p&gt;長さ$n$の配列から$n$個の要素を取り出す順列を考える．ある並びを与えられたときに，順列を辞書順に並べたときの直後の並びを求めたい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 1, 2, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 1, 3, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 1, 2, 5, 3, 3, 0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0, 1, 3, 0, 2, 3, 5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next_permutation&lt;/span&gt;(lst):
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; lst[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lst[i]:
        i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()
    i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i]
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pivot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; lst[j]:
        j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    lst[i], lst[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[j], lst[i]
    lst[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed(lst[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ref: &lt;a href=&#34;https://www.nayuki.io/page/next-lexicographical-permutation-algorithm&#34;&gt;https://www.nayuki.io/page/next-lexicographical-permutation-algorithm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Max Subarray Problem by Kadane Algorithm</title>
      <link>/ja/post/max-subarray-problem-by-kadane-algorithm/</link>
      <pubDate>Wed, 24 Mar 2021 23:19:25 +0900</pubDate>
      <guid>/ja/post/max-subarray-problem-by-kadane-algorithm/</guid>
      <description>&lt;h2 id=&#34;maximum-subarray-problem最大部分配列問題&#34;&gt;Maximum Subarray Problem：最大部分配列問題&lt;/h2&gt;
&lt;p&gt;整数配列&lt;code&gt;arr&lt;/code&gt;を与えられる．&lt;code&gt;arr&lt;/code&gt;の連続する部分配列の和のうち最大となるものの値を求めよ．&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;いくつかやり方はある．&lt;/p&gt;
&lt;h3 id=&#34;on3な力技&#34;&gt;$O(n^3)$な力技&lt;/h3&gt;
&lt;p&gt;部分配列の候補となる添字の組み合わせ全部に対して，その部分配列の和を実際に計算して最大値を出す．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# ans = 19&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [2, 5] # index&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, j):
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; lst[k]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s:
                idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i, j)
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans, idx

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;on2な力技&#34;&gt;$O(n^2)$な力技&lt;/h3&gt;
&lt;p&gt;累積和を計算しておけば&lt;code&gt;lst[i:j]&lt;/code&gt;の和を$O(1)$で計算できるので全体として$O(n^2)$にできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# ans = 19&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [2, 5] # index&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst):
    accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
        accum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accum[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(accum)
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; accum[i]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s:
                idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i, j)
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans, idx

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onな賢いやり方&#34;&gt;$O(n)$な賢いやり方&lt;/h3&gt;
&lt;p&gt;数列$a$の部分和を&lt;/p&gt;
&lt;p&gt;$$
sum(i, j) = a_i + a_{i+1} + &amp;hellip; + a_{j-1} + a_j
$$&lt;/p&gt;
&lt;p&gt;とする．ここで最後の要素が$a_j$であるような部分配列の和の最大値を$s_j$とすると，$s_j$は&lt;/p&gt;
&lt;p&gt;$$
s_j = max_{i &amp;lt; j} sum(i, j)
$$&lt;/p&gt;
&lt;p&gt;最終的に求めたい値は&lt;/p&gt;
&lt;p&gt;$$
max_{j} s_j
$$&lt;/p&gt;
&lt;p&gt;ここで，$s_{j+1}$は，&lt;/p&gt;
&lt;p&gt;$$
s_{j+1} = max(s_j + a_{j+1}, a_{j+1})
$$&lt;/p&gt;
&lt;p&gt;$a_{j+1}$と比べる理由は，「$a_{j+1}$のみからなる列」も「最後の要素が$a_{j+1}$で終わる部分列」であり，その要素の和は$a_{j+1}$だから．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# ans = 19&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [2, 5] # index&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: 最後の要素がlst[i]であるような部分列の和の最大値&lt;/span&gt;
    dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        dp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(max(dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;dp[i+1]&lt;/code&gt;を求めるのに&lt;code&gt;dp[i]&lt;/code&gt;しか使わないので配列も使わない実装も可能．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# ans = 19&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [2, 5] # index&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, max(ans &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(solve(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Permutation and Combination in Python</title>
      <link>/ja/post/permutation-combination-in-python/</link>
      <pubDate>Wed, 24 Mar 2021 22:17:39 +0900</pubDate>
      <guid>/ja/post/permutation-combination-in-python/</guid>
      <description>&lt;h2 id=&#34;順列組み合わせを-python-で求めたい&#34;&gt;順列・組み合わせを Python で求めたい&lt;/h2&gt;
&lt;p&gt;Python は偉いので，&lt;code&gt;itertools&lt;/code&gt;という便利ライブラリを使えばうんと効率の良い実装が得られる．今回は敢えて&lt;code&gt;itertools&lt;/code&gt;を使わずに書いてみる．要するに実装の練習．&lt;/p&gt;
&lt;h2 id=&#34;取り出す要素数を固定にした順列組み合わせの実装を考える&#34;&gt;取り出す要素数を固定にした順列・組み合わせの実装を考える&lt;/h2&gt;
&lt;p&gt;$n$個のものから$r$個取り出すことをいきなり考えると混乱するので，とりあえず$n$個のものから$3$個取り出すことを考える．&lt;/p&gt;
&lt;h3 id=&#34;重複を許す順列&#34;&gt;重複を許す順列&lt;/h3&gt;
&lt;p&gt;重複を許す順列は$r$回ネストした&lt;code&gt;for&lt;/code&gt;に等しい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;repeated_permutation&lt;/span&gt;(lst):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([lst[i], lst[j], lst[k]])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;順列&#34;&gt;順列&lt;/h3&gt;
&lt;p&gt;一度取り出したものは次に取り出せない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permutation&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exclude&lt;/span&gt;(lst, idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]

    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
                ex_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exclude(lst, i)
                ex_ij &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exclude(ex_i, j)
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([lst[i], ex_i[j], ex_ij[k]])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重複を許す組み合わせ&#34;&gt;重複を許す組み合わせ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;000&lt;/code&gt; -&amp;gt; &lt;code&gt;001&lt;/code&gt; -&amp;gt; &lt;code&gt;002&lt;/code&gt; -&amp;gt; &lt;del&gt;&lt;code&gt;010&lt;/code&gt;&lt;/del&gt; -&amp;gt; &lt;code&gt;011&lt;/code&gt; -&amp;gt; &amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;repeated_combination&lt;/span&gt;(lst):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(j, len(lst)):
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([lst[i], lst[j], lst[k]])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;組み合わせ&#34;&gt;組み合わせ&lt;/h3&gt;
&lt;p&gt;一度取り出したものは次に取り出せない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exclude&lt;/span&gt;(lst, idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst[:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]

    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(j, len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
                ex_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exclude(lst, i)
                ex_ij &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exclude(ex_i, j)
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([lst[i], ex_i[j], ex_ij[k]])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうとも言える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;(lst):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(lst)):
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([lst[i], lst[j], lst[k]])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;取り出す要素数をr個にした順列組み合わせの実装を考える&#34;&gt;取り出す要素数を$r$個にした順列・組み合わせの実装を考える&lt;/h2&gt;
&lt;p&gt;$r$回のネストを再帰関数で書く．&lt;/p&gt;
&lt;h3 id=&#34;重複を許す順列-1&#34;&gt;重複を許す順列&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;repeated_permutation&lt;/span&gt;(lst, r):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(lst, r, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            _recurse(lst, r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[i]])
    _recurse(lst, r, [])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;順列-1&#34;&gt;順列&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permutation&lt;/span&gt;(lst, r):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(lst, r, sofar):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            _recurse(lst[i:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[i]])
    _recurse(lst, r, [])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重複を許す組み合わせ-1&#34;&gt;重複を許す組み合わせ&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;repeated_combination&lt;/span&gt;(lst, r):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(lst, r, sofar, start_idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start_idx, len(lst)):
            _recurse(lst, r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[i]], i)
    _recurse(lst, r, [], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;組み合わせ-1&#34;&gt;組み合わせ&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;(lst, r):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(lst, r, sofar, start_idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start_idx, len(lst)):
            _recurse(lst[:i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[i]], i)
    _recurse(lst, r, [], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;(lst, r):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(lst, r, sofar, start_idx):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start_idx, len(lst)):
            _recurse(lst, r&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [lst[i]], i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    _recurse(lst, r, [], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Binary Representation of a Given Number</title>
      <link>/ja/post/binary-representation-of-a-given-number/</link>
      <pubDate>Wed, 24 Mar 2021 21:54:26 +0900</pubDate>
      <guid>/ja/post/binary-representation-of-a-given-number/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;数字を 2 進数表示にしなさい．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;再帰で解く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num_to_bits&lt;/span&gt;(num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num_to_bits(num &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(num &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str(num &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}:{}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(num, num_to_bits(num)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繰り返しで解く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num_to_bits&lt;/span&gt;(num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bits
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bits
        num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bits


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}:{}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(num, num_to_bits(num)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>All Subsets From a List in Two Ways</title>
      <link>/ja/post/all-subsets-from-a-list-in-two-ways/</link>
      <pubDate>Wed, 24 Mar 2021 21:20:40 +0900</pubDate>
      <guid>/ja/post/all-subsets-from-a-list-in-two-ways/</guid>
      <description>&lt;h2 id=&#34;配列の部分配列を全部求める&#34;&gt;配列の部分配列を全部求める&lt;/h2&gt;
&lt;p&gt;要素数$n$の配列の部分配列を全部求めたい．部分配列の総数は$2^n$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1, 2, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
-&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;1, 2, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1, 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;再帰で求める&#34;&gt;再帰で求める&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lst[i:]&lt;/code&gt;の部分配列のそれぞれに&lt;code&gt;lst[i]&lt;/code&gt;が入る・入らないの 2 択．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subsets&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [[]]
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subsets(lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [[lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ele &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; x]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(subsets(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ビット全探索&#34;&gt;ビット全探索&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;000&lt;/code&gt;，&lt;code&gt;001&lt;/code&gt;，&lt;code&gt;010&lt;/code&gt;，&lt;code&gt;011&lt;/code&gt;，&lt;code&gt;100&lt;/code&gt;，&lt;code&gt;101&lt;/code&gt;，&lt;code&gt;110&lt;/code&gt;，&lt;code&gt;111&lt;/code&gt;でどの要素を部分配列に入れるか入れないかを決める．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subsets&lt;/span&gt;(lst):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len(lst)):
        sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j):
                sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(lst[j])
        ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sub)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(subsets(lst))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Leetcode 60 Questions</title>
      <link>/ja/post/leetcode-60-questions/</link>
      <pubDate>Mon, 22 Mar 2021 12:54:36 +0900</pubDate>
      <guid>/ja/post/leetcode-60-questions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/list/xo2bgr0r/&#34;&gt;この 60 問&lt;/a&gt;を Python で解く．&lt;/p&gt;
&lt;h2 id=&#34;01-two-sum&#34;&gt;01: Two Sum&lt;/h2&gt;
&lt;p&gt;$O(n^2)$ではない答えにしたいので，どうするか．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(nums):
            complement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; complement &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [idx, table[complement]]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                table[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;02-add-two-numbers&#34;&gt;02: Add Two Numbers&lt;/h2&gt;
&lt;p&gt;再帰的に書く．再帰的に．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addTwoNumbers&lt;/span&gt;(self, l1: ListNode, l2: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(l1: ListNode, l2: ListNode, carry: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
            &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; carry &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; carry
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                next_l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
                next_l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                next_carry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
                result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _recurse(next_l1, next_l2, next_carry)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(l1, l2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;リストが「桁の大きい順」になっている場合はリストを逆転させてこの問題に帰着させるか，スタックを 2 つ使う方法がある．&lt;/p&gt;
&lt;p&gt;リストを逆転させる解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addTwoNumbers&lt;/span&gt;(self, l1: ListNode, l2: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
            reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reverse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next)
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reversed_head

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(l1, l2, carry):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; carry &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; carry
            val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None)
            l1_next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; None
            l2_next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; None
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rec(l1_next, l2_next, val &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reverse(rec(reverse(l1), reverse(l2), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2 つのスタックを使う解法：スタックを使うことで数字を小さい桁から扱えるようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addTwoNumbers&lt;/span&gt;(self, l1: ListNode, l2: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        stack1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        stack2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; l1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            stack1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            l1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; l2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            stack2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            l2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next

        carry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack1) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; len(stack2) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; carry &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; carry
            val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; stack1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; stack1 &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; stack2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; stack2 &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            carry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
            head_new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head)
            head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head_new
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;03-longest-substring-without-repeating-characters&#34;&gt;03: Longest Substring Without Repeating Characters&lt;/h2&gt;
&lt;p&gt;題意は「与えられた文字列に含まれる，ユニークな文字による連続する部分文字列の中で，最長のものの長さを求めよ」&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;これはしゃくとり法．すでに見たことのある文字が出てきた次点で，それを含む範囲を伸ばしても答えにならないので，走査範囲の左端を右端の隣に更新する．$O(n)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLongestSubstring&lt;/span&gt;(self, s: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# しゃくとり法&lt;/span&gt;
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        max_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict() &lt;span style=&#34;color:#75715e&#34;&gt;# {char: occurrence idx}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; curr, char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(s):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; seen[char]:
                start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seen[char] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                max_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_len, curr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            seen[char] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_len
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;04-zigzag-conversion&#34;&gt;04: ZigZag Conversion&lt;/h2&gt;
&lt;p&gt;観察する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;      -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;    ...
row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;      -&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&amp;gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt;(self, s: str, numRows: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; numRows &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
        interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; numRows &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(numRows):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row, len(s), interval):
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s[index]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; (row &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; numRows &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (interval &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s):
                        ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s[index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (interval &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;05-string-to-integer-atoi&#34;&gt;05: String to Integer (atoi)&lt;/h2&gt;
&lt;p&gt;一文字ずつ見ていく．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myAtoi&lt;/span&gt;(self, s: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
        int_part &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 123.4...&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(int_part):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 12345+...&lt;/span&gt;
                int_part &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; char
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# char is alphabet&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        digit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; int_part[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#-123&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# +123&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int(char) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;digit)
                digit &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;06-valid-parentheses&#34;&gt;06: Valid Parentheses&lt;/h2&gt;
&lt;p&gt;閉じカッコに対応するのは，最直近の開きカッコなので，FIFO．だから stack でうまく書ける．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValid&lt;/span&gt;(self, s: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;]:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(p)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
                q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;]:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[]&amp;#34;&lt;/span&gt;]:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(q)
                        stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(p)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;07-generate-parentheses&#34;&gt;07: Generate Parentheses&lt;/h2&gt;
&lt;p&gt;$n$個の&lt;code&gt;()&lt;/code&gt;を正しく並べるときの全通りを出力する．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;まず左カッコが足りないから並べて，左カッコ書きすぎたら右カッコ書いて閉じなきゃ&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateParenthesis&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[str]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(left, right, sofar):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n:
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n:
                rec(left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left:
                rec(left, right &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)
        rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;08-next-permutation&#34;&gt;08: Next Permutation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0125330&lt;/code&gt;の直後の順列は&lt;code&gt;0130235&lt;/code&gt;．直後の順列は後半だけいじりたい．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPermutation&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Do not return anything, modify nums in-place instead.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; nums[i]:
            i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i]
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pivot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; nums[j]:
            j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        nums[i], nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[j], nums[i]
        nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed(nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;09-search-in-rotated-sorted-array&#34;&gt;09: Search in Rotated Sorted Array&lt;/h2&gt;
&lt;p&gt;昇順になっているときは二分探索を使ってほしいという出題意図を汲み取りたい．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(self, A: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(A)
        left, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right:
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; A[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; A[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; A[left]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; A[left] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; A[mid]:
                    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; A[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; A[right]:
                    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;めぐる式二分探索に落とし込むことで解くほうが頭が整理されて良い．ここでは次の図のように&lt;code&gt;is_ok(mid)&lt;/code&gt;を設計している．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;09.png&#34; data-caption=&#34;is_ok(mid)の挙動&#34;&gt;
&lt;img src=&#34;09.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;code&gt;is_ok(mid)&lt;/code&gt;の挙動
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; nums[ok] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; target:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;10-search-insert-position&#34;&gt;10: Search Insert Position&lt;/h2&gt;
&lt;p&gt;「要素が昇順に並んでいる」と来れば&amp;hellip;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;要素が昇順に並んでいるので，二分探索．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchInsert&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bisect_left(nums, target)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;めぐる式二分探索ではこうなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchInsert&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid]

        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;別解として一つずつ見ていくのでも解ける．$O(n)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchInsert&lt;/span&gt;(self, nums: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ele:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pos
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                pos &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;11-combination-sum&#34;&gt;11: Combination Sum&lt;/h2&gt;
&lt;p&gt;全通りがいくつあるのかはわからないけど，猪突猛進に調べる．&lt;code&gt;candidates[:]&lt;/code&gt;を使う場合，&lt;code&gt;candidates[1:]&lt;/code&gt;を使う場合，&lt;code&gt;candidates[2:]&lt;/code&gt;を使う場合&amp;hellip;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combinationSum&lt;/span&gt;(self, candidates: List[int], target: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(nums, remain, sofar):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
                rec(nums[i:], remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums[i], sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [nums[i]])
        rec(candidates, target, [])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;12-permutations&#34;&gt;12: Permutations&lt;/h2&gt;
&lt;p&gt;集合$A$から一つ選んで，残りから一つ選んで&amp;hellip;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permute&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(nums, sofar):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sofar)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
                _recurse(nums[:i]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;nums[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [nums[i]])
        _recurse(nums, [])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;13-group-anagrams&#34;&gt;13: Group Anagrams&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;groupAnagrams&lt;/span&gt;(self, strs: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[str]]:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; strs:
            ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(sorted(s))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ss &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                table[ss] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [s]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                table[ss]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(s)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;14-powx-n&#34;&gt;14: Pow(x, n)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;myPow = pow&lt;/code&gt;は流石にチートか．出題意図は繰り返し自乗法．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;再帰で書いた答え&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myPow&lt;/span&gt;(self, x: float, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; float:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;myPow(x, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;myPow(x, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;myPow(x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x, n &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繰り返しで書いた答え&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myPow&lt;/span&gt;(self, x: float, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; float:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; x
            n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; x
            x &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; x
            n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;15-maximum-subarray&#34;&gt;15: Maximum Subarray&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;最大部分配列問題：与えられた配列に対して，その部分配列のうち要素の和が最大となるときのその最大和を求める問題&lt;/p&gt;
&lt;p&gt;入力： ${a_i}_{i=0}^{n-1}$&lt;/p&gt;
&lt;p&gt;出力： $x = \max \sum_{k=i}^j a_k \mathrel{\bigg|} 0\leq i \leq j \lt n$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$i$，$j$について全探索すれば$O(n^3)$：$x = \max_{0\leq i &amp;lt; n} \max_{i \leq j &amp;lt; n} \sum_{k=i}^j a_k$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sum_{k=i}^j a_k$を累積和を使って求めれば$O(n^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$i$と$j$の最大値を取る順番を逆にして$x = \max_{0\leq j &amp;lt; n} \max_{0 \leq i &amp;lt; j} \sum_{k=i}^j a_k$と変形すると$s_j = \max_{0 \leq i &amp;lt; j} \sum_{k=i}^j a_k$として$x = \max_{0\leq j &amp;lt; n} s_j$となって，$s_j$について以下が成立するので$O(n)$．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{align}
s_{j} &amp;amp;= \max_{0 \leq i \leq j}  \sum_{k=i}^j a_k\\\&lt;br&gt;
&amp;amp;= \max (\max_{0 \leq i \leq j-1} \sum_{k=i}^j a_k, \max_{j \leq i \leq j} \sum_{k=i}^j a_k) \\\&lt;br&gt;
&amp;amp;= \max (\max_{0 \leq i \leq j-1} \sum_{k=i}^{j-1} a_k + a_j, a_j) \\\&lt;br&gt;
&amp;amp;= \max( s_{j-1} + a_j, a_j)
\end{align}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubArray&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[j], nums[j])
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, s)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接的に&lt;code&gt;dp&lt;/code&gt;で書くとこうなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubArray&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: nums[i]が右端要素となるような連続する部分配列の和の最大値&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i+1] = max(dp[i] + nums[i], nums[i])&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-inf&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            dp[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], nums[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;16-unique-paths&#34;&gt;16: Unique Paths&lt;/h2&gt;
&lt;p&gt;中学受験の道の数え上げ問題&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uniquePaths&lt;/span&gt;(self, m: int, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j]: number of unique paths to (i, j)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j] = dp[i][j-1] + dp[i-1][j]&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, m, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;17-unique-paths-ii&#34;&gt;17: Unique Paths II&lt;/h2&gt;
&lt;p&gt;これも中学受験で頻出のやつ．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uniquePathsWithObstacles&lt;/span&gt;(self, obstacleGrid: List[List[int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; obstacleGrid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(obstacleGrid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, H):
            obstacleGrid[h][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obstacleGrid[h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; obstacleGrid[h][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, W):
            obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; obstacleGrid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][w])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, W):
                obstacleGrid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (obstacleGrid[h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; obstacleGrid[h][w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; obstacleGrid[h][w])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obstacleGrid[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;18-subsets&#34;&gt;18: Subsets&lt;/h2&gt;
&lt;p&gt;全探索&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;再帰で書く：$n$個の数字から得られるすべての部分配列は，$n-1$個の数字から得られるすべての部分配列のそれぞれに$n$個目の数字を入れるか入れないかで計算できる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subsets&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(nums):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [[]]
            sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _recurse(nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sub &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sub]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(nums)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;bit 全探索で書く&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subsets&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len(nums)):
            sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j:
                    sub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(nums[j])
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sub)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;繰り返しで書く&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subsets&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [[num] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sub &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sub &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ans]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;19-remove-duplicates-from-sorted-list-ii&#34;&gt;19: Remove Duplicates from Sorted List II&lt;/h2&gt;
&lt;p&gt;一つずつ見ていく．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deleteDuplicates&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        dummy_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head)
        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dummy_head
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dummy_head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;20-remove-duplicates-from-sorted-list&#34;&gt;20: Remove Duplicates from Sorted List&lt;/h2&gt;
&lt;p&gt;一個飛ばし&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deleteDuplicates&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;21-validate-binary-search-tree&#34;&gt;21: Validate Binary Search Tree&lt;/h2&gt;
&lt;p&gt;inorder で頂点に訪問したときに昇順になっていれば正しい二分探索木&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValidBST&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        inordered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_inorder_traversal&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                _inorder_traversal(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            inordered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                _inorder_traversal(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        _inorder_traversal(root)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(inordered)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inordered[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; inordered[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;左の部分木の最大値 &amp;lt; このノードの値 &amp;lt; 右の部分木の最小値&lt;/code&gt;を再帰的に確かめる方法もある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isValidBST&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_isValidBST&lt;/span&gt;(root, larger_than, less_than):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; larger_than &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; less_than &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _isValidBST(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, larger_than, min(less_than, root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; _isValidBST(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, max(larger_than, root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val), less_than)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _isValidBST(root, float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-inf&amp;#39;&lt;/span&gt;), float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;22-binary-tree-level-order-traversal&#34;&gt;22: Binary Tree Level Order Traversal&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levelOrder&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_levelOrder&lt;/span&gt;(root, lsts, level):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lsts) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; level:
                lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
                lsts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(lst)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lsts[level]

            lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
            _levelOrder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, lsts, level&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            _levelOrder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, lsts, level&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lsts
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _levelOrder(root, [], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BFS っぽくもできる．&lt;code&gt;suspended&lt;/code&gt;に&lt;code&gt;level&lt;/code&gt;段目の頂点のみが全部入っているように更新する．&lt;code&gt;suspended&lt;/code&gt;に追加しながら次の頂点に行かないようにする．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;levelOrder&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root)

        lsts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lsts) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; level:
                lsts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([])
            next_suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; suspended:
                lsts[level]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
            suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_suspended
            level &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lsts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;23-binary-tree-zigzag-level-order-traversal&#34;&gt;23: Binary Tree Zigzag Level Order Traversal&lt;/h2&gt;
&lt;p&gt;一つ前のをちょっとだけイジる．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zigzagLevelOrder&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root)

        lsts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        order_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lsts) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; level:
                lsts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([])
            next_suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; suspended:
                lsts[level]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_suspended
            lsts[level] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lsts[level][::order_flag]
            order_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;order_flag
            level &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lsts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;24-maximum-depth-of-binary-tree&#34;&gt;24: Maximum Depth of Binary Tree&lt;/h2&gt;
&lt;p&gt;木の深さは葉ノードから戻ってきながら計算する．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxDepth&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(_recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left), _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;25-construct-binary-tree-from-preorder-and-inorder-traversal&#34;&gt;25: Construct Binary Tree from Preorder and Inorder Traversal&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;preorder&lt;/code&gt;から&lt;code&gt;inorder&lt;/code&gt;を左右に分割できる．これを繰り返す．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildTree&lt;/span&gt;(self, preorder: List[int], inorder: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; TreeNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(inorder) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(preorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
            root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inorder[idx])
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildTree(preorder, inorder[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:idx])
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buildTree(preorder, inorder[idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;26-convert-sorted-array-to-binary-search-tree&#34;&gt;26: Convert Sorted Array to Binary Search Tree&lt;/h2&gt;
&lt;p&gt;左右の部分木の高さが同じくらいにしたいので，だいたい大きさ的に真ん中ぐらいの要素から根にする．要素がソートされているのでインデックスで真ん中辺りから根を作る．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedArrayToBST&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; TreeNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(nums, low, high):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; high &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; low:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
            middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nums[middle])
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _recurse(nums, low, middle&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _recurse(nums, middle&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, high)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(nums, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;27-minimum-depth-of-binary-tree&#34;&gt;27: Minimum Depth of Binary Tree&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minDepth&lt;/span&gt;(self, root: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(root):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; min(_recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left), _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _recurse(root)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;28-path-sum&#34;&gt;28: Path Sum&lt;/h2&gt;
&lt;p&gt;全探索&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;再帰を使った DFS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasPathSum&lt;/span&gt;(self, root: TreeNode, targetSum: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(root, remaining):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; remaining:
                results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(True)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            remaining &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
            _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, remaining)
            _recurse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, remaining)
        _recurse(root, targetSum)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; any(results)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;stack を使った DFS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasPathSum&lt;/span&gt;(self, root: TreeNode, targetSum: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root, root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            u, sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sofar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;queue を使った BFS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasPathSum&lt;/span&gt;(self, root: TreeNode, targetSum: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root, root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            u, sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sofar &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; targetSum:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, sofar &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;29-best-time-to-buy-and-sell-stock&#34;&gt;29: Best Time to Buy and Sell Stock&lt;/h2&gt;
&lt;p&gt;最小の日を保存しながら舐める．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxProfit&lt;/span&gt;(self, prices: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        profit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        min_sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prices[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(prices), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            profit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(profit, prices[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min_sofar)
            min_sofar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(min_sofar, prices[i])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; profit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;問題をちょっとだけ弄って，前日からの値段の差を格納した配列が渡されて利益の最大値を求めようとすると，これは最大部分配列和問題．&lt;/p&gt;
&lt;p&gt;Kadane アルゴリズムで解ける．Kadane アルゴリズムは全探索の順序を替えることで前日までの最大利益を使って当日までの最大利益を低数時間で計算できて，全体として$O(n)$になるというやつ．DP．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxProfit&lt;/span&gt;(self, priceDiff: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        max_profit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(priceDiff), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            max_current &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (priceDiff[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; priceDiff[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, max_current)
            max_profit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_profit, max_current)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_profit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;30-best-time-to-buy-and-sell-stock-ii&#34;&gt;30: Best Time to Buy and Sell Stock II&lt;/h2&gt;
&lt;p&gt;今日より明日のほうが高値なら，今日買って明日売ろう．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxProfit&lt;/span&gt;(self, prices: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, prices[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; prices[i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(prices) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;31-word-ladder&#34;&gt;31: Word Ladder&lt;/h2&gt;
&lt;p&gt;グリッドグラフの文字列版だと思えれば大丈夫．グリッドグラフのマス目に 1 文字だけ違う文字列を書き込んでグラフ上のマス目を踏んでいくイメージ．言うなれば 26 次元グリッドグラフか．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ladderLength&lt;/span&gt;(self, beginWord: str, endWord: str, wordList: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        not_visited_yet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(wordList)
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

        not_visited_yet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(beginWord)
        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((beginWord, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            word, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; endWord:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; length
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(word)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;&lt;/span&gt;:
                    next_candidate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[:i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; word[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; next_candidate &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; not_visited_yet:
                        not_visited_yet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(next_candidate)
                        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((next_candidate, length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;32-word-break&#34;&gt;32: Word Break&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wordDict&lt;/code&gt;内の文字列の重複を許す組み合わせを全部求めて&lt;code&gt;s&lt;/code&gt;と一致するかを調べても$O(2^n)$で原理的には解けるが&lt;code&gt;1 &amp;lt;= len(wordDict) &amp;lt;= 1000&lt;/code&gt;なので間に合わない．
そこで&lt;code&gt;s&lt;/code&gt;について考える．「$i$文字目より前の部分文字列&lt;code&gt;s[:i]&lt;/code&gt;を実現できるか」は「$j$（$j &amp;lt; i$）文字目より前の部分文字列&lt;code&gt;s[:j]&lt;/code&gt;を実現できて，かつ残りの&lt;code&gt;s[j:i]&lt;/code&gt;が&lt;code&gt;wordDict&lt;/code&gt;内にあるか」で求まる．DP．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordBreak&lt;/span&gt;(self, s: str, wordDict: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: whether s[:i] can be build from words in wordDict&lt;/span&gt;
        words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(wordDict) &lt;span style=&#34;color:#75715e&#34;&gt;# for lookup in O(1)&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [True]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(s)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            dp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [any(dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; s[j:i] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; words &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i))]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[len(s)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;「&lt;code&gt;wordDict&lt;/code&gt;内にある最長の文字列の長さ」以上の&lt;code&gt;s&lt;/code&gt;部分文字列が&lt;code&gt;wordDict&lt;/code&gt;内にあるはずがないのでそれを省くと効率が良くなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordBreak&lt;/span&gt;(self, s: str, wordDict: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: whether s[:i] can be build from words in wordDict&lt;/span&gt;
        words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(wordDict) &lt;span style=&#34;color:#75715e&#34;&gt;# for lookup in O(1)&lt;/span&gt;
        max_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(map(len, wordDict))
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [True]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(s)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            dp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [any(dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; s[j:i] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; words &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; max_len), i))]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[len(s)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;33-linked-list-cycle&#34;&gt;33: Linked List Cycle&lt;/h2&gt;
&lt;p&gt;二人走らせる．出逢えばループあり．足の早いほうが崖から落ちればループなし．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = None&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasCycle&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; faster:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;34-linked-list-cycle-ii&#34;&gt;34: Linked List Cycle II&lt;/h2&gt;
&lt;p&gt;二人走らせる．1 周回差つけられたところで初めて出会う．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = x&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = None&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;detectCycle&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        has_loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; faster:
                has_loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; has_loop:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; faster:
                slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
                faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slower
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;35-find-minimum-in-rotated-sorted-array&#34;&gt;35: Find Minimum in Rotated Sorted Array&lt;/h2&gt;
&lt;p&gt;二分探索っぽいことをする．昇順になったものを回転させるときの折れ線グラフを描く真ん中と左右の比較でどこに最小値があるかがわかる．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMin&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        left, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right:
            middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[middle] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[right]:
                right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; middle
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; middle &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums[left]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;元の配列が昇順に並んであるので「先頭要素より小さくなる最小のインデックスの位置にある要素がほしい」と問題を言い換えられれば，めぐる式二分探索に落とし込める．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMin&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums[ok] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(nums) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;36-house-robber&#34;&gt;36: House Robber&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[2,1,1,2]&lt;/code&gt;というパターンを忘れてはならない．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt;：&lt;code&gt;i&lt;/code&gt;番目までの家から盗めるお金の最大値
&lt;code&gt;dp[i] = max(dp[i-2] + nums[i], dp[i-1])&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rob&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: nums[:i+1]での盗めるお金の最大値&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i] = max(dp[i-1], dp[i-2] + nums[i])&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(nums)
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, len(nums)):
            dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;37-number-of-islands&#34;&gt;37: Number of Islands&lt;/h2&gt;
&lt;p&gt;グリッドグラフの全探索．拙著記事は&lt;a href=&#34;https://zakimal.github.io/ja/post/graph-traversal/&#34;&gt;ここ&lt;/a&gt;．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;queue を使う BFS の答え&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numIslands&lt;/span&gt;(self, grid: List[List[str]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h, w) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, w))
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((h, w))
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    (_h, _w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
                        next_h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
                        next_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; next_h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; next_w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[next_h][next_w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (next_h, next_w) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                            has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((next_h, next_w))
                            suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((next_h, next_w))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;stack を使う DFS の答え&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numIslands&lt;/span&gt;(self, grid: List[List[str]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h, w) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, w))
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((h, w))
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                    (_h, _w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
                        next_h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
                        next_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; next_h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; next_w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[next_h][next_w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (next_h, next_w) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                            has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((next_h, next_w))
                            suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((next_h, next_w))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再気をつかう DFS の答え&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numIslands&lt;/span&gt;(self, grid: List[List[str]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(h, w):
            has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, w))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
                nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
                nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (nh, nw) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                    dfs(h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh, w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h, w) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                dfs(h, w)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;38-reverse-linked-list&#34;&gt;38: Reverse Linked List&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;遅い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseList&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
        reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverseList(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next)
        reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ListNode(val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reversed_head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;賢く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseList&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head
        reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverseList(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next)
        head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reversed_head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繰り返しで．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class ListNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, next=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.next = next&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseList&lt;/span&gt;(self, head: ListNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ListNode:
        prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
            curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev
            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr
            curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;39-minimum-size-subarray-sum&#34;&gt;39: Minimum Size Subarray Sum&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;力技なら部分列を全部取って計算するので$O(n^3)$で間に合わない．&lt;/p&gt;
&lt;p&gt;累積和を使って部分列の和を$O(1)$で求めて全体で$O(n^2)$．ただこれだと Python だと間に合わない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
            accum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accum[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num)
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i, len(nums), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; added:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, (j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部分和の大きさについて，部分列の長さが長くなればなるほど部分和は単調に増加するので，&lt;code&gt;target&lt;/code&gt;以上となる最小のインデックスは二分探索で探せる．全体としては$O(n \log n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
            accum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(accum[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(lst, mid, key):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; lst[mid]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(lst, key):
            ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lst)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng):
                mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(lst, mid, key):
                    ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok

        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            accum_j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; accum[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums[i]
            j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binary_search(accum[i:], accum_j) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(accum):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, (j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;もっと賢いやり方がある．部分列の和は，「部分列が長ければ長いほど大きくなる」ので，一度部分列の和が&lt;code&gt;target&lt;/code&gt;以上になったらそれ以上その部分列を伸ばして探しても答えに関係ない．部分列の末端の位置が早々に確定できるので，部分列の先頭を回すだけで求まる．$O(n)$．これは世の中では尺取法と呼ばれているそうだ．英語では sliding window と呼ばれているのか？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minSubArrayLen&lt;/span&gt;(self, target: int, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)
        left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            accum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; nums[right]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; accum:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                accum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; nums[left]
                left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;40-house-robber-ii&#34;&gt;40: House Robber II&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;&lt;code&gt;nums[0]&lt;/code&gt;と&lt;code&gt;nums[-1]&lt;/code&gt;を同時に襲えないので，&lt;code&gt;nums[1:]&lt;/code&gt;を対象にしたときと&lt;code&gt;nums[:-1]&lt;/code&gt;を対象にしたときを別個に計算して大きい方を取ればいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rob&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_rob&lt;/span&gt;(nums):
            &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: nums[:i+1]までで盗めるお金の最大値&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(nums)
            dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
            dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, len(nums)):
                dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(_rob(nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]), _rob(nums[:len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;41-meeting-rooms&#34;&gt;41: Meeting Rooms&lt;/h2&gt;
&lt;p&gt;複数の MTG の開始時刻と終了時刻が与えられるとき，全ての MTG 予定がダブらないかどうかを判定せよ．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for an interval&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class Interval(object):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, s=0, e=0):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.start = s&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.end = e&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canAttendMeetings&lt;/span&gt;(self, intervals: List[Interval]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        intervals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(intervals) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; intervals[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; intervals[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;42-meeting-rooms-ii&#34;&gt;42: Meeting Rooms II&lt;/h2&gt;
&lt;p&gt;複数の MTG の開始時刻と終了時刻が与えられるとき，必要最小限の MTG 部屋の数を計算せよ．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for an interval&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class Interval(object):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, s=0, e=0):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.start = s&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.end = e&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minMeetingRooms&lt;/span&gt;(self, intervals: List[Interval]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        intervals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start)
        heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mtg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; intervals:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(heap) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; heap[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mtg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start:
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(heap)
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(heap, mtg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(heap, mtg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;end)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(heap)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;43-paint-fence&#34;&gt;43: Paint Fence&lt;/h2&gt;
&lt;p&gt;$N$本の柱を$K$色で塗り分ける．このとき，連続して同じ色の柱は$2$本より多くなってはならない．塗り分け方の総数を求めよ．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;柱を左から右に塗っていくことを考える．左から&lt;code&gt;pos - 2&lt;/code&gt;，&lt;code&gt;pos - 1&lt;/code&gt;，&lt;code&gt;pos&lt;/code&gt;の位置にある柱の色の塗り方は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;code&gt;pos - 2&lt;/code&gt;，&lt;code&gt;pos - 1&lt;/code&gt;が連続して同じ色 X，&lt;code&gt;pos&lt;/code&gt;が X 以外」で&lt;code&gt;pos&lt;/code&gt;に使える色は$K - 1$色&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;pos - 2&lt;/code&gt;が色 X，&lt;code&gt;pos - 1&lt;/code&gt;，&lt;code&gt;pos&lt;/code&gt;が連続して X 以外の色」で&lt;code&gt;pos&lt;/code&gt;に使える色は$K - 1$色&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numWays&lt;/span&gt;(self, n: int, k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; k
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            reteurn k &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: 左からi番目までの柱の塗り分け方&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, k, k &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n):
            dp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [(dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[n]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;44-move-zeroes&#34;&gt;44: Move Zeroes&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;moveZeroes&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Do not return anything, modify nums in-place instead.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        last_non_zero_at &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(nums), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                nums[last_non_zero_at], nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[i], nums[last_non_zero_at]
                last_non_zero_at &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;非$0$要素の数をカウントというやり方でもいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;moveZeroes&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; None:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Do not return anything, modify nums in-place instead.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        non_zero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                nums[non_zero] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num
                non_zero &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(non_zero, len(nums)):
            nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;45-longest-increasing-subsequence&#34;&gt;45: Longest Increasing Subsequence&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;力技でやるなら全ての部分列を取り上げて長さの最小値を求める．$O(2^n)$．&lt;/p&gt;
&lt;p&gt;再帰を使って全探索．当然 TLE．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(seq):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(seq)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seq[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; seq[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

        lens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_recurse&lt;/span&gt;(pos, seq):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(nums):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check(seq):
                    lens&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(len(seq))
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            _recurse(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, seq)
            _recurse(pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, seq &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [nums[pos]])

        _recurse(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, [])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(lens)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bit 全探索．これも当然 TLE．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(seq):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(seq)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; seq[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; seq[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len(nums)):
            seq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j):
                    seq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(nums[j])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check(seq):
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, len(seq))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DP で解くと$O(n^2)$&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt;：&lt;code&gt;nums[i]&lt;/code&gt;で終わる最長部分増加列の長さ
&lt;code&gt;dp[i]&lt;/code&gt;は&lt;code&gt;dp[0]&lt;/code&gt;，&lt;code&gt;dp[1]&lt;/code&gt;，&lt;code&gt;dp[2]&lt;/code&gt;，&amp;hellip;&lt;code&gt;dp[i-1]&lt;/code&gt;を使って計算できる．&lt;code&gt;dp[i]&lt;/code&gt;は「&lt;code&gt;nums[i]&lt;/code&gt;が&lt;code&gt;nums[j]&lt;/code&gt;以上であるような&lt;code&gt;j&lt;/code&gt;の中での最大の&lt;code&gt;dp[j]&lt;/code&gt;に 1 足したもの」&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]:
        dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: nums[i]で終わる最大増加部分列の長さ&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i] = {&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     nums[j] &amp;lt; nums[i]を満たすようなj(0 &amp;lt; j &amp;lt; i)に対して&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     最大のdp[j] + 1&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums))]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 長さ1の増加部分列：[nums[i]]&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]:
                    dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添字を逆転させた DP を考えると$O(n \log n)$で解ける．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt;：長さ&lt;code&gt;i + 1&lt;/code&gt;の増加部分列の右端要素の最小値
全ての部分列を取り出して&lt;code&gt;dp&lt;/code&gt;を埋めたあとのことを考えると，&lt;code&gt;dp&lt;/code&gt;は単調に増加するような数列になっているはず．これは別に全ての部分列を列挙し終わってからでなくても，要素を一つずつ見て最適な&lt;code&gt;dp&lt;/code&gt;の位置に置くことでも得ることができる．つまり，要素を一つずつ見ながら，二分探索でその要素が入る位置を求めて&lt;code&gt;dp&lt;/code&gt;を求めることができる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: minimum of the last element of an increasing subsequence which length is i+1&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            dp[bisect_left(dp, num)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bisect_left(dp, float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二分探索を自分で実装したらこう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: 長さi+1の増加部分列の終端要素の最小値&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(nums, key):
            ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(nums)
            ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nums[mid]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
                mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                    ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            dp[binary_search(dp, num)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; binary_search(dp, float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;46-coin-change&#34;&gt;46: Coin Change&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coinChange&lt;/span&gt;(self, coins: List[int], amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j]: i番目までのコインを使ってj円を実現するときの最小枚数&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i][j] = min(dp[i-1][j], dp[i][j-coins[i]] + 1)&lt;/span&gt;
        coins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; coins
        INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[INF &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(coins))]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(coins)):
            dp[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(coins)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coins[i]:
                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j], dp[i][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coins[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; INF &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DP 配列は二次元でなくても大丈夫だった．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coinChange&lt;/span&gt;(self, coins: List[int], amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#75715e&#34;&gt;# dp[i]: i円支払うときの最小枚数&lt;/span&gt;
        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(amount&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, amount&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min([dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coin] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coin &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coin &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coins]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[amount] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dp[amount] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inf&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;47-number-of-connected-components-in-an-undirected-graph&#34;&gt;47: Number of Connected Components in an Undirected Graph&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;問題文が見れないので標準入力経由でグラフを入力されたと想定して解く．ある頂点から始める DFS を．未訪問の頂点がなくなるまで繰り返す．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# graph:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#       0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     / | \&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    1--2  3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#          | \&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#          4  6&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    5--7&lt;/span&gt;

N, M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M):
    u, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())
    G[u]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
    G[v]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connected_component&lt;/span&gt;(graph):
    cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(graph)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
            cc &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [n]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[u]:
                    suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cc
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(connected_component(G))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;48-top-k-frequent-elements&#34;&gt;48: Top K Frequent Elements&lt;/h2&gt;
&lt;p&gt;大きい順に$K$個，小さい順に$K$個は色々やり方がある．拙著は&lt;a href=&#34;https://zakimal.github.io/ja/post/find-k-th-smallest-elements/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;素直に書いても通る．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;topKFrequent&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                table[num] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                table[num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        ordered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())
        ordered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], reverse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ordered[:k]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;heapq.nlargest&lt;/code&gt;を使う．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;topKFrequent&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(freq, num) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num, freq &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Counter(nums)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [num &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nlargest(k, cnt)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/top-k-frequent-words/&#34;&gt;この問題&lt;/a&gt;が復習になる．&lt;/p&gt;
&lt;/details&gt;
&lt;h2 id=&#34;49-intersection-of-two-arrays&#34;&gt;49: Intersection of Two Arrays&lt;/h2&gt;
&lt;p&gt;python が偉い．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;intersection&lt;/span&gt;(self, nums1: List[int], nums2: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(set(nums1)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intersection(set(nums2)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;50-find-k-pairs-with-smallest-sums&#34;&gt;50: Find K Pairs with Smallest Sums&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;力技 1：テーブル全部計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sorted(itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(nums1, nums2), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum)[:k]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;力技 2：テーブル全部計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map(list, sorted(itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(nums1, nums2), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum)[:k])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;力技 3：generator を使って必要な分だけ計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map(list, heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nsmallest(k, itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(nums1, nums2), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;力技 4：これも generator&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nsmallest(k, ([u, v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums1 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums2), key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sum)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テーブルを 1 行ごと計算する generator&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        streams &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; u: ([u&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;v, u, v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums2), nums1)
        stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;streams)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [ret[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;islice(stream, k)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テーブルの左端の方だけ欲しいというのを優先度付きキューを使ってうまく実装する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kSmallestPairs&lt;/span&gt;(self, nums1: List[int], nums2: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
        queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(i, j):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(nums1) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(nums2):
                heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(queue, [nums1[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums2[j], i, j])
        push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(queue) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; len(ans) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k:
            _, i, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(queue)
            ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([nums1[i], nums2[j]])
            push(i, j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                push(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;51-first-unique-character-in-a-string&#34;&gt;51: First Unique Character in a String&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstUniqChar&lt;/span&gt;(self, s: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(s):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s[:idx] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; idx
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;52-is-subsequence&#34;&gt;52: Is Subsequence&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;iter&lt;/code&gt;化することで，見つかるまで文字を吐き出すイテレータを作る．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubsequence&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter(t)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; t:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubsequence&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter(t)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; all(char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; t &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;53-subarray-sum-equals-k&#34;&gt;53: Subarray Sum Equals K&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;力技．$O(n^3)$．TLE．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subarraySum&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                subsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[start:end]:
                    subsum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; subsum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;累積和を使って&lt;code&gt;subsum&lt;/code&gt;を求めて$O(n^2)$．TLE．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subarraySum&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        accum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            accum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [accum[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                subsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accum[end] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; accum[start]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; subsum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;subsum&lt;/code&gt;を求めながら添え字を回す．$O(n^2)$．TLE．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subarraySum&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(nums)):
            subsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start, len(nums)):
                subsum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; nums[end]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; subsum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
                    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結局部分列の個数だけカウントしたいのであれば，部分列の最初と最後のインデックスはいらなくて，合計がいくらになる部分列が何個あるかが重要．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subarraySum&lt;/span&gt;(self, nums: List[int], k: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        subsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict() &lt;span style=&#34;color:#75715e&#34;&gt;# subsum: freq&lt;/span&gt;
        table[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:
            subsum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; num
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; subsum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; table[subsum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k]
            table[subsum] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(subsum, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;54-merge-two-binary-trees&#34;&gt;54: Merge Two Binary Trees&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# class TreeNode:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.val = val&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.left = left&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         self.right = right&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mergeTrees&lt;/span&gt;(self, root1: TreeNode, root2: TreeNode) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; TreeNode:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root2
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root2 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root1
        root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
        root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mergeTrees(root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
        root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mergeTrees(root1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, root2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;55-max-area-of-island&#34;&gt;55: Max Area of Island&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;DFS で全探索．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAreaOfIsland&lt;/span&gt;(self, grid: List[List[int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;traverse&lt;/span&gt;(h, w):
            area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
            suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((h, w))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                h_, w_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h_, w_))
                area &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
                    nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h_ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
                    nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w_ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (nh, nw) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((nh, nw))
                        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((nh, nw))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; area

        max_area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                    area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; traverse(h, w)
                    max_area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_area, area)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_area
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BFS で全探索&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAreaOfIsland&lt;/span&gt;(self, grid: List[List[int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;traverse&lt;/span&gt;(h, w):
            area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
            suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((h, w))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                h_, w_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h_, w_))
                area &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
                    nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h_ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh
                    nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w_ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (nh, nw) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; grid[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((nh, nw))
                        suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((nh, nw))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; area

        max_area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                    area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; traverse(h, w)
                    max_area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_area, area)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_area
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再帰で DFS．再帰関数は地点&lt;code&gt;(i, j)&lt;/code&gt;を端点とした土地の面積を返す．上下左右の土地はつながっていないので上下左右から始めた土地の面積の合計に 1 足せば良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAreaOfIsland&lt;/span&gt;(self, grid: List[List[int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid)
        W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(grid[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;area_from&lt;/span&gt;(h, w):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; h) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; w) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (h, w) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; grid[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((h, w))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum(area_from(h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh, w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dh, dw) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(area_from(h, w) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(H) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(W))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;56-kth-largest-element-in-a-stream&#34;&gt;56: Kth Largest Element in a Stream&lt;/h2&gt;
&lt;p&gt;大きい方から数えて$k$番目の要素は，昇順に並ぶ長さ$k$の優先度付きキューの先頭．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KthLargest&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, k: int, nums: List[int]):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
        heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heapify(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue):
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(self, val: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;k:
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue, val)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; val:
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappop(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue)
            heapq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;heappush(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue, val)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]


&lt;span style=&#34;color:#75715e&#34;&gt;# Your KthLargest object will be instantiated and called as such:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# obj = KthLargest(k, nums)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# param_1 = obj.add(val)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;57-split-bst&#34;&gt;57: Split BST&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
          self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val
          self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left
          self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;splitBST&lt;/span&gt;(root, v):
    inordered &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder_traverse&lt;/span&gt;(root):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        inorder_traverse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
        inordered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
        inorder_traverse(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
    inorder_traverse(root)
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inordered&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(v)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_bst&lt;/span&gt;(i, j):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(inordered[mid])
        root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_bst(i, mid&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_bst(mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [build_bst(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, idx), build(idx, len(inordered)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;58-k-th-symbol-in-grammar&#34;&gt;58: K-th Symbol in Grammar&lt;/h2&gt;
&lt;p&gt;$i+1$行目のビット列$s_{i+1}$は$i$列目のビット列$s_i$とそのビット反転したものを連結したものになっている．これを使って真面目に文字列を全部求めると時間かかる．$s_{i+1}$の前半は$s_i$と同じなので，問題のサイズを半分にすることができる．&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kthGrammar&lt;/span&gt;(self, N: int, K: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        half &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; K &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; half:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kthGrammar(N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, K)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kthGrammar(N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, K &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; half) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;59-unique-email-addresses&#34;&gt;59: Unique Email Addresses&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numUniqueEmails&lt;/span&gt;(self, emails: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; emails:
            (local, domain) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;)
            local &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(local)
            local &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local[:idx]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; domain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
                table[domain]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(local)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                table[domain] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {local}
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ls &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values():
            ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; len(list(ls))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;+&lt;/code&gt;の処理を先にしたほうが効率的らしい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numUniqueEmails&lt;/span&gt;(self, emails: List[str]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        canonicals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; emails:
            (local, domain) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;)
            local &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
            canonicals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(local &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; domain)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(canonicals)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;60-capacity-to-ship-packages-within-d-days&#34;&gt;60: Capacity To Ship Packages Within D Days&lt;/h2&gt;
&lt;details&gt;
&lt;summary&gt;答え&lt;/summary&gt;
&lt;p&gt;無限に積める船があれば確実に$D$日以内に運べる．逆に許容積載量が$0$なら絶対に運べない．「ある条件を満たす最小値」と来れば，二分探索の出番．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shipWithinDays&lt;/span&gt;(self, weights: List[int], D: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(mid):
            elapsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            loaded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; weight &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; weights:
                loaded &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; weight
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; loaded:
                    elapsed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    loaded &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weight
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; elapsed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; D

        ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(weights) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 常に条件を満たさない&lt;/span&gt;
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(weights) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 常に条件を満たす&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ng &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ok):
            mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ng &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ok) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_ok(mid):
                ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
</description>
    </item>
    
    <item>
      <title>Minimum Depth of Binary Tree</title>
      <link>/ja/post/minimum-depth-of-binary-tree/</link>
      <pubDate>Sun, 21 Mar 2021 20:24:20 +0900</pubDate>
      <guid>/ja/post/minimum-depth-of-binary-tree/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;二分木が与えられたとき，最小の深さを求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryTreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, key):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minimum_depth&lt;/span&gt;(root):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; min(minimum_depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left),  minimum_depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; minimum_depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; minimum_depth(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# root.left is None and root.right is  None&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Closest Pair From Sorted List</title>
      <link>/ja/post/closest-pair-from-sorted-list/</link>
      <pubDate>Sun, 21 Mar 2021 17:14:21 +0900</pubDate>
      <guid>/ja/post/closest-pair-from-sorted-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;昇順にソートされた配列&lt;code&gt;lst&lt;/code&gt;と値&lt;code&gt;x&lt;/code&gt;が与えられたとき，和が&lt;code&gt;x&lt;/code&gt;に最も近くなる 2 要素のペアを&lt;code&gt;lst&lt;/code&gt;から求めよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;原理的には$O(n^2)$で解けるが，&lt;code&gt;lst&lt;/code&gt;が昇順にソートされていることをうまく使えば$O(n)$で解ける．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$O(n^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst, x):
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(lst), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[j])) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; diff:
                diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[j]))
                ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lst[i], lst[j])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(lst, x):
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; high:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[low] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; lst[high]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; s) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; diff:
            ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lst[low], lst[high])
            diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; s)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x:
            low &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            high &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Sort Algorithms</title>
      <link>/ja/post/sort-algorithms/</link>
      <pubDate>Sun, 21 Mar 2021 13:26:13 +0900</pubDate>
      <guid>/ja/post/sort-algorithms/</guid>
      <description>&lt;p&gt;基本的なソートアルゴリズムを復習&lt;/p&gt;
&lt;h2 id=&#34;bubble-sort&#34;&gt;Bubble Sort&lt;/h2&gt;
&lt;p&gt;隣り合う要素同士の比較を繰り返すことで，最大要素を順次確定させていく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubble_sort&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, idx, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[j]:
                lst[j], lst[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], lst[j]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;insertion-sort&#34;&gt;Insertion Sort&lt;/h2&gt;
&lt;p&gt;トランプゲームで手札をソートするときをイメージする．左のカードから，そのカードが挿入されるべき位置を探し出してそこに挿れる．カードを移動しながら挿入位置を探す．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insertion_sort&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lst), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i]
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[j]:
            lst[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[j]
            j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        lst[j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;merge-sort&#34;&gt;Merge Sort&lt;/h2&gt;
&lt;p&gt;分割統治法．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge_sort&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _merge_sort(lst, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_merge_sort&lt;/span&gt;(lst, left, right):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; right:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [lst[left]]

    middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    lhs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _merge_sort(lst, left, middle)
    rhs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _merge_sort(lst, middle&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, right)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __merge(lhs, rhs)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__merge&lt;/span&gt;(a, b):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(a) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(b):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b[j]:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(a[i])
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(b[j])
            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(a):
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i:]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; b[j:]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heap-sort&#34;&gt;Heap Sort&lt;/h2&gt;
&lt;p&gt;ヒープを使って最大値を調べ続けることでソートする．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap_sort&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        _heapify(lst, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i)
        lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[i], lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lst

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_heapify&lt;/span&gt;(lst, left, right):
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        left_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        right_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; left_child: &lt;span style=&#34;color:#75715e&#34;&gt;# no child&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right_child: &lt;span style=&#34;color:#75715e&#34;&gt;# only left child&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[parent] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[left_child]:
                lst[parent], lst[left_child] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[left_child], lst[parent]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# both child&lt;/span&gt;
            largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; right_child &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[left_child] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[right_child] &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; left_child
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; lst[parent] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lst[largest]:
                lst[parent], lst[largest], lst[largest], lst[parent]
        parent &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;quick-sort&#34;&gt;Quick Sort&lt;/h2&gt;
&lt;p&gt;分割統治法．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quick_sort&lt;/span&gt;(lst):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []
    pivot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lst[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# better strategy exists&lt;/span&gt;
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# less than pivot&lt;/span&gt;
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# more than pivot&lt;/span&gt;
    counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# number of elements that equal to pivot&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; pivot:
            left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ele)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pivot:
            counter &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# pivot &amp;lt; ele&lt;/span&gt;
            right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ele)
    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quick_sort(left)
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quick_sort(right)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [pivot] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; right
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dijkstra Algorithm</title>
      <link>/ja/post/dijkstra-algorithm/</link>
      <pubDate>Sat, 20 Mar 2021 22:27:07 +0900</pubDate>
      <guid>/ja/post/dijkstra-algorithm/</guid>
      <description>&lt;h2 id=&#34;何も見ないで-dijkstra-法を書けるようになりたい&#34;&gt;何も見ないで Dijkstra 法を書けるようになりたい&lt;/h2&gt;
&lt;p&gt;何も見ないで Dijkstra 法を書けるようになりたい，ので，練習する．
といってもただただ暗記するのは応用が効かないので，DFS・BFS と比較して覚えることにする．&lt;/p&gt;
&lt;h2 id=&#34;グラフ上の探索の一般形&#34;&gt;グラフ上の探索の一般形&lt;/h2&gt;
&lt;p&gt;「発見したけどまだ未訪問」の頂点リストから次に訪問する頂点の選び方の違いによって性格が変わる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;traversal&lt;/span&gt;(graph, start, select_func):
    has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()

    has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(start)
    suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(start)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; select_func(suspended) &lt;span style=&#34;color:#75715e&#34;&gt;# ここで探索の性格が決まる&lt;/span&gt;
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[u]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;select_func&lt;/code&gt;で&lt;code&gt;suspended&lt;/code&gt;を stack みたいに扱うと DFS．
&lt;code&gt;select_func&lt;/code&gt;で&lt;code&gt;suspended&lt;/code&gt;を queue みたいに扱うと BFS．&lt;/p&gt;
&lt;h2 id=&#34;suspendedを優先度付きキューとして扱えば-dijkstra-法&#34;&gt;&lt;code&gt;suspended&lt;/code&gt;を優先度付きキューとして扱えば Dijkstra 法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; heapq from heappush, heappop

INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dijkstra&lt;/span&gt;(graph, start):
    has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list()
    dist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [INF &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]

    has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(start)
    suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, start))
    dist[start] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        d, u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heappop(suspended) &lt;span style=&#34;color:#75715e&#34;&gt;# suspendedを優先度付きキューとして扱う&lt;/span&gt;
        has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (v, cost) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[u]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dist[u] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cost &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; dist[v]:
                dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[u] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cost
                heappush(suspended, (dist[v], v))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ついでに-prim-法&#34;&gt;ついでに Prim 法&lt;/h2&gt;
&lt;p&gt;最小全域木を計算するアルゴリズム．頂点一つからなる木から始めて，木に含まれていない頂点と木に含まれる頂点を結ぶ辺のうち，重さの最小のものを採用し木に含まれる頂点を増やす，ということを繰り返す．Dijkstra 法に雰囲気似ている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; heapq &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; heapify, heappush, heappop

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prim&lt;/span&gt;(graph):
    has_used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    has_used&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

    suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(cost, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v, cost &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
    heapify(suspended)

    mst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    mst_weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        cost, u, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heappop(suspended)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_used &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_used:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        has_used&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u)
        has_used&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(v)
        mst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((u, v))
        mst_weight &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cost

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w, cost &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[u]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_used:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            heappush(suspended, (cost, u, w))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w, cost &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[v]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_used:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            heappush(suspended, (cost, v, w))
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(set(suspended))
        heaepify(suspended)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mst, mst_weight
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Binary Search Tree</title>
      <link>/ja/post/binary-search-tree/</link>
      <pubDate>Sat, 20 Mar 2021 16:53:54 +0900</pubDate>
      <guid>/ja/post/binary-search-tree/</guid>
      <description>&lt;h2 id=&#34;二分探索木&#34;&gt;二分探索木&lt;/h2&gt;
&lt;p&gt;二分木の中でも，&lt;code&gt;左の子供 &amp;lt;= 自分 &amp;lt; 右の子供&lt;/code&gt;となっているような木．&lt;/p&gt;
&lt;p&gt;頂点の挿入順序によって出来上がる木は複数パターンある．&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinarySearchTreeNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, key):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(self, key):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; key:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BinarySearchTreeNode(key)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(key)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# key &amp;lt; self.key:&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BinarySearchTreeNode(key)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(key)

    &lt;span style=&#34;color:#75715e&#34;&gt;# ref: https://stackoverflow.com/questions/34012886/print-binary-tree-level-by-level-in-python&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;(self):
        lines, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(line)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_display&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Returns list of strings, width, height, and horizontal coordinate of the root.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# No child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key
            width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(line)
            height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; width &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [line], width, height, middle

        &lt;span style=&#34;color:#75715e&#34;&gt;# Only left child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            lines, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display()
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
            first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s
            second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            shifted_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [line &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shifted_lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Only right child.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            lines, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display()
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key
            u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
            first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (u &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            shifted_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; line &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shifted_lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Two children.&lt;/span&gt;
        left, n, p, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display()
        right, m, q, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_display()
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key
        u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(s)
        first_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
        second_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q:
            left &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; p:
            right &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [m &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; q)
        zipped_lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zip(left, right)
        lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [first_line, second_line] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zipped_lines]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lines, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u, max(p, q) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;高さが最小の二分探索木&#34;&gt;高さが最小の二分探索木&lt;/h2&gt;
&lt;p&gt;昇順にソートされた&lt;code&gt;key&lt;/code&gt;の配列を渡されたときに，それらを格納する二分探索木のうち最も高さの小さいものを作る．&lt;/p&gt;
&lt;p&gt;考え方としては，高さが最小になるとき，左右の木の高さが等しいので，&lt;code&gt;key&lt;/code&gt;の真ん中ぐらいの大きさのものから格納していくとできそうという感じ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_minimum_height_bst&lt;/span&gt;(keys):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _build_minimum_height_bst(keys, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(keys) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_build_minimum_height_bst&lt;/span&gt;(keys, start, end):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; start:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; end) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BinarySearchTreeNode(keys[middle])
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _build_minimum_height_bst(keys, start, middle &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _build_minimum_height_bst(keys, middle &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, end)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;深さごとのkeyのリスト&#34;&gt;深さごとの&lt;code&gt;key&lt;/code&gt;のリスト&lt;/h2&gt;
&lt;p&gt;二分探索木から&lt;code&gt;[ [深さ0のkeyのリスト], [深さ1のkeyのリスト], ...]&lt;/code&gt;を作る．二分探索木を横串に見る感じ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_of_depths&lt;/span&gt;(root, lsts, level):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lsts) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; level: &lt;span style=&#34;color:#75715e&#34;&gt;# 深さ0のリストの存在に注意&lt;/span&gt;
        lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        lsts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(lst)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lsts[level]
    lst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key)
    list_of_depths(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, lsts, level &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    list_of_depths(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, lsts, level &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lsts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BFS っぽくもできる．$n$段目を見終わった段階で$n+1$段目が&lt;code&gt;suspended&lt;/code&gt;に入っているように実装する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_of_depths&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

    suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(root)

    lsts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(suspended) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(lsts) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; level:
            lsts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([])
        next_suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; suspended:
            lsts[level]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                next_suspended&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
        suspended &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_suspended
        level &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lsts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;その木は完全にバランスしているか&#34;&gt;「その木は完全にバランスしているか？」&lt;/h2&gt;
&lt;p&gt;ここでは「その木に含まれるどの頂点を根とした部分木を考えてもその左右の部分木がバランスしている状態」を「完全にバランスしている」とする．左右の部分木の高さの差が 1 以下になっているかを調べる．要するに木の高さを求められますかという問題．ある頂点を根とする木の高さは，その頂点の左右の子供を根とする部分木のサイズの大きい方+1 なので再帰的に書ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_height&lt;/span&gt;(root):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(left, right) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_balanced&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true
    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; get_height(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; diff:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; is_balanced(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; is_balanced(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただこれだと効率が悪い．一部がバランスしてない事実が発覚した時点でそれ以上の木の高さを真面目に計算する必要がなくなるので，工夫する余地がある．&lt;/p&gt;
&lt;h2 id=&#34;その二分木は二分探索木&#34;&gt;その二分木は二分探索木？&lt;/h2&gt;
&lt;p&gt;与えられた二分木が二分探索木になっているかを調べる．根から inorder で走査した結果が昇順にソートされていればその木は二分探索木の定義を満たす．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Integer&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, num):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num

last_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_valid&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_valid(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; last_visited &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; last_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_valid(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    inorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key)
    inorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preorder&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    preorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postorder&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    postorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
    postorder(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;間順走査順で次の頂点はどれか&#34;&gt;間順走査順で次の頂点はどれか&lt;/h2&gt;
&lt;p&gt;注目頂点の右の部分木が存在するなら，その部分木の最も左側の頂点が次に訪問する頂点になる．
注目頂点の右の部分木が存在しないなら，注目頂点の親にとって注目頂点が左側の子なら，その親自身が次の頂点．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left_most_child&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inorder_successor&lt;/span&gt;(root):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left_most_child(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left:
            q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parent
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Route Between Nodes</title>
      <link>/ja/post/route-between-nodes/</link>
      <pubDate>Sat, 20 Mar 2021 16:47:04 +0900</pubDate>
      <guid>/ja/post/route-between-nodes/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;有向グラフと 2 頂点が与えられたとき，その 2 頂点間にパスがあるか判定せよ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;探索するだけ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input()) &lt;span style=&#34;color:#75715e&#34;&gt;# number of nodes&lt;/span&gt;
M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input()) &lt;span style=&#34;color:#75715e&#34;&gt;# number of edges&lt;/span&gt;

start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
goal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())

G &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(N)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(M):
    u, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(int, input(),split())
    G[u]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v)
    &lt;span style=&#34;color:#75715e&#34;&gt;# G[v].append(u) # for undirected&lt;/span&gt;

has_visited &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(graph, node):
    has_visited&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(node)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; neighbor &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; graph[node]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; neighbor &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            DFS(graph, neighbor)

DFS(G, start)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; goal &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; has_visited:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reachable&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Find Loop in Linked List</title>
      <link>/ja/post/find-loop-in-linked-list/</link>
      <pubDate>Fri, 19 Mar 2021 18:38:59 +0900</pubDate>
      <guid>/ja/post/find-loop-in-linked-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;片連結リストが与えられたとき，そのリストがループしているか判定し，しているならどこでループしているのかを求めろ．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;2 つのポインタ！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_loop&lt;/span&gt;(head):
    faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; slower:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# there is a loop!&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (False, None)

    slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; faster:
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (True, slower)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Find Intersection of Two Linked Lists</title>
      <link>/ja/post/find-intersection-of-two-linked-lists/</link>
      <pubDate>Fri, 19 Mar 2021 18:17:26 +0900</pubDate>
      <guid>/ja/post/find-intersection-of-two-linked-lists/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;2 つの片連結リストの頭を与えられる．この 2 つのリストがどこかで交わっているか，交わっているなら交わっているノードのデータを取れ．&lt;/p&gt;
&lt;h2 id=&#34;解答&#34;&gt;解答&lt;/h2&gt;
&lt;p&gt;交わっているか否かは両方のリストのお尻が同じノードなのかで判定できる．&lt;/p&gt;
&lt;p&gt;どこで交わっているのかは，2 つのリストの長さの差がわかれば簡単にわかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_intersection&lt;/span&gt;(ll0, ll1):
    ll0_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll0
    ll0_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ll1_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll1
    ll1_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ll0_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        ll0_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll0_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        ll0_len &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ll1_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        ll1_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll1_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        ll1_len &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0_tail &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; ll1_tail:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (False, None)

    diff &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(ll0_len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ll1_len)
    longer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    shorter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0_len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ll1_len:
        longer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll1
        shorter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll0
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        longer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll0
        shorter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll1
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(diff):
        longer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; longer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; longer &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; shorter:
        longer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; longer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        shorter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shorter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (True, longer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Check if a Linked List Is Palindrome</title>
      <link>/ja/post/check-if-a-linked-list-is-palindrome/</link>
      <pubDate>Fri, 19 Mar 2021 17:33:51 +0900</pubDate>
      <guid>/ja/post/check-if-a-linked-list-is-palindrome/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;片連結リストが与えられたとき，そのリストが頭から読んでもお尻から読んでも同じかを判定する&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;逆転させたリストを作って各要素を確認&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverse_linked_list&lt;/span&gt;(head):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LinkedListNode(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data, None)

    reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reverse_linked_list(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node)
    reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
    reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinkedListNode(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data, None)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reversed_head


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_palindrome&lt;/span&gt;(head):
    reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reverse_linked_list(head)
    pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    pointer1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; pointer1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pointer0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pointer1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        pointer1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;別解2-つポインタ--stack&#34;&gt;別解：2 つポインタ + stack&lt;/h2&gt;
&lt;p&gt;2 つのポインタを使えば真ん中らへんが取れる．前半要素の逆順で後半要素が出てくれば Palindrome なのでそれを確認する．入れた順番の逆順で取り出せるデータ構造は&lt;code&gt;stack&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_palindrome&lt;/span&gt;(head):
    faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head

    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data)
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#75715e&#34;&gt;# skip middle node&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(stack) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Sum Up Two Lists</title>
      <link>/ja/post/sum-up-two-lists/</link>
      <pubDate>Fri, 19 Mar 2021 16:19:13 +0900</pubDate>
      <guid>/ja/post/sum-up-two-lists/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;2 つのリストを要素ごとに足し上げて 1 つのリストにする&lt;/p&gt;
&lt;p&gt;要するにこういうこと．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 +      +      +
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 +      +      +
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 |      |      |
 v      v      v
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 +      +      +      +
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 +      +      +      |
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;     |
 |      |      |      |
 v      v      v      v
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;筆算みたい．&lt;/p&gt;
&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;「繰り上がりと要素を 2 つ足す」を再帰的に繰り返す．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkedListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, data, next_node):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_node

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_up_two_linked_lists&lt;/span&gt;(ll0, ll1, carry):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ll1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; carry &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; carry
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        data &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ll0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        data &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ll1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data

    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinkedListNode(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, None)
    result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; ll1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        next_ll0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        next_ll1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            next_ll0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ll1 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            next_ll1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        carry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_up_two_linked_list(next_ll0, next_ll1, carry)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;類題&#34;&gt;類題&lt;/h2&gt;
&lt;p&gt;数字が逆向きについていると&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 +      +      +      +
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 |      +      +      |
 |     &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 |      |      |      |
 v      v      v      v
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;類題答え&#34;&gt;類題答え&lt;/h2&gt;
&lt;p&gt;大変そうなので片連結リストを逆転させて元の問題に帰着させる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# reverseしたリストのheadを返す&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverse_linked_list&lt;/span&gt;(head):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LinkedListNode(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data, None)

    reversed_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reverse_linked_list(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node)
    reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        reversed_tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
    reversed_tail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinkedListNode(head&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data, None)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reversed_head

reverse_linked_list(
    sum_up_two_linked_lists(
        reverse_linked_list(ll0),
        reverse_linked_list(ll1),
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>$K$th to Last in Linked List</title>
      <link>/ja/post/kth-to-last-in-linked-list/</link>
      <pubDate>Fri, 19 Mar 2021 15:27:36 +0900</pubDate>
      <guid>/ja/post/kth-to-last-in-linked-list/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;片連結リストの，後ろから&lt;code&gt;k&lt;/code&gt;番目の要素を見つける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkedListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, data, next_node):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;答え&#34;&gt;答え&lt;/h2&gt;
&lt;p&gt;片連結リストの長さ&lt;code&gt;L&lt;/code&gt;が与えられるなら，前から&lt;code&gt;L-k&lt;/code&gt;番目を取ればいい．&lt;/p&gt;
&lt;p&gt;片連結リストの長さが与えられないときはチョット工夫する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再帰で書く&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_kth_to_last&lt;/span&gt;(node, k):
    &lt;span style=&#34;color:#75715e&#34;&gt;# base case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_kth_to_last(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node, k) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}th to last: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(idx, node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; idx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ポインタ 2 つ用意する．ポインタ同士が&lt;code&gt;k&lt;/code&gt;離れているようにしておくことで時間計算量$O(n)$，空間計算量$O(1)$で済む．&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_kth_to_last&lt;/span&gt;(head, k):
    pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    pointer1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(k):
        pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        pointer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        pointer1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}th to last: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(k, pointer1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Remove Dups From Unsorted Linked List</title>
      <link>/ja/post/remove-dups-from-unsorted-linked-list/</link>
      <pubDate>Fri, 19 Mar 2021 12:47:55 +0900</pubDate>
      <guid>/ja/post/remove-dups-from-unsorted-linked-list/</guid>
      <description>&lt;p&gt;一つずつ舐めながら，重複しているならポインタの付替えをする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkedListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, data, next_node):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_node

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remove_dups_from_linked_list&lt;/span&gt;(head):
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; curr &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; table:
            table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data)
            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            prev&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        curr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Waven Lined List</title>
      <link>/ja/post/waven-lined-list/</link>
      <pubDate>Fri, 19 Mar 2021 01:55:13 +0900</pubDate>
      <guid>/ja/post/waven-lined-list/</guid>
      <description>&lt;h2 id=&#34;連結リストを織り込みたい&#34;&gt;連結リストを織り込みたい&lt;/h2&gt;
&lt;p&gt;長さが偶数の連結リストを真ん中で切断して織り込みたい．&lt;/p&gt;
&lt;p&gt;要するにこれを&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;12&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;13&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;15&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;21&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;22&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;23&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;24&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;25&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうしたい&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;21&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;12&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;22&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;13&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;23&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;24&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;15&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;25&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;テク二人走らせる&#34;&gt;テク：二人走らせる&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;二倍の速さで走るポインタを用意すれば真ん中で切ることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LinkedListNode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, data, next_node):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_node

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waven&lt;/span&gt;(head):
    faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; faster &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
    faster&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        next_faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        next_slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node
        faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slower
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; next_slower &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
            slower&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_faster
        faster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_faster
        slower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_slower
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;waven linked list って英語は間違っていそう．&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Zero Matrix</title>
      <link>/ja/post/zero-matrix/</link>
      <pubDate>Fri, 19 Mar 2021 01:07:49 +0900</pubDate>
      <guid>/ja/post/zero-matrix/</guid>
      <description>&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;二次元配列&lt;code&gt;X&lt;/code&gt;が与えられる．ここで&lt;code&gt;X[i][j] == 0&lt;/code&gt;ならば&lt;code&gt;i&lt;/code&gt;行目全体と&lt;code&gt;j&lt;/code&gt;列目全体を&lt;code&gt;0&lt;/code&gt;にしたい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何も考えずに左上から右下に向かって走査しながら&lt;code&gt;0&lt;/code&gt;を見つけ次第その行と列を&lt;code&gt;0&lt;/code&gt;にするってやっていくと，行列全体が&lt;code&gt;0&lt;/code&gt;になってかなしい気持ちになる．&lt;/p&gt;
&lt;h2 id=&#34;落ち着いて真面目にやる&#34;&gt;落ち着いて真面目にやる&lt;/h2&gt;
&lt;p&gt;走査と&lt;code&gt;0&lt;/code&gt;埋めを別個にやれば全部&lt;code&gt;0&lt;/code&gt;にはならない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_zeros&lt;/span&gt;(table):
    ROW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table)
    COL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
    row_with_zero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [False &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW)]
    col_with_zero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [False &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; table[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                row_with_zero[r] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                col_with_zero[c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; row_with_zero[r]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL):
                table[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; col_with_zero[c]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW):
                table[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>2次元配列を回転したい</title>
      <link>/ja/post/rotate-2d-array/</link>
      <pubDate>Fri, 19 Mar 2021 00:13:34 +0900</pubDate>
      <guid>/ja/post/rotate-2d-array/</guid>
      <description>&lt;h2 id=&#34;二次元配列を回転したい&#34;&gt;二次元配列を回転したい&lt;/h2&gt;
&lt;p&gt;頭が混乱してしまうのでまとめる．&lt;/p&gt;
&lt;h2 id=&#34;反時計回りに-90-度回転&#34;&gt;反時計回りに 90 度回転&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回転後の行列を左上から右下へ埋めていくイメージ&lt;/li&gt;
&lt;li&gt;つまり回転前の行列の右上から左下へ拾っていく&lt;/li&gt;
&lt;li&gt;僕の頭的には，回転後の行列の座標の軌跡を正として回転前の位置を参照する方が書きやすいみたい．&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate_counterclockwise&lt;/span&gt;(table):
    ROW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# 回転後の行数は回転前の列数&lt;/span&gt;
    COL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table)    &lt;span style=&#34;color:#75715e&#34;&gt;# 回転後の列数は回転前の行数&lt;/span&gt;

    rotated &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL):
            rotated[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[c][ROW &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rotated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;時計回りに-90-度回転&#34;&gt;時計回りに 90 度回転&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回転後の行列を左上から右下へ埋めていくイメージ&lt;/li&gt;
&lt;li&gt;つまり回転前の行列の左下から右上へ拾っていく&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate_clockwise&lt;/span&gt;(table):
    ROW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# 回転後の行数は回転前の列数&lt;/span&gt;
    COL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(table)    &lt;span style=&#34;color:#75715e&#34;&gt;# 回転後の列数は回転前の行数&lt;/span&gt;

    rotated &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ROW):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(COL):
            rotated[r][c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[COL &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][r]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rotated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;かっこいい書き方&#34;&gt;かっこいい書き方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zip&lt;/code&gt;を使うと左 90 度回転はかっこよくかける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip&lt;/code&gt;で回転後の行列を行ごとに下から集めたものが取れるので，最後にそれを逆順にする&lt;/li&gt;
&lt;li&gt;ref: &lt;a href=&#34;https://stackoverflow.com/questions/8421337/rotating-a-two-dimensional-array-in-python&#34;&gt;https://stackoverflow.com/questions/8421337/rotating-a-two-dimensional-array-in-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rotate_counterclockwise&lt;/span&gt;(table):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [list(row) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;table)][::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;豆知識：左 90 度回転 x 3 == 右 90 度回転&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Puzzle: 100 Lockers</title>
      <link>/ja/post/puzzle-100-lockers/</link>
      <pubDate>Thu, 17 Dec 2020 17:56:26 +0900</pubDate>
      <guid>/ja/post/puzzle-100-lockers/</guid>
      <description>&lt;h2 id=&#34;100-lockers&#34;&gt;100 lockers&lt;/h2&gt;
&lt;p&gt;ref: &lt;a href=&#34;http://mathforum.org/library/drmath/view/56747.html&#34;&gt;http://mathforum.org/library/drmath/view/56747.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ある駅に 100 個のロッカーが設置された．各ロッカーには番号が$1$，$2$，$3$&amp;hellip;，$99$，$100$と振られており，すべての扉が閉じている．今から私は$i$（$i = 1, 2, &amp;hellip;, 99, 100$）回以下の行動をする．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$i$の倍数の番号のロッカーを，開いていれば閉め，閉まっていれば開ける&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この行動はあまりに奇人なので，やりたくない．が，やったあとに開いている扉がどれなのかはどうしても知りたい．君に教えてほしい．&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;初期状態では扉は全て閉じているので，奇数回操作の対象になると扉が開いていることになる．ここで扉$n$は$n$の約数回目に操作の対象になる．ということは最後に残っているのは扉の番号の約数が奇数個の扉である．約数が奇数個となるような数字は，平方数しかない．よって，最後に開いている扉は$1$，$4$，$9$，$16$，$25$，$36$，$49$，$64$，$81$，$100$の 10 の扉．&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Puzzle: Ants on a Polygon</title>
      <link>/ja/post/puzzle-ants-on-a-polygon/</link>
      <pubDate>Thu, 17 Dec 2020 17:46:30 +0900</pubDate>
      <guid>/ja/post/puzzle-ants-on-a-polygon/</guid>
      <description>&lt;h2 id=&#34;ants-on-a-polygon&#34;&gt;Ants on a Polygon&lt;/h2&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://www.geeksforgeeks.org/puzzle-21-3-ants-and-triangle/&#34;&gt;https://www.geeksforgeeks.org/puzzle-21-3-ants-and-triangle/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$n$角形の拡張点に 🐜 がいる．私の掛け声で 🐜 は一斉にどちらかの辺を選んで歩き出す．🐜 が辺上で衝突する確率を求めよ．&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;$n$匹の 🐜 が全部同じ方向を選べば衝突はしない．すべての 🐜 が時計回りの枝を選ぶ確率は&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2^n}
$$&lt;/p&gt;
&lt;p&gt;同じように，すべての 🐜 が反時計回りの枝を選ぶ確率は&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2^n}
$$&lt;/p&gt;
&lt;p&gt;すべての 🐜 が同じ方向を選ぶ確率は&lt;/p&gt;
&lt;p&gt;$$
2 \times \frac{1}{2^n} = \frac{1}{2^{n-1}}
$$&lt;/p&gt;
&lt;p&gt;よって衝突する確率は&lt;/p&gt;
&lt;p&gt;$$
1 - \frac{1}{2^{n-1}}
$$&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Puzzle: Heavy Pill</title>
      <link>/ja/post/puzzle-heavy-pill/</link>
      <pubDate>Thu, 17 Dec 2020 17:30:43 +0900</pubDate>
      <guid>/ja/post/puzzle-heavy-pill/</guid>
      <description>&lt;h2 id=&#34;the-heavy-pill&#34;&gt;The heavy pill&lt;/h2&gt;
&lt;p&gt;ref: &lt;a href=&#34;https://www.geeksforgeeks.org/puzzle-10-identical-bottles-pills/&#34;&gt;https://www.geeksforgeeks.org/puzzle-10-identical-bottles-pills/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目の前に 10 種類の錠剤の瓶が置かれている．それぞれの瓶には十分な量の錠剤が入っている．各瓶には番号が振られており，それぞれ&lt;code&gt;1&lt;/code&gt;/&lt;code&gt;2&lt;/code&gt;/&lt;code&gt;3&lt;/code&gt;/&lt;code&gt;4&lt;/code&gt;/&lt;code&gt;5&lt;/code&gt;/&lt;code&gt;6&lt;/code&gt;/&lt;code&gt;7&lt;/code&gt;/&lt;code&gt;8&lt;/code&gt;/&lt;code&gt;9&lt;/code&gt;/&lt;code&gt;10&lt;/code&gt;である．これらの錠剤のうち，ある一つの瓶に含まれている錠剤は重さが 1.1g で他の錠剤は 1g である．測りを 1 回だけ用いて「どの瓶に含まれる錠剤が重さ 1.1g の錠剤であるか」を求めたい．どのようにすればよいだろうか．&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;$i = 1, 2, &amp;hellip;, 9, 10$に対して，瓶$i$から$i$粒の錠剤を取り出し測りに載せる．測りの指す合計重量$X$を読み取る．番号$(X-55)/0.1$の瓶が 1.1g の錠剤の瓶である．&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>if (n &amp; (n-1)) == 0</title>
      <link>/ja/post/check-n-is-power-of-2/</link>
      <pubDate>Wed, 16 Dec 2020 16:01:29 +0900</pubDate>
      <guid>/ja/post/check-n-is-power-of-2/</guid>
      <description>&lt;h2 id=&#34;忘れないようにメモ&#34;&gt;忘れないようにメモ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xF&lt;/code&gt; = &lt;code&gt;0b1111&lt;/code&gt;：&lt;code&gt;0x一文字&lt;/code&gt;は 4bits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0xFF&lt;/code&gt; = &lt;code&gt;0b1111 1111&lt;/code&gt;：&lt;code&gt;0x二文字&lt;/code&gt;は 8bits（1byte）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;if-n--n-1--0&#34;&gt;&lt;code&gt;if (n &amp;amp; (n-1)) == 0&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xxxxx &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;  n - 1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xxxxx &lt;span style=&#34;color:#ae81ff&#34;&gt;0111&lt;/span&gt;
------------------------
n &amp;amp; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n - 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ????? &lt;span style=&#34;color:#ae81ff&#34;&gt;0000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なので，&lt;code&gt;if (n &amp;amp; (n-1)) == 0&lt;/code&gt;が true なら&lt;code&gt;?????&lt;/code&gt;が&lt;code&gt;00000&lt;/code&gt;であり，つまり&lt;code&gt;xxxxx&lt;/code&gt;が&lt;code&gt;00000&lt;/code&gt;であるから，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = 00000 1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ということになる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if (n &amp;amp; (n-1)) == 0&lt;/code&gt;は「&lt;code&gt;n&lt;/code&gt;が 2 のべき乗であるか」を確認している．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>組み合わせを高速に計算する</title>
      <link>/ja/post/calc-combination/</link>
      <pubDate>Mon, 14 Dec 2020 09:00:00 +0900</pubDate>
      <guid>/ja/post/calc-combination/</guid>
      <description>&lt;h2 id=&#34;_n-mathrmc-_rの定義&#34;&gt;${}_n \mathrm{C} _r$の定義&lt;/h2&gt;
&lt;p&gt;異なる$n$個のものから$r$個を選ぶ組み合わせの総数．&lt;/p&gt;
&lt;h2 id=&#34;いろんな実装&#34;&gt;いろんな実装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;再帰的に計算する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combination&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; r) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; combination(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; combination(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, r);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%91%E3%82%B9%E3%82%AB%E3%83%AB%E3%81%AE%E4%B8%89%E8%A7%92%E5%BD%A2&#34;&gt;パスカルの三角形&lt;/a&gt;を用いる
&lt;ul&gt;
&lt;li&gt;二次元配列の下半分をパスカルの三角形のルールに従って埋めていく&lt;/li&gt;
&lt;li&gt;小さいところから埋まっていくので直接定義式どおりに計算したときにオーバーフローするような大きい組み合わせを計算できる．
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc185/tasks/abc185_c&#34;&gt;ABC185-C&lt;/a&gt;はこれを使って AC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; combination(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; r) {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; table(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; table.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        table[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        table[i][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; table.size(); j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; j; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            table[j][k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; table[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][k]; &lt;span style=&#34;color:#75715e&#34;&gt;// 真上と左上の和
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table; &lt;span style=&#34;color:#75715e&#34;&gt;// table[n][r]がnCrの値
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>部分和問題</title>
      <link>/ja/post/partial-sums/</link>
      <pubDate>Tue, 12 May 2020 21:52:41 +0900</pubDate>
      <guid>/ja/post/partial-sums/</guid>
      <description>&lt;h2 id=&#34;全探索を再帰関数でやるときの-2-流派&#34;&gt;全探索を再帰関数でやるときの 2 流派&lt;/h2&gt;
&lt;p&gt;全探索を再帰関数で書くにはたいてい 2 流派ある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状態情報を配っていく再帰&lt;/li&gt;
&lt;li&gt;状態情報を集めていく再帰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全探索しなければならない問題では，探索すべき状態数が指数的に増加してしまうので，問題の制約が小さめであることが多い．大体 $10$ から $20$ ぐらいだと全探索できる．&lt;/p&gt;
&lt;h2 id=&#34;部分和問題&#34;&gt;部分和問題&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;【問題】 $n$個の整数列 $a_1, a_2, &amp;hellip; , a_{n-1}$ から部分集合をうまく選んで，その集合内の数の和を $W$ に等しくすることができるか判定せよ．&lt;/p&gt;
&lt;p&gt;【制約】 $1 \leq n \leq 20$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;状態情報を配っていく再帰&#34;&gt;状態情報を配っていく再帰&lt;/h3&gt;
&lt;p&gt;このタイプの再帰では &lt;strong&gt;再帰的な樹形図の最小単位&lt;/strong&gt; をそのまま再帰関数が表現していると捉えるとわかりやすい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rec(状態を表す変数) {
    if (状態が樹形図の末端である) { // ベースケース
        条件に対してこの状態が妥当であるかの確認
        return;
    }

    rec(次の状態1)
    rec(次の遷移2)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;樹形図上を深さ優先探索して，末端の状態にたどり着いてから条件との整合性チェックをする．&lt;/p&gt;
&lt;p&gt;この方針で部分和問題を解いてみる．ここでは状態を&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(何番目までの項を用いるか, その時点での部分和)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;として表現している．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; depth, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 樹形図の末端に到達したとき
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[depth]を部分和計算に用いる場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(depth&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[depth])) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[depth]を部分和計算に用いない場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(depth&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sum)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
    a.resize(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

    &lt;span style=&#34;color:#75715e&#34;&gt;// 状態(0, 0)から樹形図を末端に向かって深さ優先探索
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;状態情報を集めていく再帰&#34;&gt;状態情報を集めていく再帰&lt;/h3&gt;
&lt;p&gt;配っていく再帰との対比で考えると，集めていく再帰では状態を&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(何番目以降の項を用いるか, その時点でのWとの差)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;で状態を表現することになる．「実現したい和 W との差」で状態を表現するところが配る再帰とは違っている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; remain) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 樹形図の末端に到達したとき: N番目以降の項を用いるときの部分和は自明
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx]を部分和計算に用いる場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[idx] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[idx])) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx]を部分和計算に用いない場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
    a.resize(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

    &lt;span style=&#34;color:#75715e&#34;&gt;// 状態(0, W)から樹形図を末端に向かって深さ優先探索
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, W)) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;状態の定義次第では別の書き方もできる．状態を&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(0から何番目までの項を用いたか, その時点でのWとの差)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とすると，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; remain) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 樹形図の末端に到達したとき: 0番目までの項を用いた時の部分和は自明
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx-1]を部分和計算に用いる場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; remain &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx-1]を部分和計算に用いない場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
    a.resize(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

    &lt;span style=&#34;color:#75715e&#34;&gt;// 状態(N, W)から樹形図を末端に向かって深さ優先探索
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(N, W)) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;状態情報を集めていく再帰でメモ化&#34;&gt;状態情報を集めていく再帰でメモ化&lt;/h3&gt;
&lt;p&gt;集めていく再帰では，サイズ $n$ の問題を解くために サイズ $n-1$ の問題の結果を利用するのだから，それを配列などにメモしておけば再帰計算の無駄を減らせる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a;

&lt;span style=&#34;color:#75715e&#34;&gt;// dp[i][j]: i番目までの項を用いて部分和Wとの差をjにできたか
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// -1: まだ解決していない
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  0: できない
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  1: できる
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dp;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; remain) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// まずメモを確認
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dp[idx][remain] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[idx][remain]; &lt;span style=&#34;color:#75715e&#34;&gt;// すでに計算してあったのでメモの内容を返す
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 樹形図の末端に到達したとき: 0番目までの工を用いた時の部分和は自明
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (remain &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx-1]を部分和計算に用いる場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; renaib &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])) ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// a[idx-1]を部分和計算に用いない場合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(idx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, remain)) ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[idx][remain] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
    a.resize(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

    &lt;span style=&#34;color:#75715e&#34;&gt;// dpテーブル初期化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    dp.assign(N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

    &lt;span style=&#34;color:#75715e&#34;&gt;// 状態(N, W)から樹形図を末端に向かって深さ優先探索
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rec(N, W) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;再帰ではなく-bit-全探索で&#34;&gt;再帰ではなく bit 全探索で&lt;/h3&gt;
&lt;p&gt;項の選び方を 2 進数にエンコードして状態を表現することもできる．そうすれば bit 全探索になる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmpsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i)) {
                tmpsum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i];
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmpsum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W) {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Two Pointers</title>
      <link>/ja/post/two-pointers/</link>
      <pubDate>Sun, 10 May 2020 22:09:24 +0900</pubDate>
      <guid>/ja/post/two-pointers/</guid>
      <description>&lt;h2 id=&#34;2-つのポインタを使う&#34;&gt;2 つのポインタを使う&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;ソート済み&lt;/em&gt; の整数配列から，和が $X$ となるような 2 要素を選ぶ問題を解く．&lt;/p&gt;
&lt;p&gt;ナイーブなやり方は全探索で $O(n^2)$ かかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
  sort(a.begin(), a.end());

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; + &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[j]) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;non&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2 つのポインタで左右から探しに行くと $O(n)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
  sort(a.begin(), a.end());

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; j) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; + &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x) i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;s;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;でソートする</title>
      <link>/ja/post/sorting/</link>
      <pubDate>Sun, 10 May 2020 20:19:03 +0900</pubDate>
      <guid>/ja/post/sorting/</guid>
      <description>&lt;h2 id=&#34;複数の要素をまとめてソート&#34;&gt;複数の要素をまとめてソート&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pair&lt;/code&gt; を使うと簡単．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, a(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; no; string name; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; no &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; name;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; no &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; name;

    &lt;span style=&#34;color:#75715e&#34;&gt;// ソートの優先順位は第1要素・第2要素の順
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sort(a.begin(), a.end());

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[i].first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[i].second &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ソート順序の指定&#34;&gt;ソート順序の指定&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::sort()&lt;/code&gt; ではデフォルトでは昇順． &lt;code&gt;greater&lt;/code&gt;関数を比較関数として与えると降順にできる．また，独自に比較関数を自作して与えても良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_vector&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v) {
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;less_mod3&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lhs, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rhs) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((lhs &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; rhs) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lhs &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rhs &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lhs &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rhs;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;};
  sort(a.begin(), a.end());
  print_vector(a);

  sort(a.begin(), a.end(), greater&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;());
  print_vector(a);

  sort(a.begin(), a.end(), less_mod3);
  print_vector(a);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;構造体のソート&#34;&gt;構造体のソート&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 演算子をオーバーロドするとよいかも．ただ &lt;code&gt;pair&lt;/code&gt; とかの組み合わせで管理できるならそっちのほうが手間はかからない感．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; no, math, english;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Student &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (math &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; s.math) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; s.math;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (english &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; s.english) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; english &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; s.english;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; no &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.no;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Student&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vec(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec[i].no &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec[i].math &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec[i].english;
  sort(vec.begin(), vec.end());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vec[i].no &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;演習&#34;&gt;演習&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0018&amp;amp;lang=jp&#34;&gt;AIZU ONLINE JUDGE 0018 Sorting Five Numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p[i];
    sort(p.begin(), p.end(), greater&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
        {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2198&amp;amp;lang=jp&#34;&gt;AIZU ONLINE JUDGE 2198 Problem B: Moonlight Farm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Seed&lt;/span&gt;
{
    string l;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, a, b, c, d, e, f, s, m;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; efficiency;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; duration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (d &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; gain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p;
        efficiency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gain &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; duration;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Seed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; efficiency &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; s.efficiency &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.l) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; efficiency &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; s.efficiency;
    }
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Seed&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; seeds(n);
        Seed s;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s.m;
            s.calc();
            seeds.push_back(s);
        }
        sort(seeds.begin(), seeds.end());
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; seeds[i].l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>スタックとキュー</title>
      <link>/ja/post/stack-and-queue/</link>
      <pubDate>Fri, 10 Apr 2020 21:18:07 +0900</pubDate>
      <guid>/ja/post/stack-and-queue/</guid>
      <description>&lt;h2 id=&#34;スタックとキュー&#34;&gt;スタックとキュー&lt;/h2&gt;
&lt;p&gt;スタックとキューはとても基本的なデータ構造．スタックとキューの本質は &lt;strong&gt;データをどのように扱うか&lt;/strong&gt; という部分．スタックやキューは配列や連結リストを用いて用意に実装でき，配列や連結リストの上手な使い方の部分がスタックやキューの本質であるとも言える．まあ，組み込み系など資源が限られている環境では実装方法自体に注意を向ける必要があることもある．&lt;/p&gt;
&lt;h3 id=&#34;スタック&#34;&gt;スタック&lt;/h3&gt;
&lt;p&gt;スタックは「データをLast-In-First-Outというマナーで扱う」データ構造である．スタックには，「データを積む」と「データを取り出す」という操作ができる．ここで大事なのは， &lt;strong&gt;一番最後に追加したアイテムを一番最初に取り出す&lt;/strong&gt; というところである．&lt;/p&gt;
&lt;h3 id=&#34;キュー&#34;&gt;キュー&lt;/h3&gt;
&lt;p&gt;キューは「データをFirst-In-First-Outというマナーで扱う」データ構造である．キューには「データを入れる」と「データを取り出す」という操作ができ，大事なのは &lt;strong&gt;一番最初に追加したアテムを一番最初に取り出す&lt;/strong&gt; というところである．&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;p&gt;簡易的な実装をしてみる．スタックとキューはとても基本的で大事なデータ構造なので，大抵の場合もっと作り込まれた実装が標準ライブラリなどの形で提供されているので，自前実装よりそっちを使うほうが安心感がある．以下では配列を用いた実装を示すが，ほかにも連結リストを用いて実装することもできる．&lt;/p&gt;
&lt;h3 id=&#34;スタック-1&#34;&gt;スタック&lt;/h3&gt;
&lt;p&gt;スタックを配列を用いて実装する．ここではスタックの一番上を指す変数&lt;code&gt;top&lt;/code&gt;が必要になり，この&lt;code&gt;top&lt;/code&gt;がスタックの真髄．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; st[MAX];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
  top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_empty&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_full&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MAX);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_full()) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: stack is full&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
  }
  st[top] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v;
  top&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_empty()) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: sstack is empty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  top&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; st[top];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  init();

  push(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
  push(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  push(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pop() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pop() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  push(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pop() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;キュー-1&#34;&gt;キュー&lt;/h3&gt;
&lt;p&gt;キューを配列を用いて実装する．ここではキューの頭とお尻の管理が必要になる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; qu[MAX];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
  head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_empty&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tail);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_full&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (tail&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;MAX);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_full()) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: queue is full&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
  }
  qu[tail] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v;
  tail&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tail &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MAX) {
    tail &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_empty()) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: queue is empty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qu[head];
  head&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (head &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; MAX) head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  init();

  enqueue(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
  enqueue(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  enqueue(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dequeue() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dequeue() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  enqueue(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dequeue() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;標準ライブラリを使う&#34;&gt;標準ライブラリを使う&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::stack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; s;
  s.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
  s.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  s.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; s.pop();
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; s.pop();
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; s.pop();

  s.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; s.pop();
  reteurn &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
  q.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
  q.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  q.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; q.front() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; q.pop();
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; q.front() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; q.pop();
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; q.front() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; q.pop();

  q.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; q.front() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl; q.pop();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;スタックやキューで解決できる問題&#34;&gt;スタックやキューで解決できる問題&lt;/h2&gt;
&lt;h3 id=&#34;カッコ列の整合性をスタックを用いて確認する問題&#34;&gt;カッコ列の整合性をスタックを用いて確認する問題&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;((()(()))())(())&lt;/code&gt;のようなカッコ記号の列が与えられたときに，左括弧と右括弧の対応がきちんと取れているのかを確認する問題は，スタックを用いることできれいに解ける．&lt;/p&gt;
&lt;p&gt;カッコ列の特徴は，カッコ列を左から読んでいったときに &lt;strong&gt;一番最後に見つけた左括弧に対応するのは，一番最初に見つけた右括弧である&lt;/strong&gt; というところである．この性質がまさしく LIFOであり，スタックを用いるときれいに解ける理由である．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s) {
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ps;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)s.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;) st.push(i);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (st.empty()) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      ps.push_back(make_pair(t, i));
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;st.empty()) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;too many (&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
  }

  sort(ps.begin(), ps.end());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p: ps) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  check(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;((()(()))())(())&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;逆ポーランド記法で記述された数式の計算&#34;&gt;逆ポーランド記法で記述された数式の計算&lt;/h3&gt;
&lt;p&gt;逆ポーランド記法とは，数式の記法の1つで，&lt;/p&gt;
&lt;p&gt;$$
(1 + 2) \times (3 - 4)
$$&lt;/p&gt;
&lt;p&gt;という一般的なものに対して，&lt;/p&gt;
&lt;p&gt;$$
1 \space 2 \space + 3 \space 4 \space - \space \times
$$&lt;/p&gt;
&lt;p&gt;と， &lt;strong&gt;演算子を，演算対象に対して後置する&lt;/strong&gt; ような記法である．&lt;/p&gt;
&lt;p&gt;逆ポーランド記法の特徴は，逆ポーランド記法で書かれた数式を左から右へ読んでいく時に，最初に遭遇する演算子の適用先が，一番最後に遭遇する数字であるという点である．この特徴がスタックのデータの扱い方と符合する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  string s;
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; st;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;) {
      b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      st.push(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;) {
      b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      st.push(a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;) {
      b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      st.push(a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;) {
      b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st.top(); st.pop();
      st.push(a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; b);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      st.push(stoi(s));
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; st.top() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ヒストグラム中の面積最大の長方形&#34;&gt;ヒストグラム中の面積最大の長方形&lt;/h3&gt;
&lt;p&gt;ヒストグラムが与えられたときに，そのヒストグラムの外枠に内包されるような長方形のうち，面積が最大のものを求める問題はスタックで解くことができる．&lt;/p&gt;
&lt;p&gt;スタックを使わないで求めようとするならば，長方形の底辺を形成する範囲を全て探索すれば原理的には解くことができ，$O(n^2)$の計算量がかかる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_rectangle_area&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; buffer[]) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INF;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; j; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        minh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(minh, buffer[k]);
      }
      maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maxv, minh &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maxv;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをスタックを用いると，$O(n)$で解くことができる．&lt;/p&gt;
&lt;p&gt;スタックにはヒストグラムを形成する各長方形の情報を記録する．この情報には，長方形の高さ&lt;code&gt;height&lt;/code&gt;とその左端の位置&lt;code&gt;pos&lt;/code&gt;が記録されている．まず，スタックを空にして，ヒストグラムを左から順番に右に向かって見ていきながら（&lt;code&gt;i&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;n-1&lt;/code&gt;まで動きながら）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;スタックが空ならば，スタックに今見ている長方形の情報&lt;code&gt;(height, pos)&lt;/code&gt;を積む&lt;/li&gt;
&lt;li&gt;スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より低いならば，スタックに今見ている長方形の&lt;code&gt;(height, pos)&lt;/code&gt;を積む&lt;/li&gt;
&lt;li&gt;スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より等しいならば，何もしない&lt;/li&gt;
&lt;li&gt;スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より高いならば，
&lt;ol&gt;
&lt;li&gt;スタックが空でなく，スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形の高さ以上である限り，スタックから長方形の情報を取り出し，その面積を計算し，最大値を更新する．長方形の横の長さは現在の位置と記録されている左端の位置から計算できる．&lt;/li&gt;
&lt;li&gt;1が終わったら，スタックに今見ている長方形の情報を追加する．ただし，このときの左端の位置は最後にスタックから取り出した長方形の&lt;code&gt;pos&lt;/code&gt;の値とする．&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; height;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pos;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_rectangle_area&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; buffer[]) {
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Rectangle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; S;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  buffer[size] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    Rectangle rec;
    rect.height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buffer[i];
    rect.pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (S.empty()) S.push(rect);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (S.top().height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rect.height) S.push(rect);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rect.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S.top().height) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;S.empty() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rect.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; S.top().height) {
          Rectangle pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S.top(); S.pop();
          &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; area &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre.height &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pre.pos);
          maxv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maxv, area);
          target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre.pos;
        }
        rect.pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target;
        S.push(rect);
      }
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; maxv;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; buffer[MAX &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; size;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; buffer[i];
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; get_rectangle_area(size, buffer) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上のようなアルゴリズムの亜種として，数列$A_1, A_2, &amp;hellip;, A_N$に対して，$A_i \leq A_j$（$j &amp;lt; i$）なる最大の$j$を見つけるアルゴリズムがある．たとえば，数列&lt;/p&gt;
&lt;p&gt;$$
6, 2, 4, 1, 3, 5, 7
$$&lt;/p&gt;
&lt;p&gt;に対しては&lt;/p&gt;
&lt;p&gt;$$
0, 1, 1, 3, 3, 1, 0
$$&lt;/p&gt;
&lt;p&gt;となる．原理的には，各要素に対してそれより前のすべての要素を探索すればよく，$O(N^2)$かかるが解ける．スタックを用いると$O(N)$で解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stsdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100000000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; A(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; A[i];

  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; st;
  st.push(make_pair(INF, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (st.top().first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; A[i]) st.pop();
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; st.top().second() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    st.push(make_pair(A[i], i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ラウンドロビンスケジューリング&#34;&gt;ラウンドロビンスケジューリング&lt;/h3&gt;
&lt;p&gt;OSのプロセスのスケジューリングに用いられているアルゴリズム．それぞれのプロセスを一定時間だけ処理して，それで終わらなければキューの最後に突っ込む．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, Q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Q;
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string ,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; que;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    string name;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; time;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; time;
    que.push(make_pair(name, time));
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;que.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; que.front(); que.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Q &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; now.second) {
      current_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; Q;
      now.second &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; Q;
      que.push(now);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      current_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; now.second;
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; now.first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; @ &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; current_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;迷路&#34;&gt;迷路&lt;/h3&gt;
&lt;p&gt;グリッドグラフとしてグラフが与えられ，その迷路が解けるのか，解けるなら最短手数はいくつで，そのルートを通れば最短手数で迷路を解けるのかを与える．幅優先探索や深さ優先探索で，スタートからゴールまで探索していくのが良い．以下では幅優先探索で解く．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; maze(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; maze[h];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sh, sw, gh, gw;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;) {
        sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        sw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;) {
        gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        gw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
      }
    }
  }


  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dist(H, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
  dist[sh][sw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; prevh(H, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; prevw(H, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
  q.push(make_pair(sh, sw));

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.first;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.second;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      q.push(make_pair(nh, nw));
      dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      prevh[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h;
      prevw[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gh, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gw;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prevh[h];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prevw[w];
    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ph, w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pw;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;setw(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; maze[i][j];
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Union Find Tree</title>
      <link>/ja/post/union-find-tree/</link>
      <pubDate>Fri, 10 Apr 2020 18:20:31 +0900</pubDate>
      <guid>/ja/post/union-find-tree/</guid>
      <description>&lt;h2 id=&#34;union-find木&#34;&gt;Union-Find木&lt;/h2&gt;
&lt;p&gt;「アイテムのグループ分け」を木を用いて管理する．具体的には，「同じグループに所属するアイテム同士は，根を同じとする木に属する」として管理する．グループ分けの情報を木を使って管理することのウレシミは，「アイテム$i$とアイテム$2$が同じグループに属しているか」と「アイテム$1$に属しているグループとアイテム$2$に属しているグループを併合して1つのグループにする」という処理が高速に実現できること．&lt;/p&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnionFind&lt;/span&gt; {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parents;

  UnionFind(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; parents(size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) parents[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(parents[x]);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unite&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    parents[rootx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rooty;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;same&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;練習問題&#34;&gt;練習問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://abc097.contest.atcoder.jp/tasks/arc097_b&#34;&gt;ABC 97 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atc001.contest.atcoder.jp/tasks/unionfind_a&#34;&gt;ATC 1 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arc032.contest.atcoder.jp/tasks/arc032_2&#34;&gt;ARC 32 D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;abc-97-dhttpsabc097contestatcoderjptasksarc097_b&#34;&gt;&lt;a href=&#34;https://abc097.contest.atcoder.jp/tasks/arc097_b&#34;&gt;ABC 97 D&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnionFind&lt;/span&gt; {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parents;

  UnionFind(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; parents(size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) parents[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(parents[x]);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unite&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    parents[rootx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rooty;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;same&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; P(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; P[i];

  UnionFind tree(N);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y; x&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; y&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    tree.unite(x, y);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tree.same(i. P[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;atc-1-bhttpsatc001contestatcoderjptasksunionfind_a&#34;&gt;&lt;a href=&#34;https://atc001.contest.atcoder.jp/tasks/unionfind_a&#34;&gt;ATC 1 B&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnionFind&lt;/span&gt; {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parents;

  UnionFind(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; parents(size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) parents[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(parents[x]);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unite&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    parents[rootx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rooty;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;same&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, Q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Q;
  UnionFind tree(N);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Q; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      tree.unite(x, y);
    } els {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tree.same(x, y)) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;arc-32-dhttpsarc032contestatcoderjptasksarc032_2&#34;&gt;&lt;a href=&#34;https://arc032.contest.atcoder.jp/tasks/arc032_2&#34;&gt;ARC 32 D&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnionFind&lt;/span&gt; {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parents;

  UnionFind(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; parents(size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) parents[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parents[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(parents[x]);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unite&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    parents[rootx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rooty;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;same&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rooty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rootx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rooty;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  UnionFind tree(N);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y; x&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; y&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    tree.unite(x, y);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;tree.same(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i)) {
      tree.unite(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i);
      cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>「再帰」についての学び直し</title>
      <link>/ja/post/recursion/</link>
      <pubDate>Fri, 10 Apr 2020 18:10:28 +0900</pubDate>
      <guid>/ja/post/recursion/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再帰関数に対する「なんとなくわかる」を「書ける」にまで持っていきたいので，学び直し．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@drken さんの「&lt;a href=&#34;https://qiita.com/drken/items/23a4f604fa3f505dd5ad&#34;&gt;再帰関数を学ぶと，どんな世界が広がるか&lt;/a&gt;」を参考に，写経しながら学習．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ありがとうございます．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;再帰関数&#34;&gt;再帰関数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;再帰関数：自分自身を呼び出す&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;戻り値の型 func(引数)
{
    if (ベースケース)
    {
        return ベースケースに対する値;
    }

    func(次の引数); // ここで再帰呼び出し

    return 答え;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再帰関数を書くときのポイント&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ベースケースに対して必ず&lt;code&gt;return&lt;/code&gt;する&lt;/li&gt;
&lt;li&gt;再帰呼び出しをするとき，もとの問題より&lt;strong&gt;小さい&lt;/strong&gt;問題に対する呼び出しを行う．より小さい問題の系列が最終的にベースケースにたどり着くようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ベースケースに対する処理を必ず入れる．入れないと無限に自分を呼び出すことになって stack overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n$以下の正の整数の総和を再帰で計算するプログラム&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// base case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ベースケースに対しての&lt;code&gt;return&lt;/code&gt;を書くことで，再帰関数の有限停止性が得られる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィボナッチ数列の第$n$項を再帰関数で求める&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// base case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// base case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibo(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibo(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;フィボナッチ数列の第$n$項を再帰関数で求める実装では，$n$が大きくなると再帰関数の呼び出しが爆発してしまう&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;なので，結果をメモしておくと不必要に再帰関数を呼び出す必要がなくなり大きな$n$に対しても計算可能になる -&amp;gt; メモ化再帰（動的計画法）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; table(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;);
    table[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    table[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        table[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; table[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;memo)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// base case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// base case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memo[n] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n]; &lt;span style=&#34;color:#75715e&#34;&gt;// 計算済みなのでメモってあったのを返す
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; memo[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再帰関数は以下のような問題で使える&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（$n$を変数として）$n$重の&lt;code&gt;for&lt;/code&gt;文を書きたいとき：数独ソルバ・部分和問題など&lt;/li&gt;
&lt;li&gt;グラフ上の探索：トポロジカルソート・サイクル検出・二部グラフ判定など&lt;/li&gt;
&lt;li&gt;再帰的なアルゴリズム：ユークリッドの互除法・繰り返し自乗法
・再帰下降構文解析など&lt;/li&gt;
&lt;li&gt;分割統治法：マージソート・クイックソートなど&lt;/li&gt;
&lt;li&gt;メモ化再帰・動的計画法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n$重の&lt;code&gt;for&lt;/code&gt;ループを書きたい：$a_i$（$i = 0, 1, &amp;hellip;, n-1$）円のコインがそれぞれ 1 枚ずつ手元にあるとき，合計が$X$円になるようなコインの選び方は何通りあるか&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部で$2^n$通りのコインの選び方がある&lt;/li&gt;
&lt;li&gt;各コインについて「選ぶ選ばない」で&lt;code&gt;for&lt;/code&gt;ループを書こうとすると$n$重の&lt;code&gt;for&lt;/code&gt;ループになるが，実行時に$n$が決まるのでそのまま書けない&lt;/li&gt;
&lt;li&gt;$a_{n-1}$を選ぶか選ばないかは，$a_0$から$a_{n-2}$の組み合わせで$X-a_{n-1}$円を実現できるかにかかっている&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;$a_1$を選ぶか選ばないかは，$a_0$から$a_0$の組み合わせで$X-a_{n-1}-a_{n-2}-&amp;hellip;-a_2-a_1$円を実現できるかにかかっている&lt;/li&gt;
&lt;li&gt;$a_0$を選ぶか選ばないかは，$a_0$から$a_{-1}$の組み合わせで$X-a_{n-1}-a_{n-2}-&amp;hellip;-a_2-a_1-a_0$円を実現できるかにかかっている -&amp;gt; $a_0$を選ぶか選ばないかは，$X$が$0$であるかどうかにかかっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a_0-a_iのコインで合計xを実現できるかを計算
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// 合計0を実現することは可能
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (solve(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, x, a)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (solve(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], a)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;メモ化による高速化：&lt;code&gt;memo[i][x]&lt;/code&gt;に&lt;code&gt;solve(i, x)&lt;/code&gt;の結果を入れておく&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;memo)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memo[i][x] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[i][x];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (solve(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, x, a, memo)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[i][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (solve(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], a, memo)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[i][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[i][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;数独ソルバ&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(Field &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;field, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Field&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;results)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; emptyi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, emptyj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; emptyi &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; emptyj &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
                emptyi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
                emptyj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }
        }
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// ベースケース：すべてのマスを埋め終わった
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (emptyi &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; emptyj &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    {
        results.push_back(field);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; usable(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, true);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 同じ列に同じ数字はだめ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[emptyi][i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) usable[field[emptyi][i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 同じ行に同じ数字はだめ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[i][emptyj] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) usable[field[i][emptyj]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 同じブロック内に同じ数字はだめ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; emptyi &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; emptyj &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; di &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bi &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; di &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; bi &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; di&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bj &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dj &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; bj &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dj&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[di][dj] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                {
                    usable[field[di][dj]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
                }
            }
        }
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// 入れられる数字全部試す
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;usable[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        field[emptyi][emptyj] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v; &lt;span style=&#34;color:#75715e&#34;&gt;// 空きマスにおける数字を置いてみた
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        solve(field, results); &lt;span style=&#34;color:#75715e&#34;&gt;// 再帰的に，空きマスの個数が一つ減った問題を解きに行く
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

    field[emptyi][emptyj] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 深さ優先探索なので戻ったときに状態を戻しておく
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    Field field(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        string line; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; line;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (line[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line[j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
            field[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num;
        }
    }

    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Field&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results;
    solve(field, results);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (results.size() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no solution...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; results.size()) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;more than one solution&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
        Field ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            {
                cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
            }
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;グラフ上の探索：深さ優先探索は再帰関数で書ける&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;seen)
{
    seen[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// 頂点vを訪れたことを記録
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; next: G[v])
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (seen[next]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// vの隣接頂点のうち訪問済みのものはスキップ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dfs(next, G, seen);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
    Graph G(N);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b;
        G[a].push_back(b);
    }

    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; seen(N, false);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (seen[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 連結ではないグラフにも対応
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dfs(v, G, seen);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;グラフ上の探索：トポロジカルソート．再帰関数から抜けるタイミングでメモっておくことでトポロジカルソートになる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rec&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graoh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;seen, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;order)
{
    seen[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; next: G[v])
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (seen[next]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        rec(next, G, seen, order);
    }

    order.push_back(v); &lt;span style=&#34;color:#75715e&#34;&gt;// 抜けるタイミングでメモ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
    Graph G(N);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b;
        G[a].push_back(b);
    }
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; seen(N, false);
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; order;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (seen[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 連結ではないグラフにも対応
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        rec(v, G, seen, order);
    }

    reverse(order.begin(), order.end());

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; v: order) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt;;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ユークリッドの互除法：最大公約数を求める&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; b)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b) swap(a, b);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; gcd(b, a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lcm&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; b)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b) swap(a, b);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; gcd(a, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;繰り返し自乗法：効率的に$x^n mod m$を求める&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modpow&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; m)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// ベースケース
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; modpow(x, n&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, m);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; half &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// nが奇数のとき
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Union-Find tree&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnionFindTree&lt;/span&gt;
{
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parent, rank;

    UnionFindTree(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; parent(size, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), rank(size, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {}

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size) {
        parent.assign(size, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        rank.assign(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (parent[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parent[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(parent[x]);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_same&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root(x) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; root(y);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y)
    {
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(x);
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root(y);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; y) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rank[x] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rank[y]) swap(x, y);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rank[x] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rank[y]) rank[x]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        parent[y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;再帰下降構文解析&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#75715e&#34;&gt;// 再帰下降パーサ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parser&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// results
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; root;                       &lt;span style=&#34;color:#75715e&#34;&gt;// vals[root] is the answer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vals;                 &lt;span style=&#34;color:#75715e&#34;&gt;// value of each node
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ops;               &lt;span style=&#34;color:#75715e&#34;&gt;// operator of each node (&amp;#39;a&amp;#39; means leaf values)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; left, right;        &lt;span style=&#34;color:#75715e&#34;&gt;// the index of left-node, right-node
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ids;                &lt;span style=&#34;color:#75715e&#34;&gt;// the node-index of i-th value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
        vals.clear(); ops.clear(); left.clear(); right.clear(); ids.clear();
        ind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// generate nodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newnode&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; op, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lp, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rp, T val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        ops.push_back(op); left.push_back(lp); right.push_back(rp);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) {
            vals.push_back(val);
            ids.push_back(ind&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;) vals.push_back(vals[lp] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; vals[rp]);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) vals.push_back(vals[lp] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; vals[rp]);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) vals.push_back(vals[lp] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vals[rp]);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) vals.push_back(vals[lp] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; vals[rp]);
            ids.push_back(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)vals.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// main solver
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    T &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;S) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        string nS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c : S) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) nS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c;
        root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expr(nS, p);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; vals[root];
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// parser
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;S, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factor(S, p);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)S.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (S[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; S[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[p]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factor(S, p);
            lp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newnode(op, lp, rp);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lp;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;S, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value(S, p);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)S.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (S[p]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; S[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[p]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value(S, p);
            lp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newnode(op, lp, rp);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lp;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;S, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (S[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p;                    &lt;span style=&#34;color:#75715e&#34;&gt;// skip &amp;#39;(&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expr(S, p);
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p;                    &lt;span style=&#34;color:#75715e&#34;&gt;// skip &amp;#39;)&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lp;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            T val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)S.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; S[p] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)S.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; S[p] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; S[p] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {
                val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(S[p] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
                &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;p;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newnode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, val);
        }
    }
};


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    Parser&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parse;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; parse.solve(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6 + 3&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; parse.solve(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3 + (10 - 4) / 2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; parse.solve(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;((6 - 3) * 2 + 10 / 5) * (-3)&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;末尾再帰による最適化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再帰関数内での自身の呼び出しが再帰関数内の末尾，正確には&lt;code&gt;return&lt;/code&gt;の直前なら，再帰関数のコールスタックの再利用が可能なので通常の繰り返しと同じ計算が可能&lt;/li&gt;
&lt;li&gt;再帰関数を末尾再帰に書き換えることでより大きい問題を計算できることがある&lt;/li&gt;
&lt;li&gt;ref: &lt;a href=&#34;https://qiita.com/pebblip/items/cf8d3230969b2f6b3132&#34;&gt;https://qiita.com/pebblip/items/cf8d3230969b2f6b3132&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;末尾再帰ではない階乗の計算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// この再帰呼び出しは，再帰呼び出しの結果を用いて計算をしているので末尾再帰ではない（再帰呼び出しがreturnの直前ではない）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;末尾再帰に書き換えた階乗の計算&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorialTail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// accumに直前の結果をためておく
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorialTail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// このfactorialTailの呼び出しは末尾再帰
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorialTail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Babel では末尾再帰な再帰関数は通常の&lt;code&gt;while&lt;/code&gt;ループで書き直す最適化が実装されている&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// 再帰呼び出しが除去されている
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorialTail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_x2&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_again&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;_function&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_again&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_x&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_x2&lt;/span&gt;;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;_again&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#a6e22e&#34;&gt;_x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;_x2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accum&lt;/span&gt;;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;_again&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_function&lt;/span&gt;;
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorialTail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>グラフ探索</title>
      <link>/ja/post/graph-traversal/</link>
      <pubDate>Tue, 07 Apr 2020 10:27:03 +0900</pubDate>
      <guid>/ja/post/graph-traversal/</guid>
      <description>&lt;h2 id=&#34;グラフを探索したい&#34;&gt;グラフを探索したい&lt;/h2&gt;
&lt;p&gt;計算機を「与えられた対象の中から，目的に合致するものを見つけ出したり，最良のものを見つけ出す」という「探索」目的で用いる場面は多くある．世の中にはびこっている問題たちは，考えられるすべての場合をくまなく調べつ尽くすことによって原理的に解決することができる．&lt;/p&gt;
&lt;p&gt;問題を「グラフ」としてモデル化・定式化することで高速な探索アルゴリズムを考えることができることが多い．例えば，首都圏の電車の乗換案内アプリケーションはほとんどそのままグラフ上の最短経路探索問題として定式化できるし，他にもオセロや将棋などのボードゲームも，ユーザの操作によって盤上の状態を頂点とするグラフ上を移動しているとすればグラフ上の探索問題とみなせる．&lt;/p&gt;
&lt;h2 id=&#34;グラフ&#34;&gt;グラフ&lt;/h2&gt;
&lt;p&gt;グラフとは，&lt;strong&gt;対象物を構成する事物の集合とその集合を構成する対象物間の関係にのみ注目したデータ構造&lt;/strong&gt;のことで，卑近な例で言えば，人間関係はグラフとして表現することができる．&lt;/p&gt;
&lt;p&gt;**グラフ$G$**はそれを構成する頂点の有限集合$V = \{v_1, v_2, &amp;hellip;, v_n\}$と頂点間に生える辺の有限集合$E = \{e_1, e_2, &amp;hellip;, e_m\}$の組として定義される．&lt;/p&gt;
&lt;p&gt;$$
G = (V, E)
$$&lt;/p&gt;
&lt;p&gt;頂点$v_i$と$v_j$が辺$e$によって接続されているとき，頂点$v_i$と$v_j$は互いに&lt;strong&gt;隣接&lt;/strong&gt;しているといい，$v_i$，$v_j$は$e$の&lt;strong&gt;端点&lt;/strong&gt;であるという．&lt;/p&gt;
&lt;p&gt;グラフ$G$の各辺$e = (v_i, v_j)$について，$(v_i, v_j)$と$(v_j, v_i)$を区別しないとき，$G$を&lt;strong&gt;無向グラフ&lt;/strong&gt;と呼び，逆に区別するとき&lt;strong&gt;有向グラフ&lt;/strong&gt;と呼ぶ．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph1.png&#34; data-caption=&#34;無向グラフ&#34;&gt;
&lt;img src=&#34;graph1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    無向グラフ
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph2.png&#34; data-caption=&#34;有向グラフ&#34;&gt;
&lt;img src=&#34;graph2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    有向グラフ
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;グラフ$G$上の 2 頂点$u$，$v$について，$u$を出発して隣接する頂点をたどることで$v$に到達できるとき，その経路を**$u$-$v$路**という．またこのとき$u$をその路の**始点**，$v$を**終点**という．さらに，路のうち，同じ頂点を 2 度以上通らないものを**パス**という．また，路のうち，始点と終点が等しいものを**閉路**（または**サイクル**）と呼ぶ．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph3.png&#34; data-caption=&#34;パス&#34;&gt;
&lt;img src=&#34;graph3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    パス
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph4.png&#34; data-caption=&#34;閉路&#34;&gt;
&lt;img src=&#34;graph4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    閉路
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;グラフ$G$の任意の 2 頂点$u$，$v$ $\in V$に対して，$u$-$v$パス・$v$-$u$パスが存在するとき，$G$は&lt;strong&gt;連結&lt;/strong&gt;であるという．特に，有向グラフ$G$の任意の 2 頂点$u$，$v$ $\in V$に対して，$u$-$v$パス・$v$-$u$パスが存在するとき，$G$は&lt;strong&gt;強連結&lt;/strong&gt;であるという．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph5.png&#34; data-caption=&#34;連結なグラフ&#34;&gt;
&lt;img src=&#34;graph5.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    連結なグラフ
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph6.png&#34; data-caption=&#34;連結でないグラフ&#34;&gt;
&lt;img src=&#34;graph6.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    連結でないグラフ
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;計算機上でのグラフの実装&#34;&gt;計算機上でのグラフの実装&lt;/h2&gt;
&lt;p&gt;計算機上ではグラフは大きく分けて以下の二通りがある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;隣接リスト&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;グラフ$G$を構成する各頂点について，その頂点の隣接頂点をリストとして保持することでグラフを表現する．頂点数に対して辺の本数が比較的少ない疎なグラフの実装において（隣接行列表現と比較して）有利なことがある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;隣接行列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;グラフ$G$を構成する$n$頂点について，$n \times n$の大きさのテーブルを用意し，頂点$i$-$j$間に辺が生えているとき，そのテーブルの$(i, j)$に&lt;code&gt;1&lt;/code&gt;を立てることで辺を表現する．頂点数に対して辺の本数が比較的多い密なグラフの実装において（隣接リスト表現と比較して）有利なことがある．&lt;/p&gt;
&lt;p&gt;以下では，グラフを隣接リストとして実装する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;
Graph G;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例えば，入力が以下のように与えられたとき，グラフ$G$は次のように構築される．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;入力&lt;/strong&gt;】：&lt;/p&gt;
&lt;p&gt;$$
N \space M
$$&lt;/p&gt;
&lt;p&gt;$$
u_1 \space v_1
$$&lt;/p&gt;
&lt;p&gt;$$
u_2 \space v_2
$$&lt;/p&gt;
&lt;p&gt;$$
u_3 \space v_3
$$&lt;/p&gt;
&lt;p&gt;$$
&amp;hellip;
$$&lt;/p&gt;
&lt;p&gt;$$
u_M \space v_M
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    &lt;span style=&#34;color:#75715e&#34;&gt;// G[v].push_back(u);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;辺に重みのあるグラフであれば，&lt;code&gt;Edge&lt;/code&gt;という辺を表す構造体を定義してやるとわかりやすい．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;入力&lt;/strong&gt;】：&lt;/p&gt;
&lt;p&gt;$$
N \space M
$$&lt;/p&gt;
&lt;p&gt;$$
u_1 \space v_1 \space w_1
$$&lt;/p&gt;
&lt;p&gt;$$
u_2 \space v_2 \space w_2
$$&lt;/p&gt;
&lt;p&gt;$$
u_3 \space v_3 \space w_3
$$&lt;/p&gt;
&lt;p&gt;$$
&amp;hellip;
$$&lt;/p&gt;
&lt;p&gt;$$
u_M \space v_M \space w_M
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; weight;
  Edge(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; weight)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; to(to), weight(weight) {}
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; from, to, weight; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; to &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; weight;
    G[from].push_back(Edge(to, weight));
    &lt;span style=&#34;color:#75715e&#34;&gt;// G[to].push_back(Edge(from, weight));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;グラフの探索&#34;&gt;グラフの探索&lt;/h2&gt;
&lt;p&gt;一般にグラフ上の探索にはどのような方針が考えられるのだろうか．例えば以下のようなグラフに対する頂点 0 を始点とした探索を考える．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;traversal1.png&#34; data-caption=&#34;頂点$0$から探索を始める．&#34;&gt;
&lt;img src=&#34;traversal1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    頂点$0$から探索を始める．
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;頂点$0$に訪問した後，次に訪問する頂点を探す．つまり頂点$0$の隣接頂点を調べると，頂点$1$と頂点$2$を発見し保留メモに追記する．とりあえず，次に訪問する頂点を頂点$1$に決め，探索を続ける．&lt;/p&gt;
&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;traversal2.png&#34; data-caption=&#34;頂点$0$に訪問した．&#34;&gt;
&lt;img src=&#34;traversal2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    頂点$0$に訪問した．
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;traversal3.png&#34; data-caption=&#34;$次に訪問する頂点を決める．$&#34;&gt;
&lt;img src=&#34;traversal3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    $次に訪問する頂点を決める．$
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;頂点$1$に訪問した後，次に訪問する頂点を探す．つまり，頂点$1$の隣接頂点を調べると，頂点$3$と頂点$4$を発見し保留メモに追記する．．そこで次に訪問する頂点の選び方が 2 通り考えられる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;「後に保留メモに追記した頂点$3$・頂点$4$を，頂点$2$より先に訪問する」&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「先に保留メモに追記した頂点$2$を，頂点$3$・頂点$4$より先に訪問する」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「後に保留メモに追記した頂点$3$・頂点$4$を，頂点$2$より先に訪問する」という方針で続く探索を &lt;strong&gt;深さ優先探索 Depth-First Search（DFS）&lt;/strong&gt; と呼び，「先に保留メモに追記した頂点$2$を，頂点$3$・頂点$4$より先に訪問する」という方針で続く探索を &lt;strong&gt;幅優先探索 Breadth-First Search（BFS）&lt;/strong&gt; と呼ぶ．&lt;/p&gt;
&lt;p&gt;DFS では保留メモの挙動が，Last-In-First-Out なのでスタックや再帰関数で実装することができる．一方で，BFS では保留メモの挙動が，First-In-First-Out なのでキューで実装することができる．&lt;/p&gt;
&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;traversal4.png&#34; &gt;
&lt;img src=&#34;traversal4.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;traversal.png&#34; &gt;
&lt;img src=&#34;traversal.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;どういう方針で保留メモから次に訪れる頂点を選択するかを一旦脇においておいて，グラフ上の探索を書き下すと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;has_visited[i]: 頂点iが訪問済みならtrue，そうでないならfalseを格納する配列
suspended: 保留メモ（未訪問かつ存在を発見済みの頂点の集合）

has_visited全体をfalseで初期化・suspendedを空に初期化;
has_visited[始点頂点] = true; suspendedに始点頂点を追加;
while (!suspendedが空) {
  u := suspendedから1つ頂点を取り出す（このときの取り出し方で探索の性格が決まる）;
  for (v: uの隣接頂点) {
    if (has_visited[v]) continue; // すでに訪問済みだったのでスルー
    else {
      has_visited[u] = true; // 訪問したので印をつける
      suspended.append(v);   // 保留メモに追記する
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;また，閉路が存在しないかつ連結であるようなグラフは「&lt;strong&gt;木&lt;/strong&gt;」と呼ばれる．木は，グラフの特殊型であるので，グラフでの探索と同様の議論が木での探索にも言える．&lt;/p&gt;
&lt;h2 id=&#34;深さ優先探索-depth-frist-seachdfs&#34;&gt;深さ優先探索 Depth-Frist Seach（DFS)&lt;/h2&gt;
&lt;p&gt;グラフ上を探索する手法として有名．「行けるところまで進んで，行き止まりになったら戻って別の道を試す」という方針でグラフ上を探索する．上の説明で言えば「保留メモから LIFO で頂点を取り出す」のが DFS．「保留メモから LIFO で頂点を取り出す」という方針がスタックや再帰関数の性質と一致し実装に用いられる．&lt;/p&gt;
&lt;h3 id=&#34;スタックによる-dfs-の実装&#34;&gt;スタックによる DFS の実装&lt;/h3&gt;
&lt;p&gt;スタックを用いて DFS を実装すると以下のようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.top(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          has_visited[u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
          suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  has_visited.assign(N, false);

  DFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;再帰関数による-dfs-の実装&#34;&gt;再帰関数による DFS の実装&lt;/h3&gt;
&lt;p&gt;再帰関数を用いて DFS を実装すると以下のようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; u: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[u]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, u);
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  has_visited.assign(N, false);

  DFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;幅優先探索-breadth-first-searchbfs&#34;&gt;幅優先探索 Breadth-First Search（BFS）&lt;/h2&gt;
&lt;p&gt;グラフ上を探索する手法として有名．「分かれ道に遭遇したら，全ての分かれ道についてちょっとずつ等しく訪問していく」という方針でグラフ上を探索する．上の説明で言えば「保留メモから FIFO で頂点を取り出す」のが BFS．「保留メモから FIFO で頂点を取り出す」という方針がキューの性質と一致し実装に用いられる．&lt;/p&gt;
&lt;h3 id=&#34;キューによる-bfs-の実装&#34;&gt;キューによる BFS の実装&lt;/h3&gt;
&lt;p&gt;キューを用いて BFS を実装すると以下のようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          has_visited[w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
          suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  has_visited.assign(N, false);

  BFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bfs-にあって-dfs-にないもの&#34;&gt;BFS にあって DFS にないもの&lt;/h3&gt;
&lt;p&gt;BFS は全頂点を始点からの辺の本数によってレベル分けすることになる．特に，全ての辺の重さが$1$であるような重み付きグラフで BFS を行うと，&lt;strong&gt;その始点からの各頂点の最短距離を求めるアルゴリズム&lt;/strong&gt;としても使うことができる．ただし，&lt;strong&gt;BFS が最短距離を求めるアルゴリズムとして使えるのは，全ての辺の重さが$1$であるグラフに限る&lt;/strong&gt;ことに注意しなければならない．そうでないグラフなら dijkstra 法など他のアルゴリズムを用いないと正しい答えが得られない．&lt;/p&gt;
&lt;p&gt;BFS ですべての辺の重さが$1$であるようなグラフを構成する各頂点の，頂点$0$からの最短距離を求める処理を実装すると次の通り．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; distance; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;-- vector&amp;lt;bool&amp;gt; has_visited;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  distance[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 始点の距離は0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  suspended.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (distance[w] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 訪問済みなのでスルー
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          distance[w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; distance[u] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 頂点wは頂点uの隣接頂点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) distance[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// distance[i] == -1 --&amp;gt; 頂点iには未訪問
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  BFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; distance[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;グラフ探索の例題&#34;&gt;グラフ探索の例題&lt;/h2&gt;
&lt;h3 id=&#34;到達可能性判定&#34;&gt;到達可能性判定&lt;/h3&gt;
&lt;p&gt;2 頂点$s$，$t$ $\in V$が与えられ，$s$から$t$へ辺をたどって到達することが可能であるかを判定する問題．単純に，&lt;strong&gt;$s$を始点とした DFS または BFS を実行し，&lt;code&gt;has_visited[s]&lt;/code&gt;を確かめれば良い&lt;/strong&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタックを使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.top(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          has_visited[u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
          suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M, s, t; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
  }
  has_visited.assign(N, false);
  DFS(G, s);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[t]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;再帰を使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, w);
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M, s, t; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
  }
  has_visited.assign(N, false);
  DFS(G, s);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[t]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;BFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          has_visited[u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
          suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M, s, t; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
  }
  has_visited.assign(N, false);
  BFS(G, s);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[t]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;グリッドグラフ&#34;&gt;グリッドグラフ&lt;/h4&gt;
&lt;p&gt;グラフが二次元グリッドとして与えられるような問題も頻出である．グリッド形式でのグラフの入力はたいてい以下のような形式である．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;入力&lt;/strong&gt;】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10 10       // 盤面サイズ（縦・横）
s.........  // s: スタート位置
#########.  // g: ゴール位置
#.......#.  // 「.」は通路
#..####.#.  // 「#」は壁（進むことができない）
##....#.#.
#####.#.#.
g.#.#.#.#.
#.#.#.#.#.
#.#.#.#.#.
#.....#...
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;与えられた迷路内を，上下左右に移動しながら通路マス&lt;code&gt;.&lt;/code&gt;のみを通って&lt;code&gt;s&lt;/code&gt;から&lt;code&gt;g&lt;/code&gt;までたどり着けるかを判定する．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタックを使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; maze;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited[&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;];
stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w) {
  suspended.push(make_pair(h, w));
  has_visited[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ch, cw;
    tie(ch, cw) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.top(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cw &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 場外なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 壁なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[nh][nw]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        has_visited[ch][cw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
        suspended.push(make_pair(nh, nw));
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  maze.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; maze[h];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sh, sw, gh, gw;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;) sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, sw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;) gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, gw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
    }
  }

  memset(has_visited, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(has_visited));

  DFS(sh, sw);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[gh][gw]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;再帰を使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; maze;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited[&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w) {
  has_visited[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx[dir];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy[dir];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 場外なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 壁なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[nh][nw]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;

    DFS(nh, nw);
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  maze.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; maze[h];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sh, sw, gh, gw;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;) sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, sw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;) gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, gw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
    }
  }

  memset(has_visited, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(has_visited));

  DFS(sh, sw);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[gh][gw]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;BFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; maze;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited[&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;];
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w) {
  suspended.push(make_pair(h, w));
  has_visited[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ch, cw;
    tie(ch, cw) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cw &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 場外なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 壁なので進めず
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[nh][nw]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        has_visited[ch][cw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
        suspended.push(make_pair(nh, nw));
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  maze.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; maze[h];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sh, sw, gh, gw;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;) sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, sw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (maze[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;) gh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h, gw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
    }
  }

  memset(has_visited, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(has_visited));

  BFS(sh, sw);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[gh][gw]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;連結成分のカウント&#34;&gt;連結成分のカウント&lt;/h3&gt;
&lt;p&gt;連結とは限らない（つまりぶった切れているかもしれない）グラフが与えられ，その連結成分の個数を数える．これも単純に&lt;strong&gt;まだ探索していない頂点を 1 つ選んで$v$とし，$v$を始点とする DFS または BFS を実行することを，全頂点が探索済みになるまで繰り返せば良い&lt;/strong&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタックを使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.top(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        has_visited[u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
        suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  has_visited.assign(N, false);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, v);
    cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;再帰を使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; DFS(G, w);
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  has_visited.assign(N, false);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, v);
    cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;BFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  suspended.push(v);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[u]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        has_visited[u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
        suspended.push(w);
      }
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  has_visited.assign(N, false);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    BFS(G, v);
    cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二部グラフ判定&#34;&gt;二部グラフ判定&lt;/h3&gt;
&lt;p&gt;与えられたグラフが二部グラフであるかを判定する．二部グラフとは「全頂点を白または黒に塗っていくとき，白頂点同士が辺で結ばれることがなくかつ黒頂点同士が辺で結ばれることがないように頂点を塗り分けられるグラフ」のことである．&lt;/p&gt;
&lt;p&gt;判定方法は簡単である．適当な頂点を白もしくは黒に塗ったとき，その頂点を始点に自動的に隣接頂点たちの色が次々に決まる．塗りながら，隣接する頂点が同じ色になってしまうかを確認すれば判定できる．全頂点を塗ることができれば，そのグラフは二部グラフであると言える．&lt;/p&gt;
&lt;p&gt;また，配列&lt;code&gt;has_visited&lt;/code&gt;は未訪問であることを表す色を導入することで，頂点の色を保持する配列にまとめさせることができる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再帰を使った DFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; color; &lt;span style=&#34;color:#75715e&#34;&gt;// color[i]: 0 = 黒, 1 = 白, -1 = 未訪問
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  color[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_color;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[w] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current_color) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(G, w, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; current_color)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  color.assign(N, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[v] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(G, v)) is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_bipartite) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BFS では「始点頂点からの距離によって頂点をレベル分けする」ことになり，与えられたグラフが二部グラフなら始点からの距離が偶数なら始点と同じ色，奇数なら異なる色となる．ここで，互いに隣接する頂点間では始点からの距離が 1 だけことなるので，&lt;strong&gt;「グラフが二部グラフである」と「BFS によって計算される各頂点の始点からの距離が等しい 2 頂点は隣接しない」は同値&lt;/strong&gt;となる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BFS による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; distance(N, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; suspended;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (distance[v] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    distance[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    suspended.push(v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.epmty()) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          dist[w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          suspended.push(w);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; dist[w]) is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
        }
      }
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_bipartite) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; MM endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;木に対する-dfs&#34;&gt;木に対する DFS&lt;/h3&gt;
&lt;p&gt;「木」は「閉路のない連結なグラフ」である．木に対する DFS では，次に訪問する頂点を探すときに，必ず「親がすでに訪問済みである」とマークされている．このことを利用することで，根のない木に対して，与えられた頂点を根としたときの根付き木を計算することができる．以下では，与えられたグラフ$G$を，頂点$0$を根とした根付き木と見たときの，各頂点の深さ（根からの距離）とその頂点を根とする部分木のサイズを計算する．頂点の深さは，根からの距離であり，&lt;strong&gt;行きがけ時に決まる&lt;/strong&gt;．なぜなら，ある頂点の深さは，その頂点の親の深さに 1 を足したものである．一方で，部分木のサイズは，&lt;strong&gt;帰りがけ時に決まる&lt;/strong&gt;．なぜなら，自身を根とする部分木のサイズは，自分の子供を根とする部分木のサイズの総和に 1 足したものである．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; depth;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; subtree_size;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// 行きがけ時
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  depth[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (w &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; p) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, w, v);
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// 帰りがけ時
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  subtree_size[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; child: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (child &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; p) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 隣接頂点が親しかいない．つまり木から見ると葉
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    subtree_size[v] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; subtree_size[c];
  }
  subtree_size[v] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 自分自身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N; &lt;span style=&#34;color:#75715e&#34;&gt;// 木の辺数 = 頂点数 - 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  depth.assign(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  subtree_size.assign(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  DFS(G, root, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// グラフGを，頂点0を根とした根付き木としてDFS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;  N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]: depth = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; depth[v] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, subtree_size = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; subtree_size[v] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般に，子ノードの情報を用いて親ノードの情報を更新する処理を&lt;strong&gt;木 DP&lt;/strong&gt;という．&lt;strong&gt;行きがけ時には「親ノードの情報を子ノードに配る」ような処理&lt;/strong&gt;をし，&lt;strong&gt;帰りがけ時には「子ノードの情報を親ノードに集めて親ノードの情報を更新する」ような処理&lt;/strong&gt;をすると良い．&lt;/p&gt;
&lt;h3 id=&#34;トポロジカルソート&#34;&gt;トポロジカルソート&lt;/h3&gt;
&lt;p&gt;トポロジカルソートとは，閉路の存在しない有向グラフ（このようなグラフを DAG という）に対して，辺の向きが揃うように頂点を並べるようなソートのことを指し，ソフトウェアのモジュール間・ソースコード間の依存関係を解決するような場面で用いられる．また，DAG であることはトポロジカルソートが可能であることと同値であるらしい．&lt;/p&gt;
&lt;p&gt;トポロジカルソートでは，その頂点を始点とする辺が 0 本であるような頂点（シンクノード）が末尾に来る.シンクノードを取り除き，その頂点に向かっていた辺を削除すると，新たにシンクノードになる頂点が発生する．新たに発生したシンクノードから適当に一つ選び削除し同様のことを行う．これをすべての頂点が削除されるまで行い，頂点の削除された逆順を出力するとトポロジカルソートが実現できる．この方法だと逆向きの BFS っぽい挙動となる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; out_degree(N); &lt;span style=&#34;color:#75715e&#34;&gt;// out_degree[i]: 頂点iを始点とする辺の本数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; from, to; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; to;
    G[to].push_back(from); &lt;span style=&#34;color:#75715e&#34;&gt;// 辺を逆向きに保存する
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    out_degree[from]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }

  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (out_degree &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) q.push(i); &lt;span style=&#34;color:#75715e&#34;&gt;// シンクノードをキューに突っ込む
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; order; &lt;span style=&#34;color:#75715e&#34;&gt;// order[i]: 頂点iのトポロジカルソートにおける順位の逆順
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
    order.push_back(v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; neighbor: G[v]) {
      out_degree[neighbor]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// シンクノードに向かって生えていた辺を消す
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (out_degree[neighbor] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) q.push(neighbor);
    }
  }
  reverse(order.begin(), order.end());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; v: order) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで，DFS の帰りがけ順を考えると，これはまさしくトポロジカルソートとなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;has_visited, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;order) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, w, has_visited, order);
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// 帰りがけ時
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  order.push_back(v);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; from, to; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; from &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; to;
    G[from].push_back(to);
  }

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited(N, false);
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; order;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[v]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, v, has_visited, order);
  }

  reverse(order.begin(), order.end());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; v: order) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;閉路検出&#34;&gt;閉路検出&lt;/h3&gt;
&lt;p&gt;グラフに閉路が存在するかを検出する問題．BFS っぽいトポロジカルソートの手法を考慮すると，&lt;strong&gt;サイクルに含まれる頂点はシンクノードになることがない&lt;/strong&gt;ので，トポロジカルソートできる範囲でトポロジカルソートした後に，キューに入ったことがない頂点が存在すれば，閉路が存在することがわかる．&lt;/p&gt;
&lt;p&gt;以下は，サイクルを 1 つ含むことが保証された無向グラフに対して，2 頂点$a$，$b$がともにそのサイクル上にあるときは&lt;code&gt;2&lt;/code&gt;を，そうでないときは&lt;code&gt;1&lt;/code&gt;を出力せよという&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2891&#34;&gt;問題&lt;/a&gt;の解答である．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N; &lt;span style=&#34;color:#75715e&#34;&gt;// サイクルを1つ含むグラフなので辺数もN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Graph G(N);
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; degree(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
    u&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    G[u].push_back(v);
    G[v].push_back(u);
    degree[u]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; degree[v]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }

  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (degree[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) q.push(i);

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_enqueued(N, false); &lt;span style=&#34;color:#75715e&#34;&gt;// has_enqueued[i]: 頂点iがキューに入ったことがあるか
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
    has_enqueued[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
      degree[w]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (degree[w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) q.push(w);
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Q;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; _ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Q; _&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b; a&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; b&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;has_enqueued[a] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;has_enqueued[b]) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また，与えられたグラフに閉路があるとき，ある頂点$v$に対して，&lt;strong&gt;$v$から到達することができる全頂点の探索の終了より前に（つまり帰りがけ時になる前に）$v$に戻って来ることができる&lt;/strong&gt;ことと同値である．これを検知してやっても閉路検知になる．これを実現するためには，&lt;code&gt;has_visited[i]: 頂点iを行きがけ順の意味で訪問済み&lt;/code&gt;，&lt;code&gt;has_finished[i]: 頂点iを帰りがけ順の意味で訪問終了&lt;/code&gt;とする配列を用意れば良い．また，閉路を復元までしたい場合には，&lt;strong&gt;行きがけ時に積み，帰りがけ時に取り出すスタック&lt;/strong&gt;を用意すると，閉路を検知した時点でのスタックの中身が閉路を構成する頂点になっている．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited, has_finished;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; history;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// 行きがけ順の意味で訪問済み
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  history.push(v);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (w &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; p) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_finished[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;has_finished[w]) { &lt;span style=&#34;color:#75715e&#34;&gt;// 行きがけ順の意味で訪問済みなのに帰りがけ順の意味で未訪問
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
    DFS(G, w, v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pos &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
  }
  history.pop();
  has_finished[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; &lt;span style=&#34;color:#75715e&#34;&gt;// 帰りがけ順の意味で訪問済み
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v; u&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  has_visited.assign(N, false);
  has_finished.assign(N, false);
  pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  DFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cycle;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;history.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; history.pop();
    cycle.insert(v);
    history.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pos) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Q;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; _ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Q; _&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b; a&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; b&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cycle.count(a) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cycle.count(b)) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;グラフ探索の練習問題&#34;&gt;グラフ探索の練習問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_B&amp;amp;lang=ja&#34;&gt;ALDS 1-11 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1160&amp;amp;lang=jp&#34;&gt;AOJ 1160&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc138/tasks/abc138_d&#34;&gt;ABC 138 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2009yo/tasks/joi2009yo_d&#34;&gt;JOI2009 予選 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc031/tasks/arc031_2&#34;&gt;ARC 31 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc126/tasks/abc126_d&#34;&gt;ABC 126 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/code-festival-2017-qualb/tasks/code_festival_2017_qualb_c&#34;&gt;CODE FSTIVAL2017 qualB C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_C&amp;amp;lang=ja&#34;&gt;ALDS 1-11 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc007/tasks/abc007_3&#34;&gt;ABC 7 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2011yo/tasks/joi2011yo_e&#34;&gt;JOI2011 予選 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2012yo/tasks/joi2012yo_e&#34;&gt;JOI2012 予選 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1166&amp;amp;lang=jp&#34;&gt;AOJ 1166&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc088/tasks/abc088_d&#34;&gt;ABC 88 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2891&#34;&gt;AOJ 2891&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;alds-1-11-bhttpjudgeu-aizuacjponlinejudgedescriptionjspidalds1_11_blangja&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_B&amp;amp;lang=ja&#34;&gt;ALDS 1-11 B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基本問題．再帰の DFS が書きやすい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; d; &lt;span style=&#34;color:#75715e&#34;&gt;// 行きがけのタイムスタンプ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; f; &lt;span style=&#34;color:#75715e&#34;&gt;// 帰りがけのタイムスタンプ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tick &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  tick&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  d[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tick;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, w);
  }
  tick&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tick;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  Graph G(N);
  has_visited.resize(N); has_visited.assign(N, false);
  d.resize(N); d.assign(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  f.resize(N); f.assign(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, k;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k; u&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    G[u].resize(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
      G[u].push_back(v);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;has_visited[i]) DFS(G, i);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; f[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aoj-1160httpjudgeu-aizuacjponlinejudgedescriptionjspid1160langjp&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1160&amp;amp;lang=jp&#34;&gt;AOJ 1160&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;グリッドグラフの連結成分をカウントする問題．深さ優先探索でカウントしていく．陸が&lt;code&gt;1&lt;/code&gt;で海が&lt;code&gt;0&lt;/code&gt;であるが，訪問済みのマス目を&lt;code&gt;0&lt;/code&gt;で潰していくことで配列&lt;code&gt;has_visited&lt;/code&gt;を用意せずとも実装できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; field;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w) {
  field[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 訪問した陸のマスを海にしてしまう
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dh&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; dw&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;

      DFS(nh, nw);
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (H &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    field.assign(H, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; field[h][w];
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (field[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        DFS(h, w);
        cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-138-dhttpsatcoderjpcontestsabc138tasksabc138_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc138/tasks/abc138_d&#34;&gt;ABC 138 D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;親ノードの情報を子ノードに配るので，DFS で行きがけにカウンタの値を更新する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; counters;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; has_visited;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  has_visited[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      counters[w] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; counters[v];
      DFS(G, w);
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, Q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; Q;
  Graph G(N);
  has_visited.resize(N);
  has_visited.assign(N, false);
  counters.resize(N);
  counters.assign(N, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b; a&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; b&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    G[a].push_back(b);
    G[b].push_back(a);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Q; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p; p&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
    counters[p] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x;
  }
  DFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counters[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counters[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joi2009-予選-4httpsatcoderjpcontestsjoi2009yotasksjoi2009yo_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2009yo/tasks/joi2009yo_d&#34;&gt;JOI2009 予選 4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;薄氷の地図をグリッドグラフとみなすと，割ることのできる薄氷の枚数はグラフの深さに対応する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W, ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; has_broken;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d) {
  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, d);
  has_broken[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx[dir];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy[dir];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_broken[nh][nw]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;G[nh][nw]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    DFS(G, nh, nw, d&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }
  has_broken[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H;

  has_broken.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) has_broken[i].resize(W);
  Graph G(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    G[i].resize(W);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
      G[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;G[h][w]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      DFS(G, h, w, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;arc-31-bhttpsatcoderjpcontestsarc031tasksarc031_2&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc031/tasks/arc031_2&#34;&gt;ARC 31 B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;グリッドグラフの連結成分カウント問題．DFS で解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w) {
  G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 訪問済み
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      DFS(G, nh, nw);
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;) {
        DFS(G, h, w);
        cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cnt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  Graph G(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; G[h];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) {
        G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (check(G) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; h&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; w&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;) G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;;
        G[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;;
      }
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-126-dhttpsatcoderjpcontestsabc126tasksabc126_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc126/tasks/abc126_d&#34;&gt;ABC 126 D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;二部グラフ判定問題に似ている．「同じ色に塗られた任意の 2 頂点についてその距離が偶数」という条件から，ある 1 つ頂点の色を決めてしまえば，他の頂点の色は自動的に決定してしまう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; weight;
  Edge(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; weight)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; to(to), weight(weight) {}
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Tree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// 1: 黒, 0: 白, -1:未訪問
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; color;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Tree &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  color[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_color;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; e: T[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[e.to] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((e.weight&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; color[e.to] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current_color) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          (e.weight&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; color[e.to] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; current_color)) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e.weight&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(T, e.to, current_color)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      }
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(T, e.to, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; current_color)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      }
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  Tree T(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v, w; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w; u&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    T[u].push_back(Edge(v, w));
    T[v].push_back(Edge(u, w));
  }
  color.assign(N, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[v] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (DFS(T, v)) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; color[v] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;code-fstival2017-qualb-chttpsatcoderjpcontestscode-festival-2017-qualbtaskscode_festival_2017_qualb_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/code-festival-2017-qualb/tasks/code_festival_2017_qualb_c&#34;&gt;CODE FSTIVAL2017 qualB C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;🍎さんが持っているのは，$N$頂点の&lt;strong&gt;連結な&lt;/strong&gt;無向グラフ．操作によって頂点$u$-頂点$v$には長さ$3$のパスと長さ$1$のパスが存在することになる．奇数長のパスを持つ 2 頂点$u$，$v$ $\in V$に対して，「操作」を繰り返すことで$u$，$v$を直接結ぶ辺が登場する．これは帰納的に証明できる．&lt;strong&gt;「グラフに奇数長のパスが存在するかどうか」はそのグラフが二部グラフであるかどうかによって変わる&lt;/strong&gt;．&lt;/p&gt;
&lt;p&gt;まず，グラフ$G$が二部グラフであるときを考える．$G$は二部グラフなので頂点を黒・白で塗り分けることができる．異なる色で塗られた任意の頂点対を取ると，$G$は連結なグラフなので，その頂点対間にはパスが存在して，その長さは奇数である．ゆえに，「操作」を繰り返すことでいつかはその頂点対間には辺が張られる．よって，&lt;strong&gt;$G$が二部グラフであるとき，「操作」を繰り返すことで任意の黒色頂点-任意の白色頂点間に辺を張ることができる&lt;/strong&gt;．追加できる辺の本数は，黒色頂点数と白色頂点数の積からすでに存在する辺数$M$を引いた値となる．&lt;/p&gt;
&lt;p&gt;次にグラフ$G$が二部グラフでないときを考える．$G$が二部グラフでないならば，同じ色で塗られた頂点を結ぶ辺が存在することになる．$G$は連結でもあるので$V$内の任意の 2 頂点間にはパスが存在する．よって，同じ色で塗られた頂点を結ぶ辺の端点を含む長さが奇数の閉路が$G$に存在することになる．この閉路を用いることで，$G$内の任意の 2 頂点間に長さが奇数のパスを見つけることができる．$G$は連結なので，$V$内の任意の 2 頂点間にはパスが存在し，たとえそれが偶数であっても，奇数長の閉路を余分に経ることでそのパスの長さを奇数にすることができる．奇数長のパスが存在するときその端点の頂点は「操作」を繰り返すことで直接結ぶ辺が張られるので，$G$は完全グラフになっていく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; color;
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
  color[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_color;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; w: G[v]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[w] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current_color) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(G, w, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; current_color)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b; a&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; b&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    G[a].push_back(b);
    G[b].push_back(a);
  }
  color.assign(N, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[v] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;DFS(G, v)) is_bipartite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_bipartite) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[v] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) W&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (color[v] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) B&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; W&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;B &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;alds-1-11-chttpjudgeu-aizuacjponlinejudgedescriptionjspidalds1_11_clangja&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_C&amp;amp;lang=ja&#34;&gt;ALDS 1-11 C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;幅優先探索の基本問題．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dist;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;G, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v) {
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
  dist[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  q.push(v);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; nn: G[w]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[nn] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      dist[nn] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      q.push(nn);
    }
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  Graph G(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, k; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k; u&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
      G[u].push_back(v);
    }
  }
  dist.assign(N, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

  BFS(G, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dist[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-7-chttpsatcoderjpcontestsabc007tasksabc007_3&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc007/tasks/abc007_3&#34;&gt;ABC 7 C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;グリッド形式での迷路探索．「最小手数」がほしいので BFS が手軽．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; suspended;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dist; &lt;span style=&#34;color:#75715e&#34;&gt;// dist[i][j]: 位置(sx, sy)から位置(i, j)までの最小手数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sh, sw, gh, gw; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; sh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; sw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; gw; sh&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; sw&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; gh&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; gw&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
  Graph G(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; G[i];
  dist.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    dist[i].resize(W);
    dist[i].assign(W, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  dist[sh][sw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  suspended.push(make_pair(sh, sw));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, w;
    tie(h, w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      suspended.push(make_pair(nh, nw));
    }
  }

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dist[gh][gw] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joi2011-予選-5httpsatcoderjpcontestsjoi2011yotasksjoi2011yo_e&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2011yo/tasks/joi2011yo_e&#34;&gt;JOI2011 予選 5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ネズミの体力の初期値が$1$であり，チーズ$1$個ごとに体力が$1$増えるので，柔らかさ順にチーズを食べていくことになる．チーズ工場間の最短距離を求めていく．全対最短距離を求めるアルゴリズムを使っても良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
Field F;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W, N;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BFS&lt;/span&gt;(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; from, pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; to) {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dist(H, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(W, &lt;span style=&#34;color:#ae81ff&#34;&gt;1e8&lt;/span&gt;));
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;

  dist[from.first][from.second] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  q.push(from);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.first;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.second;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(h, w) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; to) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dist[h][w];
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (F[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; dist[nh][nw]) {
        dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        q.push(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(nh, nw));
      }
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// should not reach here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  F.resize(H);
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; factories(N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; F[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (F[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;) F[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; F[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; F[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; F[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
        factories[idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(i, j);
      }
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; BFS(factories[i], factories[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joi2012-予選-5httpsatcoderjpcontestsjoi2012yotasksjoi2012yo_e&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2012yo/tasks/joi2012yo_e&#34;&gt;JOI2012 予選 5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;チョット変な座標系に対する BFS．建物のない区画に印をつけ，建物のない区画の周囲に建物が立っている区画があればその境界は色を塗ることになる．座標によって周囲 6 区画の，マス目位置が変わってくることに注意．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; odx[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ody[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; edx[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; edy[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w, h;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; h;
  w &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; h &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a(h, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(w, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i][j];
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; paint_BFS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;](&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sx, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sy) {
    queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
    q.push(make_pair(sx, sy));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.first, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.second;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nx, ny;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          nx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; odx[dir]; ny &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ody[dir];
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          nx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; edx[dir]; ny &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; edy[dir];
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nx &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ny &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ny) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[nx][ny] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[nx][ny] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        a[nx][ny] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        q.push(make_pair(nx, ny));
      }
    }
  };

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; h; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; w; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) paint_BFS(i, j);
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  {
    queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
    q.push(make_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.first, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.second;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[x][y] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nx, ny;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          nx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; odx[dir]; ny &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ody[dir];
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          nx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; edx[dir]; ny &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; edy[dir];
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nx &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ny &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ny) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[nx][ny] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[nx][ny] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        }
        q.push(make_pair(nx, ny));
      }
      a[x][y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aoj-1166httpjudgeu-aizuacjponlinejudgedescriptionjspid1166langjp&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1166&amp;amp;lang=jp&#34;&gt;AOJ 1166&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ややトリッキーな形で迷路情報が与えられる．内容は基本的な BFS に過ぎない．BFS のどこで迷路の情報を使うかというと，「隣接マスに行けるのか」を知るタイミングである．よって，縦横の仕切りの情報をそれぞれ別の形で持っておいて，隣接マスへの移動を考えるタイミングでその情報にアクセスするように実装する．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;horizontal_partition&lt;/code&gt;，&lt;code&gt;vertical_partition&lt;/code&gt;という 2 つの配列で迷路情報を保持する．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;maze.png&#34; data-caption=&#34;どの配列のどの要素がどこの壁のことを指すのかを整理する．&#34;&gt;
&lt;img src=&#34;maze.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    どの配列のどの要素がどこの壁のことを指すのかを整理する．
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1001001&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; W, H; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (W &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; vertical_partition[H][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; horizontal_partition[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W];

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;H &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vertical_partition[i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][j];
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; horizontal_partition[i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][j];
      }
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dist[H][W];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) dist[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INF;
    queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;

    dist[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    q.push(make_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q.front(); q.pop();
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.first;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.second;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; horizontal_partition[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vertical_partition[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; horizontal_partition[h&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][w] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vertical_partition[h][w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; INF) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        q.push(make_pair(nh, nw));
      }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  (dist[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; INF &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; dist[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-88-dhttpsatcoderjpcontestsabc088tasksabc088_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc088/tasks/abc088_d&#34;&gt;ABC 88 D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要するに，$(1, 1)$から$(H, W)$まで最短経路で（＝通る白いマスの数が最小な経路で）いけば，それ以外のマスは黒に塗ることができ得点を最大化できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dh[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dw[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; suspended;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dist; &lt;span style=&#34;color:#75715e&#34;&gt;// dist[i][j]: 位置(sx, sy)から位置(i, j)までの最小手数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; H, W; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  Graph G(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; G[i];
  dist.resize(H);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    dist[i].resize(W);
    dist[i].assign(W, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  dist[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  suspended.push(make_pair(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;suspended.empty()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, w;
    tie(h, w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; suspended.front(); suspended.pop();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; dir &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; dir&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dh[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dw[dir];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; H &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nw &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      dist[nh][nw] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[h][w] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      suspended.push(make_pair(nh, nw));
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; white &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; W; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (G[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) white&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dist[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; white &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dist[H&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][W&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>二分探索</title>
      <link>/ja/post/binary-search/</link>
      <pubDate>Mon, 06 Apr 2020 14:55:21 +0900</pubDate>
      <guid>/ja/post/binary-search/</guid>
      <description>&lt;h2 id=&#34;二分探索&#34;&gt;二分探索&lt;/h2&gt;
&lt;p&gt;二分探索というと「ソート済み配列の中から目的の値を効率よく（具体的には$O(\log n)$）で探し出す手法」として説明されることが圧倒的で，ともすると，「二分探索はソート済み配列から値を探すためだけのアルゴリズム」と勘違いしてしまう．実際，僕もそう思っていた．&lt;/p&gt;
&lt;p&gt;二分探索の「半分にしてサイズの小さい問題を解く」というエッセンスは実に多くの問題に適用することができる．一般化された二分探索とも言うべきか．&lt;/p&gt;
&lt;h2 id=&#34;ソート済み配列から目的のアイテムを探す二分探索&#34;&gt;「ソート済み配列から目的のアイテムを探す」二分探索&lt;/h2&gt;
&lt;p&gt;まずは，「ソート済み配列から目的のアイテムを探す」という，よくある二分探索を実装してみる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;243&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;419&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;910&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)a.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (left &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; right) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a[mid]) right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; key) left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;探索範囲を半分ずつ小さくしてくことで目的のものを見つけ出す．探索範囲が指数の速度で小さくなっていくので，探索対象がソートされていれば，$O(\log n)$で目的のアイテムを見つけ出すことができる．&lt;/p&gt;
&lt;p&gt;二分探索の実装はちょっとややこしい．ループの終了条件とか，&lt;code&gt;left&lt;/code&gt;・&lt;code&gt;right&lt;/code&gt;の更新ってどうしてたっけとか考えると直感的にスラスラ書ける感じではない．&lt;/p&gt;
&lt;h2 id=&#34;ソート済み配列に対して目的のアイテム以上となる最小のインデックスを求める二分探索&#34;&gt;「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」二分探索&lt;/h2&gt;
&lt;p&gt;二分探索を「ソート済み配列から目的のアイテムを探す」ではなくて， &lt;strong&gt;「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」&lt;/strong&gt; とするだけで，二分探索をいろんな問題に適用することができるようになる．&lt;/p&gt;
&lt;p&gt;「ソート済み配列に対する，目的のアイテム&lt;strong&gt;以上&lt;/strong&gt;となる最小のインデックス」からは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目的のアイテムが，探索範囲内で何番目に小さいのかがわかる&lt;/li&gt;
&lt;li&gt;目的のアイテムが探索範囲内に複数存在するなら，それらのうち最小のインデックスを取れる&lt;/li&gt;
&lt;li&gt;「目的のアイテム&lt;strong&gt;より&lt;/strong&gt;大きくなる最小のインデックス」を取れれば，探索範囲内にいくつ同じアイテムが存在するかを知ることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と，より多くの情報を計算することができるようになる．&lt;/p&gt;
&lt;p&gt;このような探索の汎化の有用性は，例えば&lt;code&gt;std::lower_bound()&lt;/code&gt;関数・&lt;code&gt;std::upper_bound()&lt;/code&gt;関数が標準テンプレートライブラリ内で提供されていることからもうかがい知ることができる．関数がどんな返り値を返すか次第で，その関数の便利度合いも変わってくる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::lower_bound()&lt;/code&gt;関数は，ソート済み配列&lt;code&gt;a&lt;/code&gt;と目的のアイテム&lt;code&gt;key&lt;/code&gt;を与えることで，&lt;code&gt;key &amp;lt;= a[index]&lt;/code&gt;となる最小の&lt;code&gt;index&lt;/code&gt;を返す．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::upper_bound()&lt;/code&gt;関数は，ソート済み配列&lt;code&gt;a&lt;/code&gt;と目的のアイテム&lt;code&gt;key&lt;/code&gt;を与えることで，&lt;code&gt;key &amp;lt; a[index]&lt;/code&gt;となる最小の&lt;code&gt;index&lt;/code&gt;を返す．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;bounds.png&#34; data-caption=&#34;std::lower_bound()とstd:upper_bound()&#34;&gt;
&lt;img src=&#34;bounds.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;code&gt;std::lower_bound()&lt;/code&gt;と&lt;code&gt;std:upper_bound()&lt;/code&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;一般化された二分探索&#34;&gt;一般化された二分探索&lt;/h2&gt;
&lt;p&gt;「ソート済み配列に対して，目的のアイテム以上となる最小のインデックス」が得られたほうが便利ということがわかったところで，一般化された二分探索を考えると，二分探索は，「&lt;strong&gt;ある条件について，探索範囲において，その条件を満たすかどうかについて単調性が認められる（つまり，あるインデックスより小さいアイテムはその条件を満たさないけど，あるインデックス以上のアイテムはその条件を満たす）とき，その条件を満たす最小のアイテムを見つける」アルゴリズム&lt;/strong&gt;として一般化させることができる．二分探索をこのように捉えておくと，直感的な実装ができるようになる．&lt;/p&gt;
&lt;p&gt;「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」二分探索は次のように実装できる．このとき，「ある条件」とは「&lt;code&gt;key&lt;/code&gt;以上」に相当し，配列に格納されているアイテムはソートされているので，条件を満たすか否かについての単調性が認められる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;243&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;419&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;910&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; a[index]) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)a.size();

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (right &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; left) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_ok(mid, key)) right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; right;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この実装では，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;は「常に条件を満たさない要素のインデックス」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;は「常に条件を満たす要素のインデックス」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とし，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;right - left == 1&lt;/code&gt;となるまで，つまり&lt;code&gt;left&lt;/code&gt;と&lt;code&gt;right&lt;/code&gt;が隣り合うまで，条件を満たす・満たさないの境界を動かしていく&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことを繰り返している．最終的に，&lt;code&gt;right&lt;/code&gt;が「条件を満たす最小のインデックス」となる．&lt;/p&gt;
&lt;p&gt;条件を満たすか否かの単調性が認められるとき，このように境界を移動させていくことで，条件を満たす最小のインデックスを求めることができる．一方で，単調性がない探索範囲においてこれを実行すると，条件を満たす・満たさないの境界の1つを見つけることができ，これは方程式の解の1つを求めるような場面で使える．&lt;/p&gt;
&lt;h2 id=&#34;めぐる式二分探索&#34;&gt;めぐる式二分探索&lt;/h2&gt;
&lt;p&gt;上の実装では，&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;の性質を考慮する必要があったが，それすら考慮することなく実装に落とし込むことができる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;243&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;419&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;910&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; a[index]) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)a.size();

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_ok(mid, key)) ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; binary_search(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二分探索の練習問題&#34;&gt;二分探索の練習問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_B&amp;amp;lang=ja&#34;&gt;ALDS 1-4 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2009ho/tasks/joi2009ho_b&#34;&gt;JOI2009本選 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc077/tasks/arc084_a&#34;&gt;ABC 77 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc023/tasks/abc023_d&#34;&gt;ABC 34 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008ho/tasks/joi2008ho_c&#34;&gt;JOI2008 本選3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;alds-1-4-bhttpjudgeu-aizuacjponlinejudgedescriptionjspidalds1_4_blangja&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_B&amp;amp;lang=ja&#34;&gt;ALDS 1-4 B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;を使えば解決するけれども，二分探索でも解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, q;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; S(n), T(q);

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_ok&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; S[index]) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binary_search&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; key) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)S.size();

  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_ok(mid, key)) ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ok;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  S.resize(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; S[i];
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
  T.resize(q);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; q; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; T[i];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; k : T) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; binary_search(k) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; binary_search(k) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n) cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joi2009本選-2httpsatcoderjpcontestsjoi2009hotasksjoi2009ho_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2009ho/tasks/joi2009ho_b&#34;&gt;JOI2009本選 2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ピザ屋さんと宅配先の位置関係（つまり，宅配先のすぐ両脇にあるピザ屋）がわかれば，宅配先の両隣のうちの近い方から宅配することで無駄なコストを掛けずにピザを運び届けることができる．両隣以外の店から宅配しようとしたら，その道中で両隣の店の一方に遭遇するはずだ．そりゃそうだ．なので，調べるべきは，&lt;strong&gt;宅配先のすぐ両隣にあるピザ屋がどれなのか&lt;/strong&gt;．ピザ屋を，本店からの距離でソートしておいて，宅配先がどの位置に入るのかを二分探索で求める．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; d;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m;
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pizza_stores(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; pizza_stores[i];
  pizza_stores[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  pizza_stores[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d;
  sort(pizza_stores.begin(), pizza_stores.end());
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; houses(m);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; houses[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(pizza_stores.begin(), pizza_stores.end(), houses[i]);
    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; min(abs(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; houses[i]), abs(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(iter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; houses[i]));
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-77-chttpsatcoderjpcontestsabc077tasksarc084_a&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc077/tasks/arc084_a&#34;&gt;ABC 77 C&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;中部のパーツのサイズを$B_i$に固定すると，上部に使えるパーツのサイズは$B_i$より小さいもので，下部に使えるパーツのサイズは$B_i$より大きいものである．上部・下部に使えるパーツをそれぞれ大きさ順にソートしておいて二分探索によって，$B_i$より小さい・大きいパーツがいくつあるかを数えて掛け合わせれば，中部にサイズ$B_i$のパーツを使った祭壇の種類が得られるので，これを$i$について前通り試せば答えが求まる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n), b(n), c(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c[i];
  sort(a.begin(), a.end());
  sort(b.begin(), b.end());
  sort(c.begin(), c.end());
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; bi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[i];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; aiter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(a.begin(), a.end(), bi);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; citer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(c.begin(), c.end(), bi);
    ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; distance(a.begin(), aiter) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; distance(citer, c.end());
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abc-34-dhttpsatcoderjpcontestsabc023tasksabc023_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc023/tasks/abc023_d&#34;&gt;ABC 34 D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;風船の割り方の総数は$N!$通りだが，$1 \leq N \leq 100000$であることからぜんぶ探索するのでは間に合わない．&lt;/p&gt;
&lt;p&gt;問題を「ペナルティの最小化問題」と捉えるのではなく，「全ての風船を高度$X$を超える前に割ることができるか」という判定問題として捉え，全ての風船を割ることができる高度$X$の最小値が求める答えとなる．&lt;/p&gt;
&lt;p&gt;「$X$を固定したとき，全ての風船を割ることができるか」は高度$X$に到達するまでの猶予が短い風船から割る貪欲法で調べることができる．&lt;/p&gt;
&lt;p&gt;一方で$X$の値は，「高度$X$以下で，全ての風船を割ることができるか」という条件を満たす最小のものとして二分探索によって決定することができる．「高度$X$以下で，全ての風船を割ることができるか」という条件は，ある値$H$未満の$X$に対しては偽となり，$H$以上の$X$に対して真となる単調性がある．「高度10cmまでにぜんぶの風船を割れ」と言われても無理だけど，「高度1000kmまでにぜんぶの風船を割れ」と言われても余裕ということ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;;
ll N;
ll H[&lt;span style=&#34;color:#ae81ff&#34;&gt;100010&lt;/span&gt;], S[&lt;span style=&#34;color:#ae81ff&#34;&gt;100010&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; H[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; S[i];
  ll ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  ll ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e15&lt;/span&gt;;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hist(N); &lt;span style=&#34;color:#75715e&#34;&gt;// hist[i]: 時刻iまでに割らなければならない風船の個数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng)) {
    ll mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 以下でbool is_ok(mid){...}を計算
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) hist[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; H[i]) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// 時刻0ですでに高度midより上に風船がある
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      ll remind_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; H[i]) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; S[i]; &lt;span style=&#34;color:#75715e&#34;&gt;// 高度midに到達するまでの時間的猶予
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (remind_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      }
      hist[min(remind_time, N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) hist[i] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; hist[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; hist[i]) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false; &lt;span style=&#34;color:#75715e&#34;&gt;// 時刻iまでに割れる最大の風船の個数はi+1個（時刻0のときに1つ割ることに注意）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;joi2008-本選3httpsatcoderjpcontestsjoi2008hotasksjoi2008ho_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008ho/tasks/joi2008ho_c&#34;&gt;JOI2008 本選3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;矢のあたり方の総数は，（「矢を投げない」を「$0$点の的に当たる」と考えて，）$(N+1)^4$通りあるので，ぜんぶを調べ上げれば原理的に解ける．しかし$N$の制約からこれでは満点は取れない．この解法の無駄なところは，4本全ての矢を投げないと得点を計算できないとしている点である．例えば，2本投げた時点ですでに当たった的の合計が$M$を超えてしまえば最終得点は（残り2本の矢を投げるまでもなく）$0$に決定する．そこで，矢を2本ごとに投げることを一つの単位として最大得点を調べ上げることにする．具体的には，まず最初の2本の矢を投げたときに得られる合計得点$Q_1$（最大で$(N+1)^2$通りの値）を計算し昇順にソートしておく．続く2本の矢を投げたときの得点$Q_2$を，条件「$Q_1 + Q_2 \leq M$」を満たす最大の値として二分探索する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; P(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; P[i];
  P.push_back(&lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
  N &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; tmp;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      tmp.insert(P[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; P[j]);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; iter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp.begin(); iter &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; tmp.end(); iter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) Q.push_back(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;iter);
  sort(Q.begin(), Q.end());

  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)Q.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q[i];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; total) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)Q.size();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; abs(ok &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ng)) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ok &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ng) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; is_ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (M &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; total &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Q[mid]) is_ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (is_ok) ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
    }
    total &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; Q[ok];
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, total);
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;二分探索：ソート済みの配列に対して，条件$X$を満たす最小のアイテムを探し当てる&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>全探索</title>
      <link>/ja/post/check-all-cases/</link>
      <pubDate>Sun, 05 Apr 2020 20:32:33 +0900</pubDate>
      <guid>/ja/post/check-all-cases/</guid>
      <description>&lt;h2 id=&#34;全探索&#34;&gt;全探索&lt;/h2&gt;
&lt;p&gt;競技プログラミングの「キホン」の「キ」．論理的に考えることになれすぎてると，当たり前過ぎて「なんかずるい」って思うけど，競技プログラムでは当たり前に使う．計算機が高速に計算できるんだから，それを使って問題を解決して何が悪いってか．&lt;/p&gt;
&lt;p&gt;全探索とは &lt;strong&gt;「ありうるパターンを全部調べ上げる」&lt;/strong&gt; こと．&lt;/p&gt;
&lt;p&gt;百聞は一見にしかずということで例題を見てみる．&lt;/p&gt;
&lt;h3 id=&#34;例題&#34;&gt;例題&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;問題&lt;/strong&gt;】数字が書かれている$N$枚の紙切れが入った袋がある．この袋から紙切れを取り出し，その紙切れに書いてある数字を確認して袋に戻すことを4回行い，4回の数字の和が$M$になればあなたの勝ちである．紙切れに書かれている数字が${K_1, K_2, &amp;hellip;, K_N}$であるとき，あなたはこのゲームに勝つことができるだろうか．判定せよ．&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;制約&lt;/strong&gt;】$N \leq 50$，$M \leq 10^8$，$N \leq 10^8$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;難しいことを考えずに，「1回目に$K_a$，2回目に$K_b$，2回目に$K_c$，1回目に$K_d$を引く」として，起こりうるすべての数字の組$(a, b, c, d)$を全部調べれば判定できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; b&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; d&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k[a] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[b] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[c] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[d] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; m) {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          }
        }
      }
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4種類の全探索&#34;&gt;4種類の全探索&lt;/h2&gt;
&lt;p&gt;全探索には4種類ある．&lt;/p&gt;
&lt;p&gt;1つ目は，&lt;strong&gt;純粋に全通り調べ上げる全探索&lt;/strong&gt;．めちゃめちゃ&lt;code&gt;for&lt;/code&gt;ループ書くタイプ．制約次第で有効．&lt;/p&gt;
&lt;p&gt;2つ目は，&lt;strong&gt;工夫して探索の数を減らす全探索&lt;/strong&gt;．これもめちゃめちゃ&lt;code&gt;for&lt;/code&gt;ループ書くタイプ．問題の性質やちょっとした考察を加えることで，やらなくていい探索をやらずに済ませる．純粋に全探索するのでは制約的に間に合わないような問題でも答えが得られるようになる．　　&lt;/p&gt;
&lt;p&gt;3つ目は，&lt;strong&gt;ビット全探索&lt;/strong&gt;．&lt;code&gt;for&lt;/code&gt;ループで書きにくい問題はこれで解くことができる．&lt;/p&gt;
&lt;p&gt;4つ目は，&lt;strong&gt;順列全探索&lt;/strong&gt;．これも&lt;code&gt;for&lt;/code&gt;ループで書きにくい問題を解くときに使う．&lt;/p&gt;
&lt;h3 id=&#34;純粋な全探索&#34;&gt;純粋な全探索&lt;/h3&gt;
&lt;p&gt;純粋な全探索は上で上げた例題のように，多重ループで全通りを調べ上げる．ループがネストしていくので問題の制約に注意を払う必要がある．上の例題だと4重の&lt;code&gt;for&lt;/code&gt;ループになっているが，問題の制約として$N \leq 50$とあるので，最大でも$50^4 = 6.25 \times 10^6$回のループなので，現代的な計算機の性能を考慮すると余裕を持って問題を解くことができる．&lt;/p&gt;
&lt;h3 id=&#34;工夫して探索数を減らした全探索&#34;&gt;工夫して探索数を減らした全探索&lt;/h3&gt;
&lt;p&gt;問題の性質やちょっとした考察を加えることで，やらなくていいループを見つけることができる．これによって1つ目の全探索よりもサイズの大きい問題を解くことができる．&lt;/p&gt;
&lt;p&gt;例えば，先程の例題だと，$(a, b, c)$が決まってしまえば，$X = M - K_a - K_b - K_c$として，$X$が書かれた紙切れを引くことができるのかを調べれば問題を解くことができる．そのためには予め長さが$10^8$の&lt;code&gt;bool&lt;/code&gt;配列を定義しておいて，$1$以上$10^8$以下の整数について，紙切れに書かれているのかを最初に記録しておけば，&lt;code&gt;O(1)&lt;/code&gt;で「$X$を引くことができるか」は判定することができる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; k;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; exist(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000005&lt;/span&gt;, false);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k[i];
    exist[k[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; b&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k[a] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k[b] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k[c];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (exist[x]) {
          cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
      }
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ビット全探索&#34;&gt;ビット全探索&lt;/h3&gt;
&lt;p&gt;ビット全探索とは，&lt;strong&gt;$n$個の要素からなる集合${0, 1, 2, &amp;hellip;, n-1}$の部分集合をすべて数え上げる手法&lt;/strong&gt;のことで，&lt;strong&gt;$N$個のものから，いくつか選ぶ方法を全列挙して調べ上げる手法&lt;/strong&gt;である．&lt;/p&gt;
&lt;p&gt;$N$個のものからいくつか選ぶ場合の数は，それぞれについて「選ぶ」「選ばない」の2通りがあるので，ぜんぶで$2^N$通りある．ビット全探索では，&lt;strong&gt;それぞれのものの選び方をビット列に対応付けることで全通りを調べ上げる&lt;/strong&gt;．&lt;/p&gt;
&lt;p&gt;「$N$個のものからいくつか選ぶ」系の問題は例えば次のようなものがある．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;問題&lt;/strong&gt;】$N$個の正整数$a_1, a_2, &amp;hellip; a_{N-1}$からいくつか選んでその総和を$W$にすることができるかを判定せよ．&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;制約&lt;/strong&gt;】$1 \leq N \leq 20$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こういう問題は，&lt;code&gt;for&lt;/code&gt;ループで調べ上げにくい．そこで登場するのがビット全探索．&lt;/p&gt;
&lt;p&gt;ビット全探索では，&lt;strong&gt;「$N$個のものからいくつか選ぶ方法」を整数値に一対一に対応付ける&lt;/strong&gt;
．ものの選び方を，$i$個目のものを選ぶなら$1$，選ばないなら$0$として2進数の整数にしてあげることでこの対応付けを設ける．&lt;/p&gt;
&lt;p&gt;この対応付けから，$N$個のものの選び方の全探索は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書ける．このループを回るとき&lt;code&gt;bit&lt;/code&gt;は&lt;code&gt;000...000&lt;/code&gt;から&lt;code&gt;111...111&lt;/code&gt;を1つずつ巡っていくことになる．&lt;/p&gt;
&lt;p&gt;数字から「ものの選び方」を復元する際にはビット演算を利用する．&lt;code&gt;bit&lt;/code&gt;にエンコードされた「ものの選び方」をしたときに，$i$番目のものは選ばれているのかどうかは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i)) {
  ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で判定できる．&lt;code&gt;1 &amp;lt;&amp;lt; i&lt;/code&gt;は「1をiビットだけ左シフトした値」なので，それとの&lt;code&gt;AND&lt;/code&gt;を取ることで，&lt;code&gt;bit&lt;/code&gt;の$i$番目のビットだけを取り出すことができる．&lt;/p&gt;
&lt;p&gt;ものの選び方を表す整数&lt;code&gt;bit&lt;/code&gt;から，そのときの選ばれたアイテムの番号を記録した配列を返す関数は次のように書ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Bit2Vec(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N) {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; items;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i)) {
      items.push_back(i);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; items;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかし実際には，上のように「ものの選び方」を表す配列を用意することなく，&lt;strong&gt;各アイテム番号&lt;code&gt;i = 0, 1, ...&lt;/code&gt;に対して，アイテム&lt;code&gt;i&lt;/code&gt;が&lt;code&gt;bit&lt;/code&gt;で表現されるアイテムの集合に含まれていることがわかったら，それに応じた処理をその場で行ってしまう&lt;/strong&gt;ような実装をしている人が多い．&lt;/p&gt;
&lt;p&gt;また，$i$ビット目を取り出す演算は，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
  ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とも書けて，こっちのほうが安全だったりすることがあるようなことを聞いたことがある（要出典）．&lt;/p&gt;
&lt;h4 id=&#34;ビット全探索の例&#34;&gt;ビット全探索の例&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;【&lt;strong&gt;問題&lt;/strong&gt;】$N$個の正整数$a_1, a_2, &amp;hellip; a_{N-1}$と正整数$W$が与えられる．$a_1, a_2, &amp;hellip; a_{N-1}$からいくつか選んでその総和を$W$にすることができるかを判定せよ．&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;制約&lt;/strong&gt;】$1 \leq N \leq 20$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この問題は， &lt;strong&gt;「$N$個の正整数からいくつか選ぶ方法は$2^N$通りあり，それを1つづつ試しながら，総和が$W$になるかを確認する」&lt;/strong&gt; ことで解くことができる．正整数の選び方それぞれに対して，$O(N)$かけて総和を取ることになるので，全体の計算量は$O(2^N \times N)$．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Bit2Vec(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N) {
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; items;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
      items.push_back(i);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; items;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bit2Vec(bit, N);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i : items) sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上の実装でも正しいが，&lt;strong&gt;&lt;code&gt;bit&lt;/code&gt;に対応するものの選び方において，アイテム&lt;code&gt;i&lt;/code&gt;が選ばれるのかの判定と，選ばれるならその際の処理（ここでは総和の計算に用いる）をその場でやってしまう&lt;/strong&gt;ような実装にすることもできて，そうすることで&lt;code&gt;Bit2Vec&lt;/code&gt;関数を書かなくて済むようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, W; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; W;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i];
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; W) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;順列全探索&#34;&gt;順列全探索&lt;/h3&gt;
&lt;p&gt;順列全探索は，&lt;strong&gt;順序付きのものの選び方として考えられるものを全て調べ上げる&lt;/strong&gt;全探索．例えば「$N$個の都市を，好きな都市から出発して，全ての都市をちょうど1回ずつ訪れる方法のうち，最短の所要時間を求める」という巡回セールスマン問題を考えるとき，都市のめぐり方の総数は$N!$通りなので，その全てを試せば原理的に解ける．&lt;/p&gt;
&lt;p&gt;C++では&lt;code&gt;std::next_permutation()&lt;/code&gt;という便利関数があり，順列全探索をかんたんに書くことができる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; INF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100000000&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; g(n, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(n));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; g[i][j];
    }
  }

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; order(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) order[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// 都市番号順に訪れる方法で初期化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INF;

  &lt;span style=&#34;color:#75715e&#34;&gt;// 順列全探索の典型的な書き方
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      tmp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; g[order[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]][order[i]];
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; res) {
      res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(order.begin(), order.end()));

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; end;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;do {...} while (next_permutation(...));&lt;/code&gt;で$n!$回ループして，それぞれについて，$O(n)$かけてコストの総和を取るので全体としては$O(n! \times n)$&lt;/p&gt;
&lt;h2 id=&#34;全探索の練習問題&#34;&gt;全探索の練習問題&lt;/h2&gt;
&lt;h3 id=&#34;単純な全探索ちょっと工夫する全探索&#34;&gt;単純な全探索・ちょっと工夫する全探索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_7_B&amp;amp;lang=ja&#34;&gt;ITP 1-7 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc144/tasks/abc144_b&#34;&gt;ABC 144 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc150/tasks/abc150_b&#34;&gt;ABC 150 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc122/tasks/abc122_b&#34;&gt;ABC 122 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc136/tasks/abc136_b&#34;&gt;ABC 136 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc106/tasks/abc106_b&#34;&gt;ABC 106 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc120/tasks/abc120_b&#34;&gt;ABC 120 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc057/tasks/abc057_c&#34;&gt;ABC 57 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc095/tasks/arc096_a&#34;&gt;ABC 95 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/sumitrust2019/tasks/sumitb2019_d&#34;&gt;住銀2019 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/pakencamp-2019-day3/tasks/pakencamp_2019_day3_c&#34;&gt;パ研杯2019 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2007ho/tasks/joi2007ho_c&#34;&gt;JOI2017 本選3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b&#34;&gt;Square869120Contest #6 B&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008yo/tasks/joi2008yo_d&#34;&gt;JOI2008 予選4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ビット全探索-1&#34;&gt;ビット全探索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc128/tasks/abc128_c&#34;&gt;ABC 128 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc147/tasks/abc147_c&#34;&gt;ABC 147 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc002/tasks/abc002_4&#34;&gt;ABC 2 D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008yo/tasks/joi2008yo_e&#34;&gt;JOI2008 予選5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/s8pc-4/tasks/s8pc_4_b&#34;&gt;Square869120Contest #4 B&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;順列全探索-1&#34;&gt;順列全探索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc145/tasks/abc145_c&#34;&gt;ABC 145 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc150/tasks/abc150_c&#34;&gt;ABC 150 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc054/tasks/abc054_c&#34;&gt;ABC 54 C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_13_A&amp;amp;lang=ja&#34;&gt;ALDS 1-13 A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;h3 id=&#34;単純な全探索ちょっと工夫する全探索-1&#34;&gt;単純な全探索・ちょっと工夫する全探索&lt;/h3&gt;
&lt;h4 id=&#34;itp-1-7-bhttpjudgeu-aizuacjponlinejudgedescriptionjspiditp1_7_blangja&#34;&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_7_B&amp;amp;lang=ja&#34;&gt;ITP 1-7 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;「$1$から$n$までの整数の中から，重複無しで3つの数を選ぶ」ときの数の選び方は${}_n\mathrm{P}_3$通りあり，全通り試してみれば原理的に解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, x;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x) cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
      }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-144-bhttpsatcoderjpcontestsabc144tasksabc144_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc144/tasks/abc144_b&#34;&gt;ABC 144 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;与えられた整数$N$が$1$以上$9$以下の2整数の積と等しいかを，&lt;strong&gt;$1$以上$9$以下の2整数の積をぜんぶ試しながら調べる&lt;/strong&gt;ことで原理的に解ける．制約を考慮しても，特に工夫することなく解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      }
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-150-bhttpsatcoderjpcontestsabc150tasksabc150_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc150/tasks/abc150_b&#34;&gt;ABC 150 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;入力文字列&lt;code&gt;S&lt;/code&gt;の$i$文字目から$i+3$文字目までが&lt;code&gt;ABC&lt;/code&gt;と一致するかを全ての$i$に対して調べる．入力文字列の大きさがそこまで大きくないので特に工夫せず解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  string s; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;) {
      ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-122-bhttpsatcoderjpcontestsabc122tasksabc122_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc122/tasks/abc122_b&#34;&gt;ABC 122 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;入力文字列を先頭から一文字づつ舐めていって，その文字が&lt;code&gt;A&lt;/code&gt;/&lt;code&gt;C&lt;/code&gt;/&lt;code&gt;G&lt;/code&gt;/&lt;code&gt;T&lt;/code&gt;なら文字列の長さに1を加えて，そうでないならそこで一旦リセット．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  string s; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt;) {
      len &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, len);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-136-bhttpsatcoderjpcontestsabc136tasksabc136_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc136/tasks/abc136_b&#34;&gt;ABC 136 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$N$以下の正整数に対して，桁数が奇数になるのかを調べてやるだけ．整数を文字列に変換する関数は大体の言語でもできる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  string ns; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ns;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stoi(ns);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; to_string(i);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.size() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-106-bhttpsatcoderjpcontestsabc106tasksabc106_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc106/tasks/abc106_b&#34;&gt;ABC 106 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$N$以下の各正奇数に対して，正の約数が8個であるかを調べてあげる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cnt &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (check(i)) ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-120-bhttpsatcoderjpcontestsabc120tasksabc120_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc120/tasks/abc120_b&#34;&gt;ABC 120 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;与えられた2整数$A$，$B$の約数をぜんぶ調べ上げれば良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, k; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a) swap(a, b);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cnt &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      }
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-57-chttpsatcoderjpcontestsabc057tasksabc057_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc057/tasks/abc057_c&#34;&gt;ABC 57 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$A &amp;lt; B$としても一般性は失われないので，$1 \leq A \leq \sqrt N$まで調べればいい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  ll N;
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  ll digit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (ll i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; sqrt(N); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (N&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      digit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_string(N&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;digit).length() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-95-chttpsatcoderjpcontestsabc095tasksarc096_a&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc095/tasks/arc096_a&#34;&gt;ABC 95 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ABピザを奇数枚買って一枚余らせることしてもただの無駄でしかないので，ABピザは2枚1組のABセットとして考える．ここで問題の制約から，AピザでもBピザでもABセットでも，買う個数を$0$から$10^5$までぜんぶ試せば，買い方の場合の数は全て網羅するので原理的に解けることになる．&lt;/p&gt;
&lt;p&gt;というか，ぜんぶABセットで買って余らせるか，Aピザ or Bピザが足りる分までABセットで買って不足分を単品で買い足すか，ABセットを使わずに単品で買い揃えるか，のいずれのパターンで最も安上がりのものを調べれば良いので，探索はいらない．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, c, x, y;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y;
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(res, (c &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; max(x, y));
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(res, min(x, y) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min(x, y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min(x, y)));
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;住銀2019-dhttpsatcoderjpcontestssumitrust2019taskssumitb2019_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/sumitrust2019/tasks/sumitb2019_d&#34;&gt;住銀2019 D&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;まじめに，入力されたラッキーナンバーから3桁取ってきて&amp;hellip;とやると，ラッキーナンバーの桁数が最大30000もあるので制限時間内に終わらない．ここで，&lt;strong&gt;3桁の暗証番号は&lt;code&gt;000&lt;/code&gt;から&lt;code&gt;999&lt;/code&gt;のどれかにしかならない&lt;/strong&gt;ので，暗証番号を決め打ちしてから，その暗証番号を与えられたラッキーナンバーから作れるかを調べたほうが良い．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  string S;
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; S;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, (i&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, i&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (S.at(j) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c.at(f))) {
        f&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
      cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;パ研杯2019-chttpsatcoderjpcontestspakencamp-2019-day3taskspakencamp_2019_day3_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/pakencamp-2019-day3/tasks/pakencamp_2019_day3_c&#34;&gt;パ研杯2019 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;コンテストで実際に歌う歌の組み合わせはぜんぶで${}_M\mathrm{C}_2$通りあり，$2 \leq M \leq 100$という制約を考慮して，全通り試せば原理的に解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i][j];
      }
  }
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; done(m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, false));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (done[j][i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      done[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; done[j][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; max(a[k][i], a[k][j]);
      }
      ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, s);
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;joi2017-本選3httpsatcoderjpcontestsjoi2007hotasksjoi2007ho_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2007ho/tasks/joi2007ho_c&#34;&gt;JOI2017 本選3&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;入力された$n$個の点から$2$点選び，その$2$点を結ぶ線分を1辺とする正方形を構成する他の2点を計算し，その頂点が存在するかを調べれば正方形を構成することができるかを判定することができ，$n$の大きさに対する制約を考えると，全部試しても間に合う．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; points;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    points.insert(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x, y));
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; sum, ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c: points) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; v: points) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v.first &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c.first;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v.second &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c.second;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nx1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v.first &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dy;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ny1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v.second &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nx2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.first &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dy;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ny2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.second &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (points.count(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(nx1, ny1)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; points.count(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(nx2, ny2))) {
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dx;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans ,sum);
      }
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;square869120contest-6-bhttpsatcoderjpcontestss8pc-6taskss8pc_6_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/s8pc-6/tasks/s8pc_6_b&#34;&gt;Square869120Contest #6 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;出入り口を，わざわざ買い物しない店に設けるのは無駄でしかないので，&lt;strong&gt;出入り口の候補は$a_1, a_2, &amp;hellip;, a_N$，$b_1, b_2, &amp;hellip;, b_N$&lt;/strong&gt;．出入り口の候補は$O(n^2)$通りあり，買い物客それぞれに対して移動時間を$O(n)$で計算し，その合計を調べ上げれば原理的に解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n), b(n);
  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ab;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    ll _a, _b;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; _a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; _b;
    ab.insert(_a); ab.insert(_b);
    a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _a;
    b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _b;
  }
  ll s, t;
  ll ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9223372036854775807&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; s : ab) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; t : ab) {
      ll elapsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        elapsed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; abs(s &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[k]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(a[k] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[k]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(t &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b[k]);
      }
      ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, elapsed);
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;joi2008-予選4httpsatcoderjpcontestsjoi2008yotasksjoi2008yo_d&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008yo/tasks/joi2008yo_d&#34;&gt;JOI2008 予選4&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$n$個の与えられた星の位置から1つずつ取り出して，それを星座を構成する$m$個の星の位置の1つと仮定して，星座を構成する星を移動し，移動した先の位置が星の位置として妥当かどうかを全ての場合について調べ上げれば原理的に解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; sign;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    sign.insert(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x, y));
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; night_sky;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    night_sky.insert(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(x, y));
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; star: night_sky) {
    pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;begin(sign);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; star.first &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ss.first;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; star.second &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ss.second;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; sstar: sign) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sstar.first &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dx;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ny &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sstar.second &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(night_sky.count(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(nx, ny)))) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) {
      cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ビット全探索-2&#34;&gt;ビット全探索&lt;/h3&gt;
&lt;h4 id=&#34;abc-128-chttpsatcoderjpcontestsabc128tasksabc128_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc128/tasks/abc128_c&#34;&gt;ABC 128 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$N$個のスイッチの状態はぜんぶで$2^N$通りで，それを全部試して，$M$個ある電球が全部点灯するかを調べれば原理的には解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec(M);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
    vec[i].resize(k);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec[i][j];
      vec[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  }
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p(M);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p[i];
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 電球jにつながっていて，かつonになっているスイッチの個数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; id : vec[j]) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; id) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
      }
      c &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; p[j]) {
        ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ok) ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-147-chttpsatcoderjpcontestsabc147tasksabc147_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc147/tasks/abc147_c&#34;&gt;ABC 147 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;「だれが正直者で，だれが不親切なのか」を先に決め打ちしてしまい，それに対して与えられた情報が矛盾しないかを考えてやることで解くことができる．数学パズルが好きな人には「それはずるい」って言われる気がするがまあいいや．「だれが正直者で，だれが不親切なのか」のパターンはぜんぶで$2^N$通りで，ビット全探索が使える．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; testimony &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// first: 人, second: 正直者か不親切か
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;testimony&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; testimonies;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// N人それぞれについて
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// その人が「不親切な人」ならその人の証言は調べなくて良い
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 各証言の整合性を取る
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; test : testimonies[i]) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test.first;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test.second;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  testimonies.resize(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; A;
    testimonies[i].resize(A);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; A; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; testimonies[i][j].first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; testimonies[i][j].second;
      testimonies[i][j].first &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// 全通りを調べ上げる
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; N); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// 決め打ちした「正直者-不親切な人分布」与えられた証言と整合性があるか
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (check(bit)) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;


      &lt;span style=&#34;color:#75715e&#34;&gt;// 正直者をカウント
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
      }
      res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(res, cnt);
    }
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-2-dhttpsatcoderjpcontestsabc002tasksabc002_4&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc002/tasks/abc002_4&#34;&gt;ABC 2 D&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$N$人いる国会議員について，最大派閥に所属するか否かの場合の数の総数は$2^N$通りであり，$1 \leq N \leq 12$という$N$の制約を考えると全パターンを調べ上げることで原理的に解ける．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; friends(n, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(n, false));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y;
    x&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; y&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
    friends[x][y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; friends[y][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;friends[i][j]) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
          }
        }
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, __builtin_popcount(bit));
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;joi2008-予選5httpsatcoderjpcontestsjoi2008yotasksjoi2008yo_e&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/joi2008yo/tasks/joi2008yo_e&#34;&gt;JOI2008 予選5&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;行のひっくり返し方を固定したとき，ある列をひっくり返すか否かは他の列をひっくり返すか否かの判断に影響を与えない．よって，各列において出荷可能なせんべいの枚数を最大化するしたとき，全体として出荷できるせんべいの枚数を（その行のひっくり返し方において）最大化できるといえる．各列のひっくり返すか中の判断は，「列を上から舐めていき，表になっているせんべいの枚数のほうが裏になっているせんべいより多ければひっくり返す．そうでなければひっくり返さない」とすればその列で焼いているせんべいのうち，出荷可能なせんべいの枚数を最大にすることができる．&lt;/p&gt;
&lt;p&gt;まとめると，行のひっくり返し方（総数$2^C$通り）のそれぞれに対して，各列の状態を見ていき，「表になっているせんべいの枚数のほうが裏になっているせんべいより多ければひっくり返す．そうでなければひっくり返さない」という操作を行って，全体として出荷できるせんべいの枚数を調べ，その最大値を計算する．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; table[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; row, col; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; col;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; row; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; col; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; table[i][j];
    }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; row); bit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; col; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; omote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ura &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, state;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; row; r&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[r][j];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; r) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
          state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;state;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (state) omote&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ura&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      }
      cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; max(omote, ura);
    }
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, cnt);
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;square869120contest-4-bhttpsatcoderjpcontestss8pc-4taskss8pc_4_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/s8pc-4/tasks/s8pc_4_b&#34;&gt;Square869120Contest #4 B&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;$N$個ある建物について，どの建物が見えて，どの建物が見えないかはぜんぶで$2^N$通りであるが，$K$色見えてほしいので，&lt;strong&gt;$N$桁のビット列から$K$桁だけ&lt;code&gt;1&lt;/code&gt;が立っているようなビット列を計算できたら，ビット全探索と同様に考えることができる&lt;/strong&gt;．建物の見え方を固定したとき，建物を左から順番に見ていって，見えてほしい建物はその建物より左側にある最も背の高い建物より1だけ高く，見えなくてもいい建物はそのままにしておく．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next_combination&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;bit;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; y;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, k; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
  k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  n&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1001001001001&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; k) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (; bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n); bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_combination(bit)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; highest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; highest) {
          tmp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (highest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
          highest &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
          highest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        }
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (highest &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
          highest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        }
      }
    }
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(res, tmp);
  }
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;順列全探索-2&#34;&gt;順列全探索&lt;/h3&gt;
&lt;h4 id=&#34;abc-145-chttpsatcoderjpcontestsabc145tasksabc145_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc145/tasks/abc145_c&#34;&gt;ABC 145 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;順列全探索を使えっていう意図が丸裸って感じの問題．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N;
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;], y[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dist&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; dx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x[j];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; dy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[j];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pow(dx&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dx &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dy&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dy, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; towns(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) towns[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dist(towns[i], towns[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(towns.begin(), towns.end()));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) fact &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; i;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fixed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; setprecision(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fact &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-150-chttpsatcoderjpcontestsabc150tasksabc150_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc150/tasks/abc150_c&#34;&gt;ABC 150 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;do {...} while (next_permutation());&lt;/code&gt;の練習問題．ソートし直すのを忘れないように．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p(n), q(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q[i];

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; s(n);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) s[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pidx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; qidx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; pflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; p[i]) pflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pflag) {
      pidx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(s.begin(), s.end()));
  sort(s.begin(), s.end());
  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; qflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; q[i]) qflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (qflag) {
      qidx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(s.begin(), s.end()));

  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; abs(pidx &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; qidx) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;abc-54-chttpsatcoderjpcontestsabc054tasksabc054_c&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc054/tasks/abc054_c&#34;&gt;ABC 54 C&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;を始点とするDFSで条件を満たすパスを数え上げる方法が一番素直だけれども，制約に注目すると，与えられるグラフの頂点数が最大でも8ということを考慮すると，&lt;strong&gt;頂点の訪問順序を，生えている辺を無視して順列全探索をして，編の生え方に矛盾しないものをカウントする&lt;/strong&gt;としても解ける．まあ教育的な観点からはDFSの練習として思った方が良さそうだけれど．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DFSによる解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#75715e&#34;&gt;// 1を始点としてDFSでグラフ上を探索し条件を満たすパスを数え上げる
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nmax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; graph[nmax][nmax];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited[nmax]) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; false) {
      has_visited_all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited_all) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (graph[v][i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; false) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (has_visited[i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    has_visited[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dfs(i, N, has_visited);
    has_visited[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A, B; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; B;
    graph[A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][B&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph[B&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; has_visited[nmax];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    has_visited[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
  }
  has_visited[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dfs(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, N, has_visited) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;順列全探索による解答&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nmax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; graph[nmax][nmax];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N, M; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; M;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; M; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; A, B; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; B;
    graph[A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][B&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph[B&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][A&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
  }
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nodes(N);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) nodes[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (nodes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (graph[nodes[i]][nodes[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; false) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false; &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(nodes.begin(), nodes.end()));
  cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;😄 これでぼくも全探索マスター！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Options</title>
      <link>/ja/post/functional-options/</link>
      <pubDate>Thu, 02 Apr 2020 20:43:26 +0900</pubDate>
      <guid>/ja/post/functional-options/</guid>
      <description>&lt;p&gt;良さげな実装テクを発見したので忘れないようにメモ．&lt;/p&gt;
&lt;h2 id=&#34;functional-optionsとは&#34;&gt;functional optionsとは&lt;/h2&gt;
&lt;p&gt;何かを「設定」したいときにきれいに書けるAPIのお作法．何かを設定したいだけなら，色んな方法があるけど，このお作法に則ってると読みやすいし書きやすい．
読みやすくて書きやすいことは大事なので，知っておくと良い．&lt;/p&gt;
&lt;p&gt;何かを設定する他の方法だと，例えば設定情報を表現する構造体を定義してそれをコンストラクタに渡すとか，設定のsetterを設けるとか．これらの方法だと，たくさん設定事項があるときに困ったりする．&lt;/p&gt;
&lt;p&gt;何らかのオブジェクトを生成するとき，大抵の場合こんな感じで書く．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;obj := New(arg0, arg1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;functional optionsのお作法に則って書くと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;obj := New(arg0, arg1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とも書けるし，オブジェクトの生成時に設定も一緒に仕込むなら&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;obj := New(arg0, arg1, option0, option1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とも書ける．&lt;/p&gt;
&lt;p&gt;functional optionsのお作法は，そのプログラミング言語がサポートする「任意個の引数を取る」記法を使う．この記法がサポートされてないとできないかも．英語だと，「任意個の引数を取る」という様を&lt;code&gt;variadic&lt;/code&gt;と言うらしい．&lt;/p&gt;
&lt;p&gt;具体的なコードでないと意味がよくわからないので具体的にしてみる．なんらかのサーバを想定するとわかりやすい．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはまあ普通によくある書き方．では，タイムアウトの設定をしたサーバを生成するコンストラクタを書いてみよう．functional optionsのお作法に従って書くとこんな感じ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;,
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうやって書いてあると，このコードの利用者側はこんな感じのコードを書くことになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// no options, use defaults
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// configured to timeout after 10 seconds with address
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;// configured to timeout after 10 seconds and use TLS for connection with address
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;TLS&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSConfig&lt;/span&gt;{}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なるほど，わかりやすい．これを例えばコンストラクタにたくさん引数を渡して設定するやり方でやるとこんな感じになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServerWithTimeout&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServerWithTimeoutAndTLS&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSConfig&lt;/span&gt;{})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;渡す設定によって引数が変わっちゃうのでそれに合わせたコンストラクタが必要になってしまう．これは大変．&lt;/p&gt;
&lt;p&gt;じゃあそれらをまとめて&lt;code&gt;Config&lt;/code&gt;構造体を作るぞってやると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{})
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; })
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;TLS&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TLSConfig&lt;/span&gt;{} })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる．まあこれでもいいんだけど，何も設定しないときに空の&lt;code&gt;Config{}&lt;/code&gt;を渡さないといけないのはチョット不格好だし，何より設定事項が増えたときに読みづらくなりそう．&lt;/p&gt;
&lt;p&gt;というわけで，&lt;strong&gt;設定したいものを引数に取って，設定を「適用」していくような関数を用意する&lt;/strong&gt;とかっこよく書ける．&lt;/p&gt;
&lt;h2 id=&#34;さらに読みやすくする工夫&#34;&gt;さらに読みやすくする工夫&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;func (s *Server)&lt;/code&gt;に名前をつけてしまえばもっとわかりやすくなる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうすれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となって，より「あ，オプション取るんだな」ってのがわかる．うれしい😄&lt;/p&gt;
&lt;p&gt;こうなると複数オプションもいい感じにまとめることができそう．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)}

&lt;span style=&#34;color:#a6e22e&#34;&gt;server1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, append(&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnections&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;server2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, append(&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;RateLimit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Minute&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;server3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, append(&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[]Option&lt;/code&gt;をもっと賢くしたいので，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Options&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;opts&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を用意すれば，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Options&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;server1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;MaxConnections&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;server2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;RateLimit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Minute&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;server3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;defaultOptions&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とできて，イイ感じ！&lt;/p&gt;
&lt;h2 id=&#34;withset&#34;&gt;&lt;code&gt;With&lt;/code&gt;/&lt;code&gt;Set&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Logger&lt;/code&gt;とかも設定したいものとしてはよくある．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とかを用意しておいて，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WithLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;WithLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすると，なるほどわかりやすい．&lt;/p&gt;
&lt;p&gt;更に他の例だと，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;whitelistIPs&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WithWhitelistedIP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;whitelistIPs&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;whitelistIPs&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;)
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SetWhitelistedIP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;whitelistIPs&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;}
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;WithWhitelistedIP&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.0.0.0/8&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;WithWhitelistedIP&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.16.0.0/12&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetWhitelistedIP&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.0.0/16&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#75715e&#34;&gt;// overwrites any previous values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;With&lt;/code&gt;は「追加」で，&lt;code&gt;Set&lt;/code&gt;は「上書き」という雰囲気．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt;型の関数を返す関数を用意することで，特定の設定のプリセットみたいなものを定義できてこれまた便利．&lt;/p&gt;
&lt;h2 id=&#34;config構造体との掛け合わせ&#34;&gt;&lt;code&gt;Config&lt;/code&gt;構造体との掛け合わせ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Config&lt;/code&gt;構造体を用意して，&lt;code&gt;Config&lt;/code&gt;構造体を引数に取る&lt;code&gt;Option&lt;/code&gt;型の関数としてもいい．たくさんある設定を&lt;code&gt;Config&lt;/code&gt;という一つの場所に閉じ込められるので，設定事項がめちゃめちゃある場合には便利．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// lots of other options
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;WithConfig&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;WithTimeout&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;optionを関数型ではなくてinterfaceとしてさらに柔軟に設定を受け入れる&#34;&gt;&lt;code&gt;Option&lt;/code&gt;を関数型ではなくてinterfaceとしてさらに柔軟に設定を受け入れる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt;をinterfaceにしてしまえば，もっといろんな設定を受け入れられるようになる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Option configures a Server.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// apply is unexported,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// so only the current package can implement this interface.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Timeout configures a maximum length of idle connection in Server.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Options turns a list of Option instances into an Option.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Options&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Option&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Options&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;opt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;futher-readings&#34;&gt;Futher readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://sagikazarmark.hu/blog/functional-options-on-steroids/&#34;&gt;https://sagikazarmark.hu/blog/functional-options-on-steroids/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html&#34;&gt;https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sohamkamani.com/blog/golang/options-pattern/&#34;&gt;https://www.sohamkamani.com/blog/golang/options-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.calhoun.io/using-functional-options-instead-of-method-chaining-in-go/&#34;&gt;https://www.calhoun.io/using-functional-options-instead-of-method-chaining-in-go/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>「オブジェクト指向」について考える</title>
      <link>/ja/post/what-is-object-oriented/</link>
      <pubDate>Sun, 08 Mar 2020 13:47:19 +0900</pubDate>
      <guid>/ja/post/what-is-object-oriented/</guid>
      <description>&lt;h2 id=&#34;-orientedってどういう意味なんだろう&#34;&gt;&amp;ldquo;-oriented&amp;quot;ってどういう意味なんだろう？&lt;/h2&gt;
&lt;p&gt;プログラミングをお勉強しているので，いろんなカタカナ用語に遭遇する．カタカナ用語ってその言葉の指す意味が字面に現れてこなくて，「それってどういう意味？」となりがちだ．&lt;/p&gt;
&lt;p&gt;最近気になったのは「XXX-oriented」という言葉だ．Object-orientedとかservice-orientedとかで目にする．日本語に訳されるときは「XXX指向」って訳されている．が，日本語に訳されたところで意味は判然としない．「オブジェクト指向 とは」でググるとめちゃめちゃたくさんのブログ記事が出てくる．だいたい「オブジェクト指向ってよくわかんねぇよな！俺が解説してやる！」っていう趣旨の記事で，世界一わかりやすいと謳っている．&lt;/p&gt;
&lt;p&gt;僕もそれらの類の記事はいくつか呼んだことがあるし，オブジェクト指向なプログラミングを文法からサポートするいろんな言語でプログラミングをしたことがあるので，オブジェクト指向とはなんなのか，みたいなところの「手触り感」はなんとなく分かっているけど，もうちょっとメタな視点から「XXX-oriented」の意味を考えてみたくなった．&lt;/p&gt;
&lt;p&gt;「XXX-oriented」の中でも一番有名なのかも知れないのが「Object-oriented」だと思うので，そこから考えてみる．オブジェクト指向でプログラムすると，記述したい事柄を「データとデータに対する操作を一括にまとめたオブジェクト」なるものをたくさん定義して，それらの相互作用でプログラムを記述していくことになる．オブジェクト指向ではプログラムにおける主役は「オブジェクト」であり，プログラマはそれらオブジェクト同士の動きを，あたかも演劇における脚本を書いているかのように操って1つのプログラムに仕立て上げる．僕が思うに，オブジェクト指向で大事なのは「プログラムにおける主役がオブジェクトである」という点がオブジェクト指向の本当のところなのだと思う．「Object-oriented」が「オブジェクトが主役」の意味なら「XXX-oriented」は「XXXが主役」ってことなのだろうか？&lt;/p&gt;
&lt;p&gt;「oriented」を適当に英語辞典で引いてみると，「特定の方向に向く，位置を定める」という意味の「orient」の過去分詞が転じた形容詞と書いてあった．ということは，字面で言えば「オブジェクトの方を向いた」って意味なのか？「オブジェクト指向」という漢字はそういう雰囲気が確かに感じられる．&lt;/p&gt;
&lt;p&gt;Object-orientedって言うときはおそらく「オブジェクトを主役とする（という方向を向いた）思想に基づく技術」って意味なんだろうなぁ．となるとObject-oriented programmingっていうのは「オブジェクトを主役とする（という方向を向いた）思想に基づいて確立されたプログラミング手法」的な意味合いになりそうだし，僕の肌感ともあってくる．&lt;/p&gt;
&lt;p&gt;なるほど，Service-Oriented Architectureもそう考えると，「サービス」が主役として振る舞うアーキテクチャってことなんだろうな&amp;hellip;じゃあ最近話題のマイクロサービスアーキテクチャと何が違うんだろう&amp;hellip;同じような名前だけど&amp;hellip;暇なときにでも調べてみるか．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「XXX-oriented」とは「XXXという方向性に基づく（技術）」ぐらいの意味&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Book Shelf</title>
      <link>/ja/post/book-shelf/</link>
      <pubDate>Mon, 25 Nov 2019 23:57:01 +0900</pubDate>
      <guid>/ja/post/book-shelf/</guid>
      <description>&lt;h1 id=&#34;読みたい&#34;&gt;読みたい&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;［改訂新版］プログラマのための文字コード技術入門&lt;/li&gt;
&lt;li&gt;みんなのデータ構造&lt;/li&gt;
&lt;li&gt;プログラマの数学 第2版&lt;/li&gt;
&lt;li&gt;純粋関数型データ構造&lt;/li&gt;
&lt;li&gt;Understanding Compression&lt;/li&gt;
&lt;li&gt;型システム入門 ― プログラミング言語と型の理論&lt;/li&gt;
&lt;li&gt;その数式、プログラムできますか？&lt;/li&gt;
&lt;li&gt;計算機プログラムの構造と解釈&lt;/li&gt;
&lt;li&gt;正規表現技術入門 ― 最新エンジン実装と理論的背景&lt;/li&gt;
&lt;li&gt;アンダースタンディング コンピュテーション ― 単純な機械から不可能なプログラムまで&lt;/li&gt;
&lt;li&gt;ガベージコレクション ― 自動的メモリ管理を構成する理論と実装&lt;/li&gt;
&lt;li&gt;アルゴリズムを学ぼう&lt;/li&gt;
&lt;li&gt;ガベージコレクションのアルゴリズムと実装&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第三巻 ― 精選トピックス&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第二巻（改訂 2 版） ― 高度な設計と解析手法・高度なデータ構造・グラフアルゴリズム&lt;/li&gt;
&lt;li&gt;アルゴリズムイントロダクション第一巻（改訂 2 版） ― 基礎・ソート・データ構造・数学&lt;/li&gt;
&lt;li&gt;オートマトン言語理論　計算論 I（第二版）&lt;/li&gt;
&lt;li&gt;アルゴリズムとデータ構造（岩波講座 ソフトウェア科学 3）&lt;/li&gt;
&lt;li&gt;基礎情報理論&lt;/li&gt;
&lt;li&gt;江添亮の C++ 入門&lt;/li&gt;
&lt;li&gt;Modern C++ チャレンジ ― C++17 プログラミング力を鍛える 100 問&lt;/li&gt;
&lt;li&gt;More Effective C# 6.0/7.0&lt;/li&gt;
&lt;li&gt;低レベルプログラミング&lt;/li&gt;
&lt;li&gt;Optimized C++&lt;/li&gt;
&lt;li&gt;C++ のための API デザイン&lt;/li&gt;
&lt;li&gt;C++ テンプレートテクニック（第二版）&lt;/li&gt;
&lt;li&gt;The Architecture of Open Source Applications - Volume II: Structure, Scale, and a Few More Fearless Hacks&lt;/li&gt;
&lt;li&gt;The Architecture of Open Source Applications - Elegance, Evolution, and a Few Fearless Hacks&lt;/li&gt;
&lt;li&gt;コンパイラの構成と最適化&lt;/li&gt;
&lt;li&gt;最新コンパイラ構成技法（タイガーブック）&lt;/li&gt;
&lt;li&gt;Linkers and Loaders&lt;/li&gt;
&lt;li&gt;コンパイラ 作りながら学ぶ&lt;/li&gt;
&lt;li&gt;7 つの言語 7 つの世界&lt;/li&gt;
&lt;li&gt;江添亮の詳説 C++17&lt;/li&gt;
&lt;li&gt;Effective Modern C++ ― C++11/14 プログラムを進化させる 42 項目&lt;/li&gt;
&lt;li&gt;コーディングを支える技術&lt;/li&gt;
&lt;li&gt;ls を読まずにプログラマを名乗るな！&lt;/li&gt;
&lt;li&gt;Effective STL ― STL を効果的に使いこなす 50 の鉄則&lt;/li&gt;
&lt;li&gt;More Effective C++ ― プログラムとデザインを改良するための新 35 項目&lt;/li&gt;
&lt;li&gt;Effective C++ ― プログラムとデザインを改良するための 55 項目&lt;/li&gt;
&lt;li&gt;ゲームプログラマのための C++&lt;/li&gt;
&lt;li&gt;言語実装パターン ― コンパイラ技術によるテキスト処理から言語実装まで&lt;/li&gt;
&lt;li&gt;パーフェクト JavaScript&lt;/li&gt;
&lt;li&gt;Effective Java（第二版）&lt;/li&gt;
&lt;li&gt;Binary Hacks ― ハッカー秘伝のテクニック 100 選&lt;/li&gt;
&lt;li&gt;リンカ・ローダ実践開発テクニック ― 実行ファイルを作成するために必須の技術&lt;/li&gt;
&lt;li&gt;省メモリプログラミング ― メモリ制限のあるシステムのためのソフトウェアパターン集&lt;/li&gt;
&lt;li&gt;エキスパート Objective-C プログラミング&lt;/li&gt;
&lt;li&gt;iPhone プログラミング UIKit 詳解リファレンス&lt;/li&gt;
&lt;li&gt;スクリプトエンジン プログラミング&lt;/li&gt;
&lt;li&gt;プログラミングテクニックアドバンス ― 実践的 UNIX プログラミングソースコードにみる珠玉の手法&lt;/li&gt;
&lt;li&gt;プログラミングテクニック ― UNIX コマンドのソースコードにみる実践プログラミング手法&lt;/li&gt;
&lt;li&gt;エキスパート Python プログラミング&lt;/li&gt;
&lt;li&gt;GNU Make（第三版）&lt;/li&gt;
&lt;li&gt;ふつうのコンパイラをつくろう ― 言語処理系をつくりながら学ぶコンパイルと実行環境の仕組み&lt;/li&gt;
&lt;li&gt;明快入門　コンパイラ・インタプリタ処理系を作りながら学ぶ&lt;/li&gt;
&lt;li&gt;エキスパート C プログラミング 知られざる C の深層&lt;/li&gt;
&lt;li&gt;メタプログラミング Ruby&lt;/li&gt;
&lt;li&gt;Ruby ソースコード完全解説&lt;/li&gt;
&lt;li&gt;プログラミング言語 Ruby&lt;/li&gt;
&lt;li&gt;Boost C++ Libraries プログラミング（第二版）&lt;/li&gt;
&lt;li&gt;Java の地図帳　図解・実例・リンクで学ぶ Java プログラミング&lt;/li&gt;
&lt;li&gt;コア Java 2 基礎編&lt;/li&gt;
&lt;li&gt;基礎からの PHP&lt;/li&gt;
&lt;li&gt;コンパイラ ― 原理・技法・ツール（ドラゴンブック）&lt;/li&gt;
&lt;li&gt;Raspberry Pi で学ぶコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;動かしてわかる CPU の作り方 10 講&lt;/li&gt;
&lt;li&gt;FPGA の原理と構成&lt;/li&gt;
&lt;li&gt;ディジタル回路設計とコンピュータアーキテクチャ [ARM版]&lt;/li&gt;
&lt;li&gt;熱血！アセンブラ入門&lt;/li&gt;
&lt;li&gt;自作エミュレータで学ぶ x86 アーキテクチャ&lt;/li&gt;
&lt;li&gt;コンピュータアーキテクチャ　定量的アプローチ（ヘネパタ）&lt;/li&gt;
&lt;li&gt;量子コンピュータが人工知能を加速する&lt;/li&gt;
&lt;li&gt;GPU を支える技術 ― 超並列ハードウェアの快進撃［技術基礎］&lt;/li&gt;
&lt;li&gt;ディジタル回路設計とコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;はじめて読む486 - 32ビットコンピュータをやさしく語る&lt;/li&gt;
&lt;li&gt;構造化コンピュータ構成（第四版）&lt;/li&gt;
&lt;li&gt;プロセッサを支える技術&lt;/li&gt;
&lt;li&gt;コンピュータの構成と設計（パタヘネ）&lt;/li&gt;
&lt;li&gt;作りながら学ぶコンピュータアーキテクチャ&lt;/li&gt;
&lt;li&gt;作って理解する OS ― x86 系コンピュータを動かす理論と実装&lt;/li&gt;
&lt;li&gt;Android を支える技術 II ― 新のマルチタスクに挑んだモバイル OS の心臓部&lt;/li&gt;
&lt;li&gt;詳解 システム・パフォーマンス&lt;/li&gt;
&lt;li&gt;インサイド Windows&lt;/li&gt;
&lt;li&gt;新装改訂版 Linux のブートプロセスをみる&lt;/li&gt;
&lt;li&gt;Linux デバイスドライバ&lt;/li&gt;
&lt;li&gt;Unix 考古学 Truth of the Legend&lt;/li&gt;
&lt;li&gt;インサイド Windows&lt;/li&gt;
&lt;li&gt;[試して理解] Linux のしくみ ― 実験と図解で学ぶ OS とハードウェアの基礎知識&lt;/li&gt;
&lt;li&gt;Android を支える技術 I - 60 fps を達成するモダンな GUI システム&lt;/li&gt;
&lt;li&gt;Linux プログラミングインタフェース&lt;/li&gt;
&lt;li&gt;はじめての OS コードリーディング ― UNIX V6 で学ぶカーネルのしくみ&lt;/li&gt;
&lt;li&gt;作りながら学ぶ OS カーネル ― 保護モードプログラミングの基本と実践&lt;/li&gt;
&lt;li&gt;30 日でできる！OS 自作入門&lt;/li&gt;
&lt;li&gt;Write Portable Code ― 複数プラットフォームに移植可能なソフトウェアの開発技法&lt;/li&gt;
&lt;li&gt;Linux システムプログラミング&lt;/li&gt;
&lt;li&gt;例解 UNIX プログラミング教室 ― システムコールを使いこなすための 12 講&lt;/li&gt;
&lt;li&gt;オペレーティングシステムの仕組み&lt;/li&gt;
&lt;li&gt;詳解 Linux カーネル&lt;/li&gt;
&lt;li&gt;構造化並列プログラミング ― 効率良い計算を行うためのパターン&lt;/li&gt;
&lt;li&gt;SRE サイトリライアビリティエンジニアリング ― Google の信頼性を支えるエンジニアリングチーム&lt;/li&gt;
&lt;li&gt;ビッグデータを支える技術 ― 刻々とデータが脈打つ自動化の世界&lt;/li&gt;
&lt;li&gt;Shared Memory Application Programming&lt;/li&gt;
&lt;li&gt;並行コンピューティング技法 ― 実践マルチコア/マルチスレッドプログラミング (The Art of Concurrency)&lt;/li&gt;
&lt;li&gt;The Art of Multiprocessor Programming ― 並行プログラミングの原理から実践まで&lt;/li&gt;
&lt;li&gt;Pthreads プログラミング&lt;/li&gt;
&lt;li&gt;Google を支える技術&lt;/li&gt;
&lt;li&gt;TCP 技術入門 ― 進化を続ける基本プロトコル&lt;/li&gt;
&lt;li&gt;ソースコードで体感するネットワークの仕組み ― 手を動かしながら基礎から TCP/IP の実装までがわかる&lt;/li&gt;
&lt;li&gt;アカマイ ― 知られざるインターネットの巨人&lt;/li&gt;
&lt;li&gt;UNIX ネットワークプログラミング (Vol.2) IPC: プロセス間通信&lt;/li&gt;
&lt;li&gt;UNIX ネットワークプログラミング (Vol.1) ネットワーク API: ソケットと XTI&lt;/li&gt;
&lt;li&gt;体系的に学ぶ 安全な Web アプリケーションの作り方 (第 2 版) ― 脆弱性が生まれる原理と対策の実践&lt;/li&gt;
&lt;li&gt;ブラウザハック&lt;/li&gt;
&lt;li&gt;超速! Web ページ速度改善ガイド ― 使いやすさは「速さ」から始まる&lt;/li&gt;
&lt;li&gt;Web フロントエンドハイパフォーマンスチューニング&lt;/li&gt;
&lt;li&gt;ハイパフォーマンスブラウザネットワーキング ― ネットワークアプリケーションのためのパフォーマンス最適化&lt;/li&gt;
&lt;li&gt;めんどうくさい Web セキュリティ&lt;/li&gt;
&lt;li&gt;Ruby on Rails 3 アプリケーションプログラミング&lt;/li&gt;
&lt;li&gt;Web 開発者のための大規模サービス技術入門 ― データ構造、メモリ、OS、DB、サーバ/インフラ&lt;/li&gt;
&lt;li&gt;24 時間 365 日 サーバ/インフラを支える技術 ― スケーラビリティ、ハイパフォーマンス、省力運用&lt;/li&gt;
&lt;li&gt;仕事ではじめる機械学習&lt;/li&gt;
&lt;li&gt;これならわかる深層学習入門&lt;/li&gt;
&lt;li&gt;ゼロから作る Deep Learning 2/3&lt;/li&gt;
&lt;li&gt;作って動かす ALife&lt;/li&gt;
&lt;li&gt;TensorFlow ではじめる DeepLearning 実装入門&lt;/li&gt;
&lt;li&gt;はじめてのパターン認識&lt;/li&gt;
&lt;li&gt;進化的アーキテクチャ ― 絶え間ない変化を支える&lt;/li&gt;
&lt;li&gt;Clean Architecture 達人に学ぶソフトウェアの構造と設計&lt;/li&gt;
&lt;li&gt;エリック・エヴァンスのドメイン駆動設計&lt;/li&gt;
&lt;li&gt;マイクロサービスアーキテクチャ&lt;/li&gt;
&lt;li&gt;API デザインケーススタディ Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方&lt;/li&gt;
&lt;li&gt;エンジニアのためのマネジメントキャリアパス ― テックリードから CTO までマネジメントスキル向上ガイド&lt;/li&gt;
&lt;li&gt;サイバー攻撃 ― ネット世界の裏側で起きていること&lt;/li&gt;
&lt;li&gt;エンジニアリング組織論への招待 ― 不確実性に向き合う思考と組織のリファクタリング&lt;/li&gt;
&lt;li&gt;プリンシプル オブ プログラミング ― 3 年目までに身につけたい 一生役立つ 101 の原理原則&lt;/li&gt;
&lt;li&gt;Joel on Software&lt;/li&gt;
&lt;li&gt;OSS ライセンスの教科書&lt;/li&gt;
&lt;li&gt;エンジニアの知的生産術 ― 効率的に学び、整理し、アウトプットする&lt;/li&gt;
&lt;li&gt;セキュリティコンテストのための CTF 問題集&lt;/li&gt;
&lt;li&gt;セキュリティコンテストチャレンジブック ― CTF で学ぼう! 情報を守るための戦い方&lt;/li&gt;
&lt;li&gt;プログラミングコンテストチャレンジブック&lt;/li&gt;
&lt;li&gt;目指せ！プログラミング世界一 ― 大学対抗プログラミングコンテスト ICPC への挑戦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;読んだ&#34;&gt;読んだ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;クラウドを支えるこれからの暗号技術&lt;/li&gt;
&lt;li&gt;リーダブルコード　より良いコードを書くためのシンプルで実践的なテクニック&lt;/li&gt;
&lt;li&gt;GitHub 実践入門 ― Pull Request による開発の変革&lt;/li&gt;
&lt;li&gt;人工知能は人間を超えるか&lt;/li&gt;
&lt;li&gt;ゼロから作る Deep Learning&lt;/li&gt;
&lt;li&gt;Real World HTTP ― 歴史とコードに学ぶインターネットとウェブ技術&lt;/li&gt;
&lt;li&gt;Writing An Interpreter In Go&lt;/li&gt;
&lt;li&gt;Writing A Compiler In Go&lt;/li&gt;
&lt;li&gt;実践 Rust 入門 ― 言語仕様から開発手法まで&lt;/li&gt;
&lt;li&gt;Programming Rust&lt;/li&gt;
&lt;li&gt;すごい Haskell たのしく学ぼう！&lt;/li&gt;
&lt;li&gt;プログラミング言語 Go&lt;/li&gt;
&lt;li&gt;Go ならわかるシステムプログラミング&lt;/li&gt;
&lt;li&gt;コンピュータシステムの理論と実装&lt;/li&gt;
&lt;li&gt;Go 言語による並行処理&lt;/li&gt;
&lt;li&gt;Distributed Systems: Principles and Paradigms (2nd Edition)&lt;/li&gt;
&lt;li&gt;Computer Networking: A Top-Down Approach (4th Edition)&lt;/li&gt;
&lt;li&gt;ふつうの Linux プログラミング (第 2 版) ― Linux の仕組みから学べる gcc プログラミングの王道&lt;/li&gt;
&lt;li&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/li&gt;
&lt;li&gt;Cracking the Coding Interview: 189 Programming Questions and Solutions&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golangでよく見かける構造体実装パターン</title>
      <link>/ja/post/golang-structure-implementation-patterns/</link>
      <pubDate>Thu, 14 Nov 2019 14:57:55 +0900</pubDate>
      <guid>/ja/post/golang-structure-implementation-patterns/</guid>
      <description>&lt;h2 id=&#34;golangでよく見かける構造体実装パターン&#34;&gt;Golangでよく見かける構造体実装パターン&lt;/h2&gt;
&lt;p&gt;よく見かけるパターンをまとめてみた．&lt;/p&gt;
&lt;h3 id=&#34;コンストラクタとしてのnewxxxx&#34;&gt;コンストラクタとしての&lt;code&gt;NewXXXX()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;構造体の初期化と生成に使うパターン&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/7PCxyYTCwek&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;👍 構造体の生成と初期化の内部実装を利用者に見せない&lt;/li&gt;
&lt;li&gt;👍 構造体そのものの構造を利用者に見せない&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;エクスポートして外部パッケージからのアクセス許可を利用したシングルトン&#34;&gt;エクスポートして外部パッケージからのアクセス許可を利用したシングルトン&lt;/h3&gt;
&lt;p&gt;「構造体名の先頭を大文字にすることで外部パッケージからのアクセスを許可する」というGolangの特徴を生かしてシングルトンを生成できる．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 構造体自体を外部に公開しない
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 構造体のインスタンスを保持する変数も外部に公開しない
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// シングルトンなインスタンスを取得する関数のみを外部に公開
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetInstance&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
	     &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singleton&lt;/span&gt;{}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;interfaceでポリモーフィズム&#34;&gt;&lt;code&gt;interface&lt;/code&gt;でポリモーフィズム&lt;/h3&gt;
&lt;p&gt;Golangには「型の継承」がない．一方で，&lt;code&gt;interface&lt;/code&gt;を用いることでポリモーフィズムを実現できる．&lt;code&gt;interface&lt;/code&gt;によって振る舞いを定義することで，「同じような振る舞いをするもの」をまとめて扱えるようになる．&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/p-yY5gEOdaG&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;構造体の埋め込みによるポリモーフィズム&#34;&gt;構造体の埋め込みによるポリモーフィズム&lt;/h3&gt;
&lt;p&gt;ある構造体に対して，特定の振る舞いを実装している構造体を埋め込むことで，その構造体も「埋め込まれた構造体と同様な振る舞いをするもの」として扱うことができる．ただ，これをやると構造体の初期化時に構造体の内部を意識する必要があるため，初期化のための&lt;code&gt;NewXXXX()&lt;/code&gt;を用意してあげると良い．&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/MsxaudYhObv&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;埋め込まれた構造体が上位の構造体の関数を使う&#34;&gt;埋め込まれた構造体が上位の構造体の関数を使う&lt;/h3&gt;
&lt;p&gt;オブジェクト指向では「子クラスが親クラスのメソッドを用いること」ができるが，Golangでもできないことはない．&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/cQ4uSQ7_TLl&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;構造体による処理の移譲&#34;&gt;構造体による処理の移譲&lt;/h3&gt;
&lt;p&gt;構造体のメンバーとして，特定の処理に対して責任を持つ構造体を持つことで，処理の移譲を実現できる．&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/KPX9i1sY1CK&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;関数による処理の移譲&#34;&gt;関数による処理の移譲&lt;/h3&gt;
&lt;p&gt;Golangでは関数は第1級市民なので値として扱うことができる．処理を定義した関数をやりとりすることで処理を移譲させることができる．&lt;/p&gt;
&lt;iframe src=&#34;https://play.golang.org/p/MN93S3LVX9l&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Data Serializationのさまざま</title>
      <link>/ja/post/json-vs-protobuf-vs-flatbuf/</link>
      <pubDate>Mon, 04 Nov 2019 01:03:05 +0900</pubDate>
      <guid>/ja/post/json-vs-protobuf-vs-flatbuf/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;communication.gif&#34; alt=&#34;通信し合うサーバーたち&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;データのserializationdeserialization&#34;&gt;データのserialization/deserialization&lt;/h2&gt;
&lt;p&gt;イマドキのソフトウェアは，機能ごとにプログラムを整理整頓して，それらが情報をやりとりしながらサービスを提供します．システムを構成するコンポーネント間でメッセージングをしなければならず，その際にやりとりするデータについて「どういう表現であるのか」について共有しておかないといけません．人間の会話で言うならば「何語を喋るか」に近いのかな．&lt;/p&gt;
&lt;p&gt;「どんな形式でデータを表現するか」についてはいくつかの形式が提案されていて，それぞれについて一長一短がある．代表的なのはXML，JSON，BSON，Protocol Buffers，FlatBuffers．他にもいろいろあります．&lt;/p&gt;
&lt;h2 id=&#34;xml&#34;&gt;XML&lt;/h2&gt;
&lt;p&gt;XMLとは「e&lt;strong&gt;X&lt;/strong&gt;tended &lt;strong&gt;M&lt;/strong&gt;arkdown &lt;strong&gt;L&lt;/strong&gt;anguage」の略で，文章の電子化に源流があるデータ形式．前提に「文章のデジタル化」があるので，XMLの仕様にはデータの「型」が定義されていません．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;breakfast_menu&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;food&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Belgian Waffles&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;price&amp;gt;&lt;/span&gt;$5.95&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/price&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
		Two of our famous Belgian Waffles with plenty of real maple syrup
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;calories&amp;gt;&lt;/span&gt;650&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/calories&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/food&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;food&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Strawberry Belgian Waffles&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;price&amp;gt;&lt;/span&gt;$7.95&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/price&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
		Light Belgian waffles covered with strawberries and whipped cream
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;calories&amp;gt;&lt;/span&gt;900&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/calories&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/food&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/breakfast_menu&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;XMLは文章のデジタル化が前提にあるので，HTMLみたいな見た目になっています．&lt;/p&gt;
&lt;p&gt;XMLの特徴として「XMLはself-describingである」と評されることが多くあります．これは「&lt;strong&gt;データ自体の構造がデータそのものに表現されている&lt;/strong&gt;」ということです．つまり事前に通信の両端でやり取りするデータの方についての合意をとっていなくても（やり取りするデータを眺めれば）データの齟齬のない解釈が可能であるということです．JSONだとこれはできません．XMLはタグだけをみることで，そのデータの構造を即座に読み取ることができます．JSONでは，タグに相当するものをハッシュのキーとして表現すればできないわけではないが，それはデータの型を表現したわけではなくて，ハッシュを用いて似たようなデータ型を表現しただけです．&lt;/p&gt;
&lt;p&gt;XMLで記述されたデータはそれ自身のメタな構造をも表現しているという点が分散システムにおけるデータのやり取りで非常に有用なので，古くからよく使われています．&lt;/p&gt;
&lt;h2 id=&#34;json&#34;&gt;JSON&lt;/h2&gt;
&lt;p&gt;JSONとは「&lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation」の略．JSONをシステム間のデータの表現形式として用いると「JavaScriptでのデータのリテラルな表現をそのままシステム間のデータ表現形式」として用いることになって，webな世界だとJavaScriptのインタプリタでそのまま処理できるので扱いやすくてよく用いられがち．しかも，JSONは人間にとってもパッと見でデータの構造が把握しやすくて人気が出ました．それなりに古参なデータ形式ですが，現在もバリバリの現役です．視認性が良いのがやっぱり人気の理由なんですかね．デバッグしやすいし．&lt;/p&gt;
&lt;p&gt;JSONは「プログラミング言語におけるデータのリテラル表現」が出所なので，仕様として「型」が含まれていて，扱いやすいです．「型」が仕様として存在しているので「空の値」を型ごとに区別することができます．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;: [],
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dict&amp;#34;&lt;/span&gt;: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JSONは，こんなにシステム間で情報をやりとりする際のデータ形式として用いられるようになることを全然想定していなかったので，扱いづらさがあったりするらしい．僕は具体的に表現することができないが「古臭い」なんて言われることもあります．&lt;/p&gt;
&lt;p&gt;「どういうフィールドを持ったJSONデータを扱うのか」について通信の両端点で合意しておく必要があるのはもちろんですが，JSONのデータ形式はスキーマを直接的に表現しているわけではない（つまりインタフェースをJSONが規定しているわけではない）という認識も大事だと思います．そのままのJSONはただのデータ形式に過ぎなくて，スキーマ言語としての「データ型を定義する」というメタな機能はないということです．&lt;/p&gt;
&lt;p&gt;JSONなどでも「JSONでJSONのスキーマを書いてしまおう」という&lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt;なるものが存在しているそうですが，やっぱりだいぶ書きにくそうです．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;productId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An ice sculpture&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12.50&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cold&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ice&amp;#34;&lt;/span&gt; ],
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dimensions&amp;#34;&lt;/span&gt;: {
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7.0&lt;/span&gt;,
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12.0&lt;/span&gt;,
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9.5&lt;/span&gt;
	},
 	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;warehouseLocation&amp;#34;&lt;/span&gt;: {
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;latitude&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-78.75&lt;/span&gt;,
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;longitude&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20.4&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というスキーマをJSONで書くと&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://json-schema.org/draft-07/schema#&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/product.schema.json&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Product&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A product from Acme&amp;#39;s catalog&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;productId&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The unique identifier for a product&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
		},
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name of the product&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
		},
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The price of the product&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;exclusiveMinimum&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		},
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tags for the product&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: {
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
			},
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minItems&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uniqueItems&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		},
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dimensions&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;: {
					&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;
				},
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;: {
		    		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;
				},
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: {
					&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;
				}
			},
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt; ]
		},
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;warehouseLocation&amp;#34;&lt;/span&gt;: {
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Coordinates of the warehouse where the product is located.&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$ref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com/geographical-location.schema.json&amp;#34;&lt;/span&gt;
		}
	},
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productId&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productName&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🤔 ﾁｮｯﾄﾐﾆｸｲ&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;bson&#34;&gt;BSON&lt;/h2&gt;
&lt;p&gt;JSONはテキストベース（つまりシリアライズ・デシリアライズの際に扱われるデータの単位がbitじゃなくてbyte）でしたが，それを改めたBSON = &lt;strong&gt;B&lt;/strong&gt;inary J&lt;strong&gt;SON&lt;/strong&gt;というのも存在します．つまりBSONではデータがバイナリベース（つまりシリアライズ・デシリアライズの際に扱われるデータの大きさの単位がbit）になっています．BSONは後述するProtocol Buffersとよく似ていて，度々比較されています．公式によると，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep­ing spa­tial over­head to a min­im­um is im­port­ant for any data rep­res­ent­a­tion format, es­pe­cially when used over the net­work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Traversable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSON is de­signed to be tra­versed eas­ily. This is a vi­tal prop­erty in its role as the primary data rep­res­ent­a­tion for Mon­goDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En­cod­ing data to BSON and de­cod­ing from BSON can be per­formed very quickly in most lan­guages due to the use of C data types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;という特徴があります．&lt;/p&gt;
&lt;p&gt;BSONは，Protocol Buffersと比較して&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;more &amp;ldquo;schema-less&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;であるとされています．つまり，サービス間のインタフェースの仕様そのものとやりとりするデータ形式の関係性が（Protocol Buffersと比較して）疎で，より柔軟性があるということです．一方で，BSONはProtocol Buffersと比べてメッセージのフィールド名のエンコードに関してやや冗長であるとされています．&lt;/p&gt;
&lt;p&gt;MongoDBがBSONをデータの表現方式として採用しているのが興味深いですね．多くの主要言語でBSONのエンコード・デコードをサポートするライブラリが実装されていて手軽に使えそうな印象です．ただ，バイナリベースということもあって，BSONをそのまま眺めても人間には意味がわからないので，デバッグはちょっと大変なのかもしれませんね．&lt;/p&gt;
&lt;p&gt;例えば&lt;code&gt;{&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;}&lt;/code&gt;をBSONでエンコードすると以下のようになります．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  \x16\x00\x00\x00                   // total document size
  \x02                               // 0x02 = type String
  hello\x00                          // field name
  \x06\x00\x00\x00world\x00          // field value
  \x00                               // 0x00 = type EOO (&#39;end of object&#39;)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;protocol-buffers&#34;&gt;Protocol Buffers&lt;/h2&gt;
&lt;p&gt;Protocol BuffersはGoogleが社内のシステム間で情報をやりとりする際に用いていたデータ形式で2008年にオープンソース化されました．Googleが出している公式のドキュメントによれば&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということらしいです．Protocol Buffersはシステム間で情報をやりとりする際に用いるデータ形式の一種なんですが，それは嘘じゃないんですけど，Protocol Buffersの指す意味範囲はそれだけにとどまらず，サービス間のインタフェースを定義するスキーマ言語としての顔もあるのが特徴です．もっというと，このスキーマ言語が優秀であるというのがProtocol Buffersの人気を大きく支えている理由なのだと思います．「Protocol Buffersがスキーマ言語である」というのはどういうことかというと，Protocol Buffersでは「システムのインタフェース（つまり，どんな型のデータをやりとりするのか）を定義する独自言語」であるということです．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;protobuf;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SimpleMessage&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HeaderItem&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Type {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		START &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		BLOB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		END &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	Type message_type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; HeaderItem headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;bytes&lt;/span&gt; blob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Protocol Buffersは，サービス間でやりとりするデータの型を表現する独自言語とともに，その独自言語で記述されたインタフェースを特定の言語にコンパイルするツールまでもが同梱されています．&lt;/p&gt;
&lt;p&gt;スキーマ言語が存在すると，非常に便利です．モダンなソフトウェアシステムでは，いろんなところにデータが保存されているかもしれないし，バックエンドで動いているサーバーもいくつかあるかもしれないし，もはやそれが普通になってきています．となると，システムの中のありとあらゆる場所でデータのシリアライズ・デシリアライズをしなければならないし，通信している両者でデータの解釈に矛盾が発生しないように整える必要があります．スキーマ言語があると，この「整える作業」がとてもやりやすくなります．自然言語と違って，スキーマ言語では解釈に差異が発生しないからです．「管理者が一人」みたいなシステムでは，スキーマ言語なんてたいそうなものを持ち出してくる必要はないと思うんですけど，webみたいな自律分散的な系だと，ますますスキーマ言語としてのProtocol Buffersの良さが際立ってくるわけです．&lt;/p&gt;
&lt;p&gt;Protocol Buffersのスキーマ言語としての良さは，その簡潔さではないでしょうか．プログラムを書く人間にとっては，特に難しいことを考えずに意図が汲み取れる程度の決まりごとしかないし，スキーマ言語としてプログラミング言語から独立している点も，ツールの作りやすさとかに影響していて，Protocol Buffersが人気な理由なんだと思います．&lt;/p&gt;
&lt;p&gt;Protocol Buffersでは，&lt;code&gt;.proto&lt;/code&gt;ファイルとしてサービスインタフェースを記述します．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; PhoneType {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		MOBILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		HOME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		WORK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PhoneNumber&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; PhoneType type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HOME];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; PhoneNumber phone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;明確なサービスインタフェースをコンパイラによって適切に所望の言語のプログラムに変換してくれるので，開発を進めやすくなります．&lt;/p&gt;
&lt;p&gt;Protocol Buffersではサービスのインタフェースの変更に対して後方互換性を維持した形でメッセージのやり取りをできるように「未知なフィールドに遭遇したら無視する」ということになっています．こうすれば，サービスのインタフェースが更新されたとしても，既存のプログラムは動くことには動くことになります．&lt;/p&gt;
&lt;p&gt;Protocol Buffersの公式のドキュメントでは，XMLと比較して&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Protocol buffers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are simpler&lt;/li&gt;
&lt;li&gt;are 3 to 10 times smaller&lt;/li&gt;
&lt;li&gt;are 20 to 100 times faster&lt;/li&gt;
&lt;li&gt;are less ambiguous&lt;/li&gt;
&lt;li&gt;generate data access classes that are easier to use programmatically&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;と主張しています．確かにXMLはいちいちタグで括らなきゃいけないしProtocol Buffersは効率が良さそうです．&lt;/p&gt;
&lt;p&gt;Protocol Buffersのデフォルトのシリアライズはバイナリベースです．人間が眺めて構造が取れるような見た目にはなっていません．しかしProtocol Buffersはシリアライズのフォーマットとして様々な形式（例えばJSONなど）も扱えるように周辺ツールが充実しているので，「スキーマ言語としてのProtocol Buffersでサービスのインフェースを記述して，実際にやり取りするデータはJSON」ということも可能になっています．&lt;/p&gt;
&lt;h2 id=&#34;flat-buffers&#34;&gt;Flat Buffers&lt;/h2&gt;
&lt;p&gt;これもGoogleによってオープンソース化されたデータのシリアライズ・デシリアライズ方式．公式によれば，&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Access to serialized data without parsing/unpacking&lt;/li&gt;
&lt;li&gt;Memory efficiency and speed&lt;/li&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;Tiny code footprint&lt;/li&gt;
&lt;li&gt;Strongly typed&lt;/li&gt;
&lt;li&gt;Convenient to use&lt;/li&gt;
&lt;li&gt;Cross platform code with no dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;という特徴があります．面白いのが「Access to serialized data without parsing/unpacking」ってところですね．FlatBuffersでは階層構造を持つデータを，パースすることなく直接扱うことができるらしいです．&lt;/p&gt;
&lt;p&gt;Protocol Buffersの進化系として自らを位置づけていて，Flat Buffersではデータをパースする必要がないのでProtocol Buffersと比較してコード量が桁違いで削減できて，さらにFlat BuffersではProtocol Buffersより強力に型をサポートしているところが進化ポイントですね．white paperのmotivationの章には&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In particular, FlatBuffers focus is on mobile hardware (where memory size and memory bandwidth is even more constrained than on desktop hardware), and applications that have the highest performance needs: games.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とあり，シリアライズの効率について高水準なものが求められる状況で用いられることが想定されているそうです．&lt;/p&gt;
&lt;p&gt;Facebookで用いられているらしいですが，Protocol Buffersの人気に押されて，あまり流行っている感じはしないんですがどうなんでしょうか．&lt;/p&gt;
&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;h3 id=&#34;xml-1&#34;&gt;XML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hoge&lt;/li&gt;
&lt;li&gt;hoge&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;json-1&#34;&gt;JSON&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/whatis/whatis_json.asp&#34;&gt;What is JSON - W3Schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/js/js_json_intro.asp&#34;&gt;JSON Introduction - W3Schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bson-1&#34;&gt;BSON&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;protocol-buffers-1&#34;&gt;Protocol Buffers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Protocol Buffers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flat-buffers-1&#34;&gt;Flat Buffers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flat Buffers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Self-Sovereign Identity - 自己主権型アイデンティティー</title>
      <link>/ja/post/what-is-self-sovereign-identity/</link>
      <pubDate>Sun, 03 Nov 2019 23:48:08 +0900</pubDate>
      <guid>/ja/post/what-is-self-sovereign-identity/</guid>
      <description>&lt;h2 id=&#34;identity-is&#34;&gt;Identity is&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The fact of being who or what a person or thing is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;self-sovereign-identity---自己主権型アイデンティティとは&#34;&gt;Self-Sovereign Identity - 自己主権型アイデンティティとは&lt;/h2&gt;
&lt;p&gt;Self-Sovereign Identityとは，一言で言えば「物理世界における身分証明書と同じレベルの正当性と携帯性と情報の制御可能性を備えたデジタルな身分証明書」です．Self-Sovereign Identityが実現すれば，公的に有効な身分証明書として機能するだけでなく，物理世界における「運転免許証」のように手軽に携帯できて，第二者に対して証明したい事柄に関連する必要十分な情報のみを開示する（例えば，年齢確認する際には誕生年だけ提示して住所は見せない）といった個人情報の制御も可能となります．&lt;/p&gt;
&lt;h2 id=&#34;現状のdigital-identityの問題点self-sovereign-identityが必要とされる背景&#34;&gt;現状のDigital Identityの問題点・Self-Sovereign Identityが必要とされる背景&lt;/h2&gt;
&lt;p&gt;そもそもなぜSelf-Sovereign Identityなるものが必要なのでしょうか．それはインターネットという計算機のネットワークが「接続において，通信の両端点のアイデンティティーを全く考慮しない」という系だからです．&lt;/p&gt;
&lt;p&gt;インターネットでは「誰が繋がっているのか」について全く関知しません．だからこそ自律分散な系として成立することができます．中央で接続を管理する者が存在する必要がないわけですね．&lt;/p&gt;
&lt;p&gt;しかし，SNSの登場によってインターネット上でのアイデンティティーのようなものが確立されてきました．SNSのアカウント情報です．SNSは「物理世界における人間のネットワーク」を計算機上に実現したものであるから，SNSという系に登場するアカウントは物理世界の人間と非常に密に関連している情報だし，その側面を持ってアイデンティティー的なものと見ることもできなくもないです．しかしSNSアカウントは物理世界におけるアイデンティティー（パスポートや運転免許証）と等価なものとしては扱えません．&lt;/p&gt;
&lt;p&gt;物理世界のアイデンティティーは「国家のような信頼できる第三者によって発行される証明書」として存在しています．パスポート，運転免許証はまさしくそれです．国家が「この人はこういう人で&amp;hellip;」という保証をしてくれているのです．だから（少なくともその証明書を発行している第三者を信頼できる者という共通認識のある範囲内では）証明書を見せつけることで第二者に対して自分の身分を証明することが可能なのです．&lt;/p&gt;
&lt;p&gt;パスポートや運転免許証はポケットに入れて持ち運ぶことができます．さらに第二者に対して開示する個人情報を，自分の手で制御することができます．相手に年齢確認を求められたなら，生年月日だけで十分（住所まで教える必要はない）ですから，運転免許証の該当部分だけ見せてあとは黒塗りとかでも主張の正当性は証明できるわけですね．この携帯性と情報開示に対する制御性が物理世界におけるアイデンティティーの持つ重要な性質です．&lt;/p&gt;
&lt;p&gt;SNSアカウントは実はこの「携帯性」と「情報開示に対する制御性」を兼ね備えていません．FacebookアカウントでTwitterにはログインできないし，Facebookは僕の持っているFacebookアカウントの情報の完全なコピーを持っていますし，Facebookがそれを外部に公開してしまえば，僕にはそれを止める手段がありません．&lt;/p&gt;
&lt;p&gt;Self-Sovereign Identityはデジタルなアイデンティティーにサービスを跨いだ携帯性とアイデンティティー情報に対する制御性をユーザーに取り戻すことを目指して考案された概念です．&lt;/p&gt;
&lt;h3 id=&#34;self-sovereign-identityに至るまでのデジタルアイデンティティーの変遷&#34;&gt;Self-Sovereign Identityに至るまでのデジタルアイデンティティーの変遷&lt;/h3&gt;
&lt;p&gt;デジタルアイデンティティーの類型はだいたい以下の4個です．どれも現役で用いられているアイデンティティーで，後半のものほど新し目な考え方で，グラデーションがついていると思うとわかりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Centralized Identity - 中央集権型アイデンティティー&lt;/li&gt;
&lt;li&gt;Federated Identity - 連合型アイデンティティー&lt;/li&gt;
&lt;li&gt;User-Centric Identity - ユーザー中心型アイデンティティー&lt;/li&gt;
&lt;li&gt;Self-Sovereign Identity - 自己主権型アイデンティティ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;centralized-identity---中央集権型アイデンティティー&#34;&gt;Centralized Identity - 中央集権型アイデンティティー&lt;/h4&gt;
&lt;p&gt;ここのサービスごとに，サービス運営者がIDを発行・管理するタイプのIDです．メールアドレスとパスワードでアカウントを作成するタイプのIDはこれです．IDの管理権限が発行主体にあるというのが特徴で，現在世の中で運営されているほとんどのインターネットサービスがこの方式を採用していますね．&lt;/p&gt;
&lt;p&gt;サービスのビジネスモデルがユーザーの囲い込みによって成立しているという側面を考慮すると，発行とともに管理できる方が，サービス運営者としてはやりやすいし，実装も容易であるからだと思います．&lt;/p&gt;
&lt;p&gt;このタイプのIDは，発行されたIDをそのサービスの外に持ち出すことが難しいことから，ユーザーのサービスに対するロックインや，サービスごとのアイデンティティーの分断，ユーザーによるIDの管理が不可能（サービス運営者が悪意を働いてもそれを止める手段をユーザーは持ち合わせていない）という問題点があります．&lt;/p&gt;
&lt;h4 id=&#34;federated-identity---連合型アイデンティティー&#34;&gt;Federated Identity - 連合型アイデンティティー&lt;/h4&gt;
&lt;p&gt;複数のサービス間でIDについて合意を取ることで，連合内ではIDの持ち運びが可能となるようなIDのことです．Single Sign-Onと呼ばれることもあります．1つのIDで複数サービスにログインできるサービス間での相互運用性Interoperabilityを実現します．&lt;/p&gt;
&lt;p&gt;連合型アイデンティティーは中央集権型のそれよりもユーザーの利便性は向上する一方で，連合型アイデンティティーであっても，IDそのものの管理は連合を組んでいるサービス提供者側にあります．&lt;/p&gt;
&lt;p&gt;実は連合型アイデンティティーに対する取り組みは，これまで一部で実際に行われてきた歴史があります．1999年にはMicrosoftが&lt;a href=&#34;https://news.microsoft.com/2000/05/17/passport-to-convenience-microsofts-single-sign-in-and-wallet-services-for-online-shopping/&#34;&gt;Passport&lt;/a&gt;という連合型アイデンティティーサービスに取り組もうとしていました．&lt;/p&gt;
&lt;p&gt;これは，その当時に増加してきていたEコマース事業に対してその利便性を高めることを狙ってMicrosoftが取り組んでいたもので，Windows XPへのPassportでのサインインが可能だったりと結構新し目なことに取り組もうとしたのだと思います．Eコマースサイトに手元のパソコンのアカウントでログインできるということですから，覚えなきゃいけない情報が減るので助かりますね．&lt;/p&gt;
&lt;p&gt;一方で，Microsoftが一社でIDを管理するという色合いが強かったのも事実で，それを嫌ってか，広く利用されるには至らなかったようです．&lt;/p&gt;
&lt;p&gt;実はMicrosoftのPassportに対抗してSun Microsystemsを中心とした企業連合によってLiberty Allianceという同じく連合型アイデンティティーの実現を目指した団体があったようなんですが，これも道半ばで頓挫してしまいました．&lt;/p&gt;
&lt;h4 id=&#34;user-centric-identity---ユーザー中心型アイデンティティー&#34;&gt;User-Centric Identity - ユーザー中心型アイデンティティー&lt;/h4&gt;
&lt;p&gt;「ユーザーは自身のIDを自らの手で制御すべきだ」という考えに基づいて考案されたのがユーザー中心型アイデンティティーです．ユーザー中心型アイデンティティーでは「ユーザーの同意Consent」と「相互運用性Interoperability」に特に重きがおかれました．ユーザー中心型アイデンティティーはThe Identity Commonsという団体がリードしていたプロジェクトで，The Identity CommonsはInternet Identity Workshopを設立し，ユーザー中心型アイデンティティーの仕様策定を推進してきました．Internet Identity WorkshopはOpenID，OpenID Connect，OAuthといった現在多くSingle Sign-Onで利用されている仕様を誕生させています．&lt;/p&gt;
&lt;p&gt;一方でユーザー中心型アイデンティティーでも，IDの管理はIDの発行元によって行われ，もし発行元がIDの削除をしてしまえばそのIDは存在しなくなってしまうわけで，完全なユーザー中心（管理までユーザーの手で行う）というわけではないようです．&lt;/p&gt;
&lt;h4 id=&#34;self-sovereign-identity---自己主権型アイデンティティ&#34;&gt;Self-Sovereign Identity - 自己主権型アイデンティティ&lt;/h4&gt;
&lt;p&gt;「物理世界におけるアイデンティティーの持つ携帯性と情報に対する制御性をデジタルなアイデンティティーに持ち込もう」というのが自己主権型アイデンティティーです．アイデンティティーに管理を自分の手で行おうとするのが自己主権に指す意味です．&lt;/p&gt;
&lt;h2 id=&#34;self-sovereign-identityの仕組み&#34;&gt;Self-Sovereign Identityの仕組み&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;信頼できる第三者がユーザーの身分を証明する証明書を発行し，その証明書に電子署名を施す．この際に信頼できる第三者に対する識別子と署名情報を情報を耐改竄性のある公共アクセスが可能なストレージに保存する&lt;/li&gt;
&lt;li&gt;ユーザーは信頼できる第三者によって電子署名の施された証明書に対して自分の電子署名を施して，手元に保管する．この際，ユーザーに対する識別子と署名情報を耐改竄性のある公共アクセスが可能なストレージに保存する&lt;/li&gt;
&lt;li&gt;身分証明を要求する検証者はユーザーから提示された証明書（もしくはその一部）に対して，その証明書が正当であることを公共アクセス可能なストレージに保存されている情報をもとに判断する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この「耐改竄性のある公共アクセスが可能なストレージ」がブロックチェーンを用いることで実現できるかもしれないということで，Self-Sovereign Identityの実現可能性が見えてきているのです．&lt;/p&gt;
&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@AlexPreukschat/self-sovereign-identity-a-guide-to-privacy-for-your-digital-identity-5b9e95677778&#34;&gt;https://medium.com/@AlexPreukschat/self-sovereign-identity-a-guide-to-privacy-for-your-digital-identity-5b9e95677778&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.windley.com/archives/2018/09/multi-source_and_self-sovereign_identity.shtml&#34;&gt;https://www.windley.com/archives/2018/09/multi-source_and_self-sovereign_identity.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/2019/WD-did-core-20191107/&#34;&gt;https://www.w3.org/TR/2019/WD-did-core-20191107/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jnsa.org/seminar/2018/0126/data/2-3.pdf&#34;&gt;https://www.jnsa.org/seminar/2018/0126/data/2-3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.icr.co.jp/newsletter/wtr346-20180126-ogawa.html&#34;&gt;https://www.icr.co.jp/newsletter/wtr346-20180126-ogawa.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dappsway.com/entry/what-is-ssi&#34;&gt;https://www.dappsway.com/entry/what-is-ssi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.windley.com/archives/2017/10/fixing_the_five_problems_of_internet_identity.shtml&#34;&gt;https://www.windley.com/archives/2017/10/fixing_the_five_problems_of_internet_identity.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/blogs/blockchain/category/trusted-identity/self-sovereign-identity/&#34;&gt;https://www.ibm.com/blogs/blockchain/category/trusted-identity/self-sovereign-identity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lifewithalacrity.com/2016/04/the-path-to-self-soverereign-identity.html&#34;&gt;http://www.lifewithalacrity.com/2016/04/the-path-to-self-soverereign-identity.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal of Golang Concurrency Primitives</title>
      <link>/ja/post/internal-of-golang-concurrency-primitives/</link>
      <pubDate>Fri, 01 Nov 2019 14:07:56 +0900</pubDate>
      <guid>/ja/post/internal-of-golang-concurrency-primitives/</guid>
      <description>&lt;h2 id=&#34;並行処理並列処理&#34;&gt;並行処理？並列処理？&lt;/h2&gt;
&lt;p&gt;並行処理とか並列処理って一体なんなのでしょう．&lt;/p&gt;
&lt;p&gt;黎明期の計算機では，並行処理だの並列処理だのなんてことは，一切考えていませんでした．入力された命令を1つずつ，真面目に実行していくことで計算を実行していたのです．黎明期の計算機は，人間が紙と鉛筆でちんたら計算をするよりも，何倍も高速にかつ正確に計算をすることができたので，とても人気になりました．ただ，その当時の計算機は物理的にサイズもデカくて高価なものでした．なので，計算機を導入・設置できるのは大学などのお金と部屋が余っている組織ぐらいしかなかったわけです．&lt;/p&gt;
&lt;p&gt;大学に計算機が設置されると，大学の研究者たちは喜びました．これで面倒な手計算から解放されるわけですからそりゃそうでしょう．みんなでこぞって計算機を使いたくなります．でも「計算機を利用したい研究者の人数」が「設置してある計算機の台数」と比較して圧倒的に多いので，計算機の使用を巡って争奪戦が起こります．だって，当時の計算機は「入力された命令を1つずつ，真面目に実行していく」タイプの計算機なので，他の誰かが計算機に計算をさせている間は，他の研究者はその計算機を使うことができないからです．そんなの不便すぎます．せっかく便利でしかもめちゃんこ高価な計算機が設置してあるのに，しかも使いたい人はたくさんいるのに使わせてあげられないなんて，もう不満タラタラです．そこで研究者たちは考えました．&lt;/p&gt;
&lt;p&gt;「どうやって1台の計算機を複数人で共有して使うことができるだろうか？」&lt;/p&gt;
&lt;p&gt;「1台の計算機で複数のタスクを処理するためにはどんな仕組みが必要なんだろうか？」&lt;/p&gt;
&lt;p&gt;ここからoperating systemとかprocessとかいろんな概念が確立されていくわけです．&lt;/p&gt;
&lt;p&gt;「並行」というのは，英語ではconcurrentに相当し，「1台のマシンで複数のタスクを同時に実行している（ように見える）様」を意味します．concurrentな処理は「限られたリソースを有効活用すること」を目的としていて，現在の計算機では「同時に処理しているように見せるために，複数のタスクを時間的に細切れにして全部のタスクをちょっとずつ進める」ことでconcurrentな処理を実現しています．&lt;/p&gt;
&lt;p&gt;一方で，似たような概念として「並列」というものもあります．英語ではparallelに相当し，「複数台のマシンで1つのタスクを実行している様」を意味します．parallelな処理は「（複数のマシンという）豊富なリソースを利用して1つのタスクを高速に実行すること」を目的としていて，concurrentとは目的が違います．&lt;/p&gt;
&lt;h2 id=&#34;concurrentなプログラム&#34;&gt;concurrentなプログラム&lt;/h2&gt;
&lt;p&gt;ここまで計算機の進化の歴史を本当にざっくり見てみましたが，じゃあconcurrentという概念がプログラムとどう絡んでいくのでしょうか．&lt;/p&gt;
&lt;p&gt;プログラムというのは大体「CPUでの演算」「データのI/O」「ネットワーキング」を部品として構成されています．それぞれの部品には特徴があって，「CPUでの演算」はとても高速に実行できるけれども，「データのI/O」と「ネットーワーキング」は（「CPUでの演算」と比較して）桁違いに，本当に桁違いに時間がかかります．もし計算機が「入力された命令を1つずつ，真面目に実行していく」方式で動いていたとすると，「データのI/O」と「ネットーワーキング」に取り組んでいる間，計算機はうんともすんとも言わずに黙り込んでしまうことになります．これは明らかに無駄です．CPUは何も計算を進めないでただ存在しているだけになるわけです．&lt;/p&gt;
&lt;p&gt;concurrentという概念の背景には「どうやって1台の計算機を複数人で共有して使うことができるだろうか？」という問題があったわけです．この問題意識が一歩進むと，「1台の計算機で複数のタスクを処理するためにはどんな仕組みが必要なんだろうか？」となり，さらに一歩進んで「（複数のタスクで構成される）1つのプログラムを1台のCPUで効率的に処理するためにはどういう仕組みが必要なんだろう？&amp;hellip;そうだ！CPUが暇な時間帯には別の仕事をさせよう！」となるわけです．&lt;/p&gt;
&lt;p&gt;「時間がかかってしまう処理をやっている間に，他にできる計算をCPUにやらせよう」というのがconcurrentなプログラムを書きたい理由です．だってそうした方がやりたいこと早く終わるでしょう．しかもPersonalな計算機が世の中に普及して「計算機はより高速にユーザーの動作に応答しなきゃいけない（うんともすんとも言わない計算機は嫌われてる）」し「ユーザーは大抵の場合音楽聴きながらメールチェックしつつYoutubeで動画も見たいワガママな存在」なので，CPUに暇な時間なんてものはないわけですよ．&lt;/p&gt;
&lt;p&gt;「プログラムはconcurrentに実行されるべき」となるとconcurrentなプログラムを記述して，それを実際にconcurrentに実行する機構が必要になります．&lt;/p&gt;
&lt;p&gt;「実際にconcurrentに実行する機構」についてはOperating Systemが頑張って，プログラムがconcurrentに実行されるように実行環境を提供します．Operating Systemは結構頑張るのですが，やっぱり頑固なハードウェアさんとやりとりしないといけないので，相当大変そうです．提供してくれる実行環境の効率にも限度がありそうです．&lt;/p&gt;
&lt;p&gt;「concurrentなプログラムを記述」するところについては，プログラミング言語の守備範囲なわけですが，いろんな言語がいろんなアプローチを取って，concurrentなプログラムをより簡単に書けるように，プログラム開発者に部品primitiveを提供してくれます．&lt;/p&gt;
&lt;p&gt;でも古参のプログラミング言語たちは，そのデザインの根幹に「プログラムがconcurrentに実行される」とか想定していないわけで，いざやろうとすると不自然なところとかがやっぱりでてきてしまいます．なのでgolangは，言語のデザインの段階でconcurrencyを考慮した言語として誕生しました．そうすれば，concurrentなプログラムがより直感的にわかりやすく書けるようになるわけです．&lt;/p&gt;
&lt;h2 id=&#34;goroutineとchannel&#34;&gt;goroutineとchannel&lt;/h2&gt;
&lt;p&gt;golangはconcurrentなプログラムを書くためのprimitiveとしてgoroutineとchannelを提供しています．というのもgolangでは，concurrentなプログラムを「goroutineたちがメッセージをやりとりしながら進行する計算」としてモデル化しているのです．ここで注意しておきたいのが，concurrentなプログラムを表現する別のモデルも考えられるという点です．モデル化にはバリエーションがあるので「goroutineたちがmessage passing」だけが唯一のモデルというわけではないです．&lt;/p&gt;
&lt;p&gt;goroutineというのは，概念的にはOSの提供するプロセスとかスレッドみたいなもので，実行中の処理を抽象化したものです．直感的にはOSのスレッドと思っていてもいいかもしれません．実態はちょっと違うんですけどね．この「抽象化された処理」同士がmessage passingによって情報を共有することでconcurrentな処理が実現できることになります．&lt;/p&gt;
&lt;p&gt;channelというのは，goroutine間でのコミュニケーションをサポートするためにメッセージキューです．&lt;/p&gt;
&lt;p&gt;golangは言語設計の根底にある思想として&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;を，掲げています．要するに「goroutineたちは共有メモリを設けるのではなくてmessage passingでコミュニケーションをとる」ように設計しようということです．&lt;/p&gt;
&lt;h2 id=&#34;goroutineとchannelの設計と実装を眺める&#34;&gt;goroutineとchannelの設計と実装を眺める&lt;/h2&gt;
&lt;h3 id=&#34;goroutine&#34;&gt;goroutine&lt;/h3&gt;
&lt;p&gt;goroutineは「実行中の処理を抽象化したもの」と書きましたが，これは具体的には「計算に用いるstackと実行状態を保持している構造体」として実装されています．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Stack parameters.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// stack describes the actual stack memory: [stack.lo, stack.hi).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// stackguard0 is the stack pointer compared in the Go stack growth prologue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// stackguard1 is the stack pointer compared in the C stack growth prologue.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// It is stack.lo+StackGuard on g0 and gsignal stacks.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// offset known to runtime/cgo
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// offset known to liblink
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// offset known to liblink
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// ,,,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;「それってOSの提供するプロセスとかスレッドと同じじゃないの？」&lt;/p&gt;
&lt;p&gt;それは確かにそうなんですが，goroutineはOSの提供するプロセスとかスレッドと同レベルの存在ではなくて，goroutineは，OSの提供するスレッドに対してM:Nでマッピングされる「golangのruntimeが提供する，ユーザー空間で定義されたスレッド」として存在しています．golangのruntimeはgoroutineを管理していて「いつ，どのgoroutineを実行するか」を決定するschedulerとしての役割も担っています．つまりgolangのruntimeはユーザー空間で動く「ミニOS」のようなものな訳です．とは言いつつも，実際に実行されるためにはOSの提供するスレッドとして実行されなければいけないわけですから，goroutineはスレッドにマッピングされることになります．golangのschedulerはgoroutineとOSのスレッドを，M:Nでマッピングします．つまり複数のgoroutineが複数のOSスレッドとして実行されるわけです．1つのgoroutineが複数のOSスレッドとして実行されるし，1つのOSスレッドでは複数のgoroutineを実行することになります．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;goroutine.jpeg&#34; data-caption=&#34;OS Process v.s. OS Thread v.s. Goroutine&#34;&gt;
&lt;img src=&#34;goroutine.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    OS Process v.s. OS Thread v.s. Goroutine
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;となると，重要なのは「golangのruntimeがどのようなルールでgoroutineの実行計画を立てるのか」です．&lt;/p&gt;
&lt;h4 id=&#34;golangのruntimeによるgoroutineのスケジューリング&#34;&gt;golangのruntimeによるgoroutineのスケジューリング&lt;/h4&gt;
&lt;p&gt;登場するのは&lt;code&gt;M&lt;/code&gt;，&lt;code&gt;G&lt;/code&gt;，&lt;code&gt;P&lt;/code&gt;の三人．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;machineの&lt;code&gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OSスレッドに相当する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;goroutineの&lt;code&gt;G&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;processorの&lt;code&gt;P&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;スケジューリングのコンテキスト（次どの&lt;code&gt;G&lt;/code&gt;を実行するのか）を管理している&lt;/li&gt;
&lt;li&gt;具体的に言えば，runnableなgoroutineのキューを管理しているのが&lt;code&gt;P&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;gmp.jpeg&#34; data-caption=&#34;G，M，P&#34;&gt;
&lt;img src=&#34;gmp.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;code&gt;G&lt;/code&gt;，&lt;code&gt;M&lt;/code&gt;，&lt;code&gt;P&lt;/code&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;まず，環境変数&lt;code&gt;GOMAXPROCS&lt;/code&gt;の数だけ&lt;code&gt;M&lt;/code&gt;，&lt;code&gt;P&lt;/code&gt;がセットされます．以下では，&lt;code&gt;GOMAXPROCS = 2&lt;/code&gt;とします．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;gmp2.jpeg&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;p&gt;runnableな&lt;code&gt;G&lt;/code&gt;が&lt;code&gt;P&lt;/code&gt;にenqueueされ，&lt;code&gt;M&lt;/code&gt;は&lt;code&gt;P&lt;/code&gt;からrunnableな&lt;code&gt;G&lt;/code&gt;を1個取り出して実行します．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;assignment.gif&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;p&gt;もし，queueにrunnableな&lt;code&gt;G&lt;/code&gt;が0個になってしまったら，他のqueueから半分盗みます．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;work-stealing.gif&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;p&gt;「自分のqueueが空になったら他の&lt;code&gt;M&lt;/code&gt;の持つ&lt;code&gt;P&lt;/code&gt;から半分奪う」というスケジューリングアルゴリズムはwork stealingアルゴリズムと呼ばれています．golangのruntimeのスケジューラーはこのwork stealingアルゴリズムに従ってgoroutineのスケジューリングを行います．このアルゴリズムはCPUをたくさん使うような処理にスケジューリングには効率的である一方でI/O待ちを伴う処理（&lt;code&gt;syscall&lt;/code&gt;の実行やネットワーク処理）とは相性が悪いです．そのため，いくつかの工夫がされています．&lt;/p&gt;
&lt;p&gt;まず，golangのruntimeに存在しているものを整理します．上で登場した&lt;code&gt;M&lt;/code&gt;，&lt;code&gt;G&lt;/code&gt;，&lt;code&gt;P&lt;/code&gt;の他にruntimeには&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グローバルキュー
&lt;ul&gt;
&lt;li&gt;各&lt;code&gt;M&lt;/code&gt;-&lt;code&gt;P&lt;/code&gt;に対応するqueueとは別に存在するキュー&lt;/li&gt;
&lt;li&gt;通常&lt;code&gt;G&lt;/code&gt;がrunnableになると&lt;code&gt;P&lt;/code&gt;の持つキューに入るが，いくつかの状況ではこちらに入ります&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/blob/15ea61c50ca25295497e78354f7f8397e73e3590/src/runtime/proc.go#L4427:6&#34;&gt;&lt;code&gt;sysmon&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt;の数だけの&lt;code&gt;M&lt;/code&gt;と&lt;code&gt;P&lt;/code&gt;の他に，&lt;code&gt;sysmon&lt;/code&gt;という関数を実行し続ける特別な&lt;code&gt;M&lt;/code&gt;が存在しています&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sysmon&lt;/code&gt;の実態は無限ループで，そのループの中で&lt;code&gt;netpoll&lt;/code&gt;のチェックなどを行っています&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; Idle List
&lt;ul&gt;
&lt;li&gt;暇な&lt;code&gt;P&lt;/code&gt;のリスト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; Idle List
&lt;ul&gt;
&lt;li&gt;暇な&lt;code&gt;M&lt;/code&gt;のリスト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;syscallを実行した場合&#34;&gt;&lt;code&gt;syscall&lt;/code&gt;を実行した場合&lt;/h5&gt;
&lt;p&gt;時間のかかる&lt;code&gt;syscall&lt;/code&gt;を実行した場合，&lt;code&gt;sysmon&lt;/code&gt;がそれを検知し，&lt;code&gt;syscall&lt;/code&gt;を発行した&lt;code&gt;G&lt;/code&gt;を実行している&lt;code&gt;M&lt;/code&gt;から&lt;code&gt;P&lt;/code&gt;を切り離し，別の&lt;code&gt;M&lt;/code&gt;にその&lt;code&gt;P&lt;/code&gt;をアタッチして処理を継続させます．
&lt;code&gt;syscall&lt;/code&gt;終了後は，まず&lt;code&gt;P&lt;/code&gt; Idle Listを確認して暇そうにしている&lt;code&gt;P&lt;/code&gt;を自身（&lt;code&gt;M&lt;/code&gt;）にアタッチして処理を進めます．&lt;code&gt;P&lt;/code&gt; Idle Listがからの場合は&lt;code&gt;syscall&lt;/code&gt;を発行した&lt;code&gt;G&lt;/code&gt;をグローバルキューに突っ込み（この&lt;code&gt;G&lt;/code&gt;はいずれGCされる），自身（&lt;code&gt;M&lt;/code&gt;）は&lt;code&gt;M&lt;/code&gt; Idle Listに入ります．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;syscall.gif&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;h5 id=&#34;ネットワーク処理をした場合&#34;&gt;ネットワーク処理をした場合&lt;/h5&gt;
&lt;p&gt;ネットワーク処理の発生時には&lt;code&gt;netpoller&lt;/code&gt;という仕組みに，ネットワーク処理を実行しているgoroutineが登録され，&lt;code&gt;sysmon&lt;/code&gt;が&lt;code&gt;netpoller&lt;/code&gt;にポーリングします．ネットワーク処理が終了したら&lt;code&gt;netpoller&lt;/code&gt;からグローバルキューに追加されて，&lt;code&gt;M&lt;/code&gt;で続きを実行されるのを待つことになります．&lt;/p&gt;
&lt;p&gt;golangの標準ライブラリが提供するネットワーキングのAPIはブロッキングな処理となっていますが，goroutineはOSスレッドに対してM:Nでマッピングされるため，&lt;code&gt;netpoller&lt;/code&gt;をによってノンブロッキングな処理として実行されることになります．&lt;/p&gt;













&lt;figure&gt;

&lt;img src=&#34;network-read.gif&#34; alt=&#34;&#34; &gt;



&lt;/figure&gt;

&lt;h3 id=&#34;channel&#34;&gt;channel&lt;/h3&gt;
&lt;p&gt;channelはgoroutine間でのメッセージングをサポートするキューです．channelにはいくつかの面白い特徴があります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;channelはgoroutine-safe
&lt;ul&gt;
&lt;li&gt;複数のgoroutineがあるchannelに同時にアクセスしても問題が発生しないようにロック機構が組み込まれています&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;channelはgoroutine間でFIFOなデータの受け渡しが可能です&lt;/li&gt;
&lt;li&gt;channelはその状況次第ではgoroutineをブロックしたりアンブロックしたりできます
&lt;ul&gt;
&lt;li&gt;バッファ0のchannelはgoroutineを同期させることができます．つまりあるgorotuineがchannelに書き込むと，相手のgoroutineがそれを読み込むまで書き込んだgoroutineの実行はブロックされるし，channelから読み込みたいgoroutineの実行は，相手のgoroutineが何かを書き込むまでブロックされます．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;channelは&lt;a href=&#34;https://github.com/golang/go/blob/1f3339f441e2053f8efd7ead417761ea319fe790/src/runtime/chan.go#L32:6&#34;&gt;&lt;code&gt;hchan&lt;/code&gt;&lt;/a&gt;という名前の構造体で実装されています．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// total data in the queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// size of the circular queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// points to an array of dataqsiz elements
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;elemsize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// element type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// send index
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// receive index
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// list of recv waiters
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// list of send waiters
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// lock protects all fields in hchan, as well as several
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// fields in sudogs blocked on this channel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Do not change another G&amp;#39;s status while holding this lock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (in particular, do not ready a G), as this can deadlock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// with stack shrinking.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まず，構造体&lt;code&gt;hchan&lt;/code&gt;のメンバーとして&lt;code&gt;lock mutex&lt;/code&gt;が見えるので，channelはgoroutine-safeです．複数のgoroutineが同時にアクセスしても問題が発生しないようになっています．goroutineがchannelに対して読み書きをしたくなったらロックを取ってから行うようになっているということです．&lt;/p&gt;
&lt;p&gt;上に示した通り，channelの実体は「circular queue（へのポインタ）」です．組み込みの&lt;code&gt;make()&lt;/code&gt;でchannelを作ると，実体はheap領域に確保され，それへのポインタが返されます．&lt;code&gt;buf&lt;/code&gt;がバッファ先頭へのポインタで，&lt;code&gt;sendx&lt;/code&gt;・&lt;code&gt;recvx&lt;/code&gt;がそれぞれキューの先頭とお尻の番号になっています．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;hchan.jpeg&#34; data-caption=&#34;構造体hchan&#34;&gt;
&lt;img src=&#34;hchan.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    構造体&lt;code&gt;hchan&lt;/code&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;なので，channelにメッセージが送り込まれたら，&lt;code&gt;buf[0]&lt;/code&gt;にメッセージが入り，&lt;code&gt;sendx&lt;/code&gt;がインクリメントされて1になります．続けてメッセージが2個送り込まれると&lt;code&gt;buf[1]&lt;/code&gt;，&lt;code&gt;buf[2]&lt;/code&gt;にメッセージが書き込まれ，&lt;code&gt;sendx&lt;/code&gt;が0に戻ります．ここでメッセージが1個読まれると&lt;code&gt;buf[0]&lt;/code&gt;の内容がdequeueて&lt;code&gt;recvx&lt;/code&gt;が1になります．特に難しいことはなく，一般のcircular queueの動作ですね．&lt;/p&gt;
&lt;p&gt;channel間のメッセージングはとても直感的に実現することができます．channelにメッセージを書き込む時は，まず&lt;code&gt;hchan&lt;/code&gt;のロックを取って，次に&lt;code&gt;buf&lt;/code&gt;のお尻に送りたいデータをメモリコピーして，アンロック．channelからメッセージを読み込む時は，同様にまず&lt;code&gt;hchan&lt;/code&gt;のロックを取って，&lt;code&gt;buf&lt;/code&gt;の先頭をメモリコピーして，アンロック．とてもシンプルな動作です．&lt;/p&gt;
&lt;p&gt;実はこの挙動こそが，golangの&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;を実装している箇所と言えます．&lt;/p&gt;
&lt;p&gt;goroutine間で共有しているのは構造体&lt;code&gt;hchan&lt;/code&gt;だけです．しかも&lt;code&gt;hchan&lt;/code&gt;はロックによって排他処理が施されるため，goroutine-safeです．&lt;code&gt;hchan&lt;/code&gt;の&lt;code&gt;buf&lt;/code&gt;に値を書き込む（つまりchannelに値を送る）・値を読み込む（つまりchannelから値を取り出す）動作は全て&lt;strong&gt;メモリコピー&lt;/strong&gt;で行われます．goroutine間でやり取りする情報は（メモリを共有するのではなくて）メモリコピーして渡しましょうというのが，上の標語の実装と言えます．&lt;/p&gt;
&lt;p&gt;channelはgoroutineの挙動をブロックしたりアンブロックしたりすることができます．バッファに空きが無いchannel（バッファ0のchannelや容量一杯データが書き込まれているchannel）に対してデータを送り込もうとすると，&lt;a href=&#34;https://github.com/golang/go/blob/1f3339f441e2053f8efd7ead417761ea319fe790/src/runtime/chan.go#L162&#34;&gt;&lt;code&gt;gopark()&lt;/code&gt;&lt;/a&gt;が実行されます．この関数は，golangのruntimeのスケジューラを呼び出して，バッファに空きが無いchannelにデータを送り込もうとしたgoroutineの状態を&lt;code&gt;wait&lt;/code&gt;にして別のgoroutineの実行を始めます．channelに対してデータを送り込むロジックの中に，goroutineをブロックするロジックが組み込まれているということになります．では，どうやってブロックされたgoroutineの実行を再開するのでしょうか．&lt;/p&gt;
&lt;p&gt;ここで興味深いのが，&lt;code&gt;gopark()&lt;/code&gt;の実行の直前に「どのgoroutineがどんな値を送り込もうとしていたのかをchannelの中に記録しておく」というところです．構造体&lt;code&gt;hchan&lt;/code&gt;には&lt;code&gt;sendq&lt;/code&gt;，&lt;code&gt;recvq&lt;/code&gt;というメンバがあり，そこに「このchannelにどのgoroutineがどんなデータを送り込もうとしているのか，取り出すのはどのgoroutineでどこに読み込もうとしているのか」という情報を保持しています．「このchannelにどのgoroutineがどんなデータを送り込もうとしているのか，取り出すのはどのgoroutineでどこに読み込もうとしているのか」を保持する構造体は&lt;a href=&#34;https://github.com/golang/go/blob/1f3339f441e2053f8efd7ead417761ea319fe790/src/runtime/runtime2.go#L342:6&#34;&gt;&lt;code&gt;sudog&lt;/code&gt;&lt;/a&gt;という名前になっています．なぜこの名前なのかは&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-codereviews/rC9BLPFvkW8&#34;&gt;ここのメーリスの一連の流れ&lt;/a&gt;を読むとわかるかもしれませんよ．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sudog represents a g in a wait list, such as for sending/receiving
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// on a channel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sudog is necessary because the g ↔ synchronization object relation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// is many-to-many. A g can be on many wait lists, so there may be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// many sudogs for one g; and many gs may be waiting on the same
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// synchronization object, so there may be many sudogs for one object.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sudogs are allocated from a special pool. Use acquireSudog and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// releaseSudog to allocate and free them.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// The following fields are protected by the hchan.lock of the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// channel this sudog is blocking on. shrinkstack depends on
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// this for sudogs involved in channel ops.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// isSelect indicates g is participating in a select, so
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// g.selectDone must be CAS&amp;#39;d to win the wake-up race.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// data element (may point to stack)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// The following fields are never accessed concurrently.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// For channels, waitlink is only accessed by g.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// For semaphores, all fields (including the ones above)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// are only accessed when holding a semaRoot lock.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;acquiretime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ticket&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot binary tree
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// g.waiting list or semaRoot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;waittail&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// channel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;gopark()&lt;/code&gt;によって受け取り手のgoroutineの実行が開始されると，&lt;strong&gt;受け取り手のgoroutineが，channelの&lt;code&gt;sendq&lt;/code&gt;の中身を確認して，実行をブロックされてしまった送り手のgoroutineが最後にchannelに送り込もうとした値を（送り手側に代わって）受け取り手側がchannelの&lt;code&gt;buf&lt;/code&gt;にコピーします&lt;/strong&gt;．これはある種の最適化です．真面目に，送り手側の実行が再開されてからchannelにデータを送り込むことにするとchannelに対するロックを取る必要があり，排他処理をする回数が1回増えてしまいます．「誰がどんな値を送ろうとしていたのか」が自明であるならば，先にやってしまえという考えのようです．&lt;/p&gt;
&lt;p&gt;channelから値を1個受け取ると，&lt;code&gt;goready()&lt;/code&gt;が実行されて，スケジューラーが起動し，バッファに空きが無いchannelにメッセージを送ろうとしたgoroutineの状態をrunnableにセットして実行待ちのキューに入ります．&lt;/p&gt;
&lt;p&gt;goroutineが空のchannelに対して読み込みを行おうとすると，そのgoroutineの動作はブロックされます．この挙動はchannelからデータを受け取るロジックである&lt;code&gt;recv()&lt;/code&gt;関数内に記述されています．さらに面白いのが，「どのgoroutineが，どこに値を受け取ろうとしていたのか」を&lt;code&gt;recvq&lt;/code&gt;に保存していることです．これによって，channelにデータを送り込むgoroutineが，受け取り先のgoroutineのスタック領域を直接いじってデータを送り切ってしまうことが可能となります．goroutineの実体は（雑に言えば）stackを持つ構造体で，OSプロセスのスタック領域に置かれています．つまり別のgoroutineの持つstackを直接いじることが，channelでのデータのやり取りの限られた状況においてのみ許されているというのが興味深いです．&lt;/p&gt;
&lt;p&gt;golangのchannel周りの実装を見て，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「排他処理を含む簡潔な実装の方が，排他処理なしの複雑な実装よりマシ．いくらパフォーマンスが良くても，それが複雑なコードでも良いことの理由にはならない」&lt;/li&gt;
&lt;li&gt;「パフォーマンスの観点から，goroutineというユーザーレベルのスレッドを実装し（OSスレッドをブロックさせない），異なるgoroutineを跨いだメモリコピーを許す（その分実装がやや複雑になるがそれは許容する）」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という相反する考えが感じられます．つまり&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;simplicityとperformaceには明確なtrade-offが存在する&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということですね．&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;今回初めてruntimeをじっくり読みました．今まで概念として理解していたものの実体をコードとして掴めたので，とても楽しかったです．今回はgoroutineとchannel周りが中心だったので，次はスケジューラー周辺をもっとつぶさに見ていきたいと思います．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang channels tutorial</title>
      <link>/ja/post/golang-channels-tutorial/</link>
      <pubDate>Thu, 31 Oct 2019 22:32:28 +0900</pubDate>
      <guid>/ja/post/golang-channels-tutorial/</guid>
      <description>&lt;h2 id=&#34;golangとconcurrentなプログラミング&#34;&gt;golangとconcurrentなプログラミング&lt;/h2&gt;

&lt;p&gt;「concurrentな処理をどのように実現するか」はざっくり分けて2アプローチがある．&lt;/p&gt;

&lt;p&gt;1つは「shared-memory communication」．つまり処理を実行しているworker同士は，メモリを共有して，その共有しているメモリを用いてコミュニケーションを取るというもの．この場合，データ競合が発生しないようにロックを取ったりなどの排他処理を伴うことになって，大抵の場合実装が難しくなるとされている．&lt;/p&gt;

&lt;p&gt;もう1つは「message-passing communication」．つまり処理を実行しているworker同士は，メッセージをやり取りし合うことでコミュニケーションを取るというもの．&lt;/p&gt;

&lt;p&gt;それぞれのアプローチでいろんな実装が世の中にはすでに存在していて，例えばCでconcurrentなプログラムを書こうとするとshared-memory communicationな形で書くことになる．一方でErlangは言語としてconcurrentなプログラミングをサポートしていて，Actorモデルを実装してる．&lt;/p&gt;

&lt;p&gt;golangは，設計の時点でconcurrentなプログラミングは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という思想で実装することとしている．golangのconcurrentなプログラミングの実装は「&lt;a href=&#34;http://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;Communicating Sequential Processes&lt;/a&gt;」と「&lt;a href=&#34;http://en.wikipedia.org/wiki/%CE%A0-calculus&#34;&gt;$\pi$-caluculus&lt;/a&gt;」を参考にしている．&lt;/p&gt;

&lt;p&gt;golangは「concurrentなプログラミングを簡潔にわかりやすく記述すること」を言語の設計レベルからサポートしているので，concurrentな処理がとても書きやすくなっている．じゃあgolangではどうやってconcurrentなプログラミングをサポートしているのかというと，concurrentなプログラミングのプリミティブとしてgoroutine，channelを提供している．&lt;/p&gt;

&lt;p&gt;「golangはconcurrentな処理が書きやすいんだよね」という話をすると混乱しがちなのが， &lt;strong&gt;「golangはconcurrentな処理を書くための道具を提供してくれるが，その実行がparallelであるかどうかはハードウェアに依存する」&lt;/strong&gt; という点．concurrentな処理は，parallelに実行することができるかもしれない（し大抵parallelに実行できるならそうしたほうがいい）が，それはハードウェアがparallelな実行をサポートしているか（例えばCPUが複数コア搭載しているか）によって決まってくる話であって，&lt;strong&gt;「プログラムがconcurrentであること」と「プログラムの実行がparallelであること」は関連はしているけれども，全く別の話．&lt;/strong&gt;Rob Pike先生も&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. Not the same, but related. &lt;strong&gt;Concurrency is about structure, parallelism is about execution.&lt;/strong&gt; Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;って仰っている．&lt;/p&gt;

&lt;h2 id=&#34;hello-goroutine&#34;&gt;Hello, goroutine!&lt;/h2&gt;

&lt;iframe src=&#34;https://play.golang.org/p/gHKEj4ai20c&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;「golangではconcurrentなプログラムを書きやすい」ということだったので，実際にconcurrentなプログラムを書いてみると上の例みたいになる．concurrentに処理を実行するworkerは，golangの世界では&lt;code&gt;gorutine&lt;/code&gt;と呼ばれていて，&lt;code&gt;go&lt;/code&gt;という魔法の言葉に続けてworkerで実行してほしい関数を呼び出せば，それでconcurrentな処理を書き下したことになる．なんて簡単なんだ...！&lt;/p&gt;

&lt;p&gt;上の例を実行すると，&lt;code&gt;Hello! I&#39;m main&lt;/code&gt;って印字されて，もしかしたら&lt;code&gt;Hi! I&#39;m goroutine!&lt;/code&gt;も一緒に印字される &lt;strong&gt;かもしれない&lt;/strong&gt;．「かもしれない」っていうのは，goroutineは「あるgoroutineの親は自分の子供の処理が終わるのを待たない」ことになっている．この場合だと&lt;code&gt;main&lt;/code&gt;が親で&lt;code&gt;go fmt.Println(&amp;quot;Hi! I&#39;m goroutine!&amp;quot;)&lt;/code&gt;が子供の関係になっていて，&lt;code&gt;main&lt;/code&gt;の&lt;code&gt;fmt.Println(&amp;quot;Hello! I&#39;m main&amp;quot;)&lt;/code&gt;の終了したら，その時点で子供の実行も終了させられてしまう．もし，子供のgoroutineが自己紹介し終わる前に親が自己紹介しきっちゃえば子供の自己紹介は印字されないし，親の自己紹介が終わる前に子供が自己紹介しきっちゃえば，親子両方の自己紹介が聞けることになる．&lt;/p&gt;

&lt;p&gt;「なるほど．でも親が先に終わっちゃうと子供も強制終了って，それどうにかならないの？」って思った方は賢くて，どうにかするためにgoroutine間でおしゃべりできるchannelというデータ構造が実装してある．&lt;/p&gt;

&lt;h2 id=&#34;nice-to-meet-you-channel&#34;&gt;Nice to meet you, channel!&lt;/h2&gt;

&lt;p&gt;channelはgoroutineたちが同期しながらconcurrentな処理を実行していくためのmessage-passingのメカニズムを提供してくれる．channelは「そのchannelを通じてやり取りするデータの型・バッファサイズ・メッセージのやり取りの方向」で定義されて，組み込み関数の&lt;code&gt;make()&lt;/code&gt;で簡単に作ることができる．&lt;/p&gt;

&lt;p&gt;golangでは「channelはfirst-class value」として扱われる．つまりchannelは，他の値（例えばなんらかの構造体とか&lt;code&gt;int&lt;/code&gt;型の変数とか関数とか）と同じレベルで扱われる．だから関数がchannelを返すなんてこともできるし，関数の引数にchannelを与えることもできるし，channelのchannelも定義できる．&lt;/p&gt;

&lt;p&gt;channelの入出力の方向は&lt;code&gt;&amp;lt;-&lt;/code&gt;という演算子で表現することになっている．&lt;code&gt;&amp;lt;- c&lt;/code&gt;って書けばchannel &lt;code&gt;c&lt;/code&gt;からデータを読み込むことになるし，&lt;code&gt;c &amp;lt;- 1&lt;/code&gt;って書けばchannel &lt;code&gt;c&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を書き込んだことになる．&lt;/p&gt;

&lt;p&gt;ということで，channelを使った簡単ばプログラムを書いてみるとこんな感じになる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/id0QnvLdbFn&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;channel &lt;code&gt;done&lt;/code&gt; を使って「僕は自己紹介終わったよママ」って子供のgoroutineが親&lt;code&gt;main&lt;/code&gt;に連絡することで，実行が同期されて両方の自己紹介が聞けるようになった．&lt;/p&gt;

&lt;p&gt;channel &lt;code&gt;done&lt;/code&gt;は「&lt;code&gt;bool&lt;/code&gt;値を通す，バッファが0の，読み書きができるchannel」として定義されている．golangでは「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」ことになっている．なので，この例だと，確実に子供goroutineの自己紹介を聞くことができることになる．「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」という挙動から&lt;strong&gt;バッファが0のchannelは「synchronous」と言える&lt;/strong&gt;．&lt;/p&gt;

&lt;p&gt;下の例を実行すると，channel &lt;code&gt;message&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を送り終わってから，&lt;code&gt;main&lt;/code&gt;が1秒寝てしまうので，子供はchannel &lt;code&gt;message&lt;/code&gt;に続く&lt;code&gt;2&lt;/code&gt;，&lt;code&gt;3&lt;/code&gt;を送れなくて，止められてしまう．この挙動はsynchronousということになる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/3z4aodIMk7v&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;一方で，バッファのあるchannelに対する読み書きは「バッファが空でないなら読み込みはブロックされない」「バッファが一杯でないなら書き込みはブロックされない」という挙動になっている．なので，&lt;strong&gt;バッファのあるchannelは「asynchronous」と言える&lt;/strong&gt;．&lt;/p&gt;

&lt;p&gt;下の例を実行すると，channel &lt;code&gt;message&lt;/code&gt;はバッファを持っているので子供は&lt;code&gt;1&lt;/code&gt;，&lt;code&gt;2&lt;/code&gt;，&lt;code&gt;3&lt;/code&gt;，&lt;code&gt;4&lt;/code&gt;と（&lt;code&gt;main&lt;/code&gt;が眠りから覚める前に）立て続けに送ることができる．この挙動はまさしくasynchronousだ．&lt;/p&gt;

&lt;h2 id=&#34;oh-poor-deadlock&#34;&gt;Oh, poor deadlock...&lt;/h2&gt;

&lt;p&gt;「goroutineもchannelもわかったので」ということで下みたいなプログラムを書くと&lt;strong&gt;deadlock&lt;/strong&gt;と言われてgolangのruntimeから叱られる．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/TbJsGMyAh8r&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;これはつまりどういうことかというと，golangのruntimeが「お前のプログラム実行したけど7行目でバッファのないchannelに&lt;code&gt;42&lt;/code&gt;って送ってる（&lt;code&gt;c &amp;lt;- 42&lt;/code&gt;）けど，それしたら受信者がいないし，受信者がいないと送信者も実行を進められないので，どうすることもできなくなっちゃったぞ」と怒っているのだ．&lt;/p&gt;

&lt;p&gt;「バッファのないchannelはgoroutine間の挙動をsynchronousにするもの」なので「受信者となるgoroutineのいない，バッファ0のchannelに値を送るとdeadlockする」のだ．&lt;/p&gt;

&lt;p&gt;今回の場合だと，受信者が存在しないことが問題なので，受信者となるgoroutineを作ればうまくいく．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/czvQy77d3jU&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;lets-range-channels-and-close-them&#34;&gt;Let&#39;s &lt;code&gt;range&lt;/code&gt; channels and &lt;code&gt;close&lt;/code&gt; them.&lt;/h2&gt;

&lt;p&gt;channelは&lt;code&gt;range&lt;/code&gt;構文を使って1つずつ値を取り出すということも記述できる．でも，&lt;code&gt;range&lt;/code&gt;を使ってchannelから値を次々取り出すときは&lt;strong&gt;channelを明示的に&lt;code&gt;close()&lt;/code&gt;しないといけない&lt;/strong&gt;．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/tTmMX8Ut5gg&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;チャンネルは組み込み関数の&lt;code&gt;close()&lt;/code&gt;で「閉じる」ことができて，閉じられたchannelに対して書き込みを行おうとするとgolangのruntimeは&lt;code&gt;panic&lt;/code&gt;して，閉じられたchannelに対して読み込みを行おうとするとそのchannelの扱う型のゼロ値が得られることになっている．&lt;/p&gt;

&lt;p&gt;「閉じられたchannelに対する読み込み」の特徴は「goroutineに処理の終了を通知させる機構」として応用することができる．大抵，こういう処理終了通知を行う場合は空の構造体&lt;code&gt;struct{}&lt;/code&gt;のchannelを使う．なんてったって空の構造体は0byteだからね．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/aAV4A-7UdZj&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;あと，閉じられたchannelに対する読み込みはブロックされないので，そのまま処理は進む．&lt;/p&gt;

&lt;h2 id=&#34;multiple-channels-and-select&#34;&gt;Multiple channels and &lt;code&gt;select&lt;/code&gt;.&lt;/h2&gt;

&lt;p&gt;goroutineとchannelを使って実際になんらかの意味のあるプログラムを書こうとすると，たくさんのgoroutineとたくさんのchannelを扱うことになるのが普通である．大抵の場合「複数のchannelを同時に待ち受けたい」状況に出くわす．golangでは複数のchannelを同時に待ち受ける&lt;code&gt;select&lt;/code&gt;構文を用意している．&lt;/p&gt;

&lt;iframe src=&#34;https://play.golang.org/p/_CaWUfaJj2E&#34; width=600 height=300 frameborder=0&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;code&gt;select { case ...: ...}&lt;/code&gt;という構文で，複数のchannelを同時に待ち受け，値が書き込まれたchannelだけに対応するという，イベント駆動みたいな処理も簡単に書くことができるようになっている．&lt;/p&gt;

&lt;h2 id=&#34;channelお前最高かよ&#34;&gt;channel，お前最高かよ！&lt;/h2&gt;

&lt;p&gt;channelはマジで便利！でも使いこなすにはchannelの挙動をよく理解していないといけない．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Concurrent v.s. Parallel</title>
      <link>/ja/post/concurrent-vs-parallel/</link>
      <pubDate>Thu, 31 Oct 2019 16:26:54 +0900</pubDate>
      <guid>/ja/post/concurrent-vs-parallel/</guid>
      <description>&lt;h2 id=&#34;日本語にすると&#34;&gt;日本語にすると&amp;hellip;&lt;/h2&gt;
&lt;p&gt;調べてみると，**「Concurrentは並行」「Parallelは並列」**と訳されるのが一般的らしいですが，日本語にしたところで違いが判然としないので，自分なりの解釈を書いてはっきりさせておきます．&lt;/p&gt;
&lt;h2 id=&#34;っとその前に広辞苑によれば&#34;&gt;っと，その前に広辞苑によれば&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;【並行】並びゆくこと．また，並び行なわれること．「両案を並行して審議する」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;【並列】並び連なること．直列の対義語&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ダメだった．&lt;/p&gt;
&lt;h2 id=&#34;じゃあ英英辞典oxford-dictionaryで引くと&#34;&gt;じゃあ，英英辞典（Oxford Dictionary）で引くと&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;concurrent&lt;/p&gt;
&lt;p&gt;Existing, happening, or done at the same time.
‘there are three concurrent art fairs around the city’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;parallel&lt;/p&gt;
&lt;p&gt;[Computing] Involving the simultaneous performance of operations.
‘highly parallel multiprocessor systems’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これでもダメだった．&lt;/p&gt;
&lt;h2 id=&#34;僕の理解&#34;&gt;僕の理解&lt;/h2&gt;
&lt;h3 id=&#34;concurrent&#34;&gt;Concurrent&lt;/h3&gt;
&lt;p&gt;並行とは「複数のタスクが，論理的に，同時に処理されているように見えること」&lt;/p&gt;
&lt;p&gt;具体的には，CPUが1コアの時代に，「一つのパソコンでブラウジングしながらメールが読める理由」を説明するのが「CPUがタスクをConcurrentに処理しているから」で，これが僕の「並行」の理解．&lt;/p&gt;
&lt;p&gt;細切れにたくさんの仕事をちょっとずつ進めて，全体として複数のタスクが同時に処理されているように見えるってだけで，実際に複数のタスクが同時に処理されているわけではない．&lt;/p&gt;
&lt;p&gt;**「一人でいろんな仕事を同時に進めている様」**が並行．&lt;/p&gt;
&lt;h3 id=&#34;parallel&#34;&gt;Parallel&lt;/h3&gt;
&lt;p&gt;並列とは「複数のタスクが，物理的に，同時に処理されていること」&lt;/p&gt;
&lt;p&gt;具体的にはマルチコアのプロセッサが，搭載している複数のプロセッサをちゃんと使い切って演算をしている様は，並列という言葉で形容できる．&lt;/p&gt;
&lt;p&gt;**「複数人が同時に，それぞれの仕事を進めている様」**が並列．&lt;/p&gt;
&lt;p&gt;ちなみに，「並列であれば常に並行である」という主張もあるらしい．「複数人が同時に，それぞれの仕事を進めている様」は側から見ると「いろんな仕事を同時に進めている」ように見えるから，確かにそうかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;rob-pike先生によれば&#34;&gt;Rob Pike先生によれば&amp;hellip;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrency is about dealing with lots of things at once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Parallelism is about doing lots of things at once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Not the same, but related.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrency is about structure, parallelism is about execution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;なるほど&lt;/p&gt;
&lt;h3 id=&#34;結局なんだってばよ&#34;&gt;結局なんだってばよ&amp;hellip;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Concurrency is a way of structuring your program to make it easy to understand and scalable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and Parallelism is simply the execution of multiple goroutine in parallel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ref&#34;&gt;ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2012/waza.slide#1&#34;&gt;Concurrency is not Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Parallelizing Sequential Graph Computations</title>
      <link>/ja/post/parallelizing-sequential-graph-computations/</link>
      <pubDate>Tue, 29 Oct 2019 23:54:29 +0900</pubDate>
      <guid>/ja/post/parallelizing-sequential-graph-computations/</guid>
      <description>&lt;h2 id=&#34;0-これは何&#34;&gt;0. これは何&lt;/h2&gt;

&lt;p&gt;僕が最近研究している「並行グラフ処理系」に関連して，僕自身のテーマにおいて非常に参考になった論文であるParallelizing Sequential Graph Computations&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;について，その詳細をまとめました．なお，以下の資料の内容は大学のカリキュラムの一環として行われた発表会で用いたハンドアウトです．&lt;/p&gt;

&lt;h2 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h2&gt;

&lt;p&gt;一台のメモリに載り切らないほど巨大なグラフに対する計算需要の高まりを受け，グラフ計算を並列実行するPregel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;やGraphLab&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;をはじめとする処理系が考案された．これらは「各頂点を一台の計算機と見なし，頂点ごとに処理を実行し，頂点間でコミュニケーションをとりながら状態を更新し，その収束を以って全体の解とする」ようなThink Like A Vertex(TLAV)という計算モデルを実装している．&lt;/p&gt;

&lt;p&gt;しかし，既存のグラフアルゴリズムは並列実行されることを前提としていないため，これらの処理系を利用するためには実行したいアルゴリズムをTLAVに書き下す必要があるが，これは容易な作業ではない．グラフアルゴリズムはTLAVの登場以前から研究されていて，問題を解決する最適なアルゴリズムが既に存在しているにも関わらず，TLAVな処理系ではアルゴリズムの変換が伴うため，敷居が十分に下がったとは言えない．&lt;/p&gt;

&lt;p&gt;そこで，既存のグラフアルゴリズムのロジックをそのまま用いながらも，並列実行することができるような処理系 $GRAPE$ を提案する． $GRAPE$ では，計算モデルとして，既存の分散グラフ処理系が採用するTLAVではなく，Partial evaluation &amp;amp; Incremental Computationモデル(以下$GRAPE$モデル)を採用し，既存のアルゴリズムのロジックを変更することなく並列化させる．同時に，$GRAPE$モデルはTLAVと比較してコミュニケーションコストを少なく抑えることができることからより効率的な計算の実行が可能となる．&lt;/p&gt;

&lt;h2 id=&#34;2-関連研究&#34;&gt;2. 関連研究&lt;/h2&gt;

&lt;p&gt;分散グラフ処理の計算モデルの変遷と$GRAPE$モデルの位置付けを述べる．分散グラフ処理を実現する計算モデルとして以下の二つがよく用いられる．&lt;/p&gt;

&lt;h3 id=&#34;think-like-a-vertex&#34;&gt;Think Like A Vertex&lt;/h3&gt;

&lt;p&gt;最初に提案された計算モデル．PregelやGiraph&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，GraphLab&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;に実装されている．頂点ごとに処理を実行し，頂点間でコミュニケーションをとりながら状態を更新．全頂点の状態の収束を以って全体の解とする．&lt;/p&gt;

&lt;h3 id=&#34;think-like-a-graph-or-block-centric&#34;&gt;Think Like A Graph (or Block Centric)&lt;/h3&gt;

&lt;p&gt;TLAVを高速化しようとする研究の中で提案されたモデル．$n$個の頂点をまとめて扱うことでコミュニケーションコストを抑え，実行効率の向上を図る．Blogel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;で実装されている．&lt;/p&gt;

&lt;p&gt;TLAVとBlock Centricモデルおよび$GRAPE$モデルを，処理単位の粒度，コミュニケーションコストの大小，プログラミングのしやすさという三つの観点から整理すると下表のようになる．&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;table1.png&#34; data-caption=&#34;表1. 分散グラフ計算モデルの比較&#34;&gt;
&lt;img src=&#34;table1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    表1. 分散グラフ計算モデルの比較
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;h2 id=&#34;3-partial-evaluation--incremental-computation&#34;&gt;3. Partial evaluation &amp;amp; Incremental computation&lt;/h2&gt;

&lt;p&gt;$GRAPE$では，Partial evaluation &amp;amp; Incremental computationという計算モデルを採用している．これは，最初に部分グラフに対して実行したい処理を行って部分解を求め，その部分解の更新を繰り返していくことで全体の解を求めるというモデルである．&lt;/p&gt;

&lt;h3 id=&#34;partial-evaluation&#34;&gt;Partial evaluation&lt;/h3&gt;

&lt;p&gt;コンパイラによるプログラム最適化の文脈で登場し，XML文章中の要素を指定するXPathを分散環境下で評価する研究などでも取り上げられている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;

&lt;h3 id=&#34;incremental-computation&#34;&gt;Incremental computation&lt;/h3&gt;

&lt;p&gt;巨大な動的グラフ$G$に対するクエリ$Q$の応答速度を向上させる技術．グラフの変化$\Delta G$から$Q(G \oplus \Delta G) = Q(G) \oplus \Delta O$を満たすようなクエリ出力の差分$\Delta O$を求めることで，グラフ全体を用いて再計算することなく，変化後のグラフに対するクエリ結果を求める&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;

&lt;p&gt;例えば，図1のような5ノードからなるグラフ$G$を三つの部分グラフ$F_1$，$F_2$，$F_3$に分割する．部分グラフは，それを構成するノードとそのノードを始点とするエッジの終点も含めるものとして与える．例えば，部分グラフ$F_1$は図2となる．ここで，グラフ$G$に対してノード$1$を始点とする単一始点最短経路問題(SSSP)を考える．$GRAPE$ではまず，部分グラフ$F_1$に対してダイクストラ法を用いて計算する．この結果は$G$全体に対するSSSPの解ではないが，この結果は全体の解のたたき台となっている．この「部分グラフ$F_1$に対するダイクストラ法の適用」がPartial evaluationである．&lt;/p&gt;

&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;graph.png&#34; data-caption=&#34;図1. 全体グラフ&#34;&gt;
&lt;img src=&#34;graph.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    図1. 全体グラフ
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;f1.png&#34; data-caption=&#34;図2. 部分グラフ $F_1$&#34;&gt;
&lt;img src=&#34;f1.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    図2. 部分グラフ $F_1$
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;$F_1$にダイクストラ法を適用することで表2を得る．ここで，ノード$4$および$5$のコストが計算されていることに注目する．これは，$F_1$のpartial evaluationの結果から，$F_3$の状態が変化した(表3におけるノード$4$および$5$の初期状態からの変化)ということであり，この変化を元に$F_3$に対してダイクストラ法を適用することで全体解に収束していく．これが，$GRAPE$のIncremental computationである．&lt;/p&gt;

&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;table2.png&#34; data-caption=&#34;表2. 部分グラフ$F_1$に対するPartial evaluation&#34;&gt;
&lt;img src=&#34;table2.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    表2. 部分グラフ$F_1$に対するPartial evaluation
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;table3.png&#34; data-caption=&#34;表3. 部分グラフ$F_3$に対するIncremental computation&#34;&gt;
&lt;img src=&#34;table3.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    表3. 部分グラフ$F_3$に対するIncremental computation
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;4-grape&#34;&gt;4. $GRAPE$&lt;/h2&gt;

&lt;p&gt;Partial evaluation &amp;amp; Incremental computationを図3のように組み上げることで処理系$GRAPE$を実現する．&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;grape.png&#34; data-caption=&#34;図3. $GRAPE$&#34;&gt;
&lt;img src=&#34;grape.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    図3. $GRAPE$
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;$GRAPE$の利用者は実行したい処理を，$\sf PEval$(Partial evaluation相当)，$\sf IncEval$(Incremental computation)相当，部分解をまとめる$\sf Assemble$という三つのプログラムとして$GRAPE$に与える．$GRAPE$は一つの$\tt coordinator$と複数の$\tt worker$で構成され，$\tt coordinator$は部分グラフ間の接続関係やどの$\tt worker$がどの部分グラフを担当するかを管理している．$\tt worker$は各自が担当する部分グラフに$\sf PEval$や$\sf IncEval$を適用する．&lt;/p&gt;

&lt;p&gt;$GRAPE$での演算は三つのフェーズから成る．まず$\tt coordinator$がクエリの実行を受け付け，$\tt worker$が各自が担当している部分グラフに対して$\sf PEval$を実行する．次に,
各$\tt worker$が部分グラフの状態変化を$\tt coordinator$に通知する．$\tt coordinator$は部分グラフ同士の接続関係を考慮し，対応する$\tt worker$に変化を伝達する．知らせを受けた$\tt worker$は，状態変化に基づく$\sf IncEval$を実行し自分の担当している部分グラフの状態を更新する．$\sf IncEval$は更新が発生しなくなるまで繰り返される．$\sf IncEval$が収束すると，$\tt coordinator$は各$\tt worker$から部分解を回収し，最終的な出力を得る．&lt;/p&gt;

&lt;h2 id=&#34;5-grapeのアドバンテージ&#34;&gt;5. $GRAPE$のアドバンテージ&lt;/h2&gt;

&lt;p&gt;$GRAPE$は処理効率と$GRAPE$モデルの表現力において，既存の処理系に対してアドバンテージがある．$GRAPE$では部分グラフ間の状態変化をやり取りするコストのみで済むため，TLAVと比較して大幅にコミュニケーションコストが抑えられる．これによって，TLAVよりも効率的な処理が実行できる．さらに$GRAPE$で実行されるアルゴリズムのロジックは既存のものと変わらないため，既存のグラフ最適化技法を適用することができ，さらなる高速化も見込むことができる．加えて，$\sf MapReduce$など他の分散計算モデルを$GRAPE$上に表現することも可能である．例えば$\sf IncEval$でやり取りする情報を&lt;code&gt;&amp;lt;key: value&amp;gt;&lt;/code&gt;として$\sf PEval$と偶数回目の$\sf IncEval$を$\sf Map$に，奇数回目の$\sf IncEval$を$\sf Reduce$とすれば$\sf MapReduce$を表現できる．&lt;/p&gt;

&lt;h2 id=&#34;6-評価&#34;&gt;6. 評価&lt;/h2&gt;

&lt;p&gt;$GRAPE$モデルがTLAVよりも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;処理時間&lt;/li&gt;
&lt;li&gt;コミュニケーションコスト&lt;/li&gt;
&lt;li&gt;グラフの規模に対するスケーラビリティ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の三点において，TLAVとの性能を比較し$GRAPE$モデルの優位性を検証した．プロセッサの数を64から192まで変化させながら，liveJournal&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a class=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;など複数の実世界グラフに対して単一始点最小経路問題をGiraph，GraphLab，Blogel，$GRAPE$で実行した結果を図4に示す．$GRAPE$はGiraph，GraphLab，Blogeと比べて484，36，15倍高速に処理を実行し，$\tt worker$間でやり取りされるデータ量を0.07%，0.12%，0.7%に抑えられている．&lt;/p&gt;

&lt;p&gt;グラフの規模に対するスケーラビリティを，入力グラフを5Mノード50Mエッジから25Mノード250Mエッジまで変化させながら実行時間とコミュニケーションコストを計測した．その結果を図5の左二図に示す．グラフ規模に対して十分にスケールしていることがわかる．&lt;/p&gt;

&lt;p&gt;図5の右端図から，${GRAPE}$では，並列実行に伴うオーバーヘッドを考慮してもなお，既存のアルゴリズムに対する高速化技法の効果が得られることがわかる．&lt;/p&gt;

&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;evaluation.png&#34; data-caption=&#34;表4. 処理系ごとの実行時間とコミュニケーションコスト&#34;&gt;
&lt;img src=&#34;evaluation.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    表4. 処理系ごとの実行時間とコミュニケーションコスト
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;scalability.png&#34; data-caption=&#34;表5. ${GRAPE}$のスケーラビリティーとグラフレベル最適化の効果&#34;&gt;
&lt;img src=&#34;scalability.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    表5. ${GRAPE}$のスケーラビリティーとグラフレベル最適化の効果
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;7-結論&#34;&gt;7. 結論&lt;/h2&gt;

&lt;p&gt;Partial evaluation &amp;amp; Incremental computationという計算モデルはグラフに対しても有効であり，この計算モデルを用いることで
既存のグラフアルゴリズムのロジックをほぼ変更することなく並列化を実現でき，分散グラフ処理系を利用する敷居を下げられる．そこでPartial evaluation &amp;amp; Incremental computationを実装する処理系$GRAPE$を提案する．Partial evaluationに相当する$\sf PEval$とIncremental computationに相当する$\sf IncEval$，部分解を集める$\sf Assemble$を定義することで既存のグラフアルゴリズムの並列化を実現する．&lt;/p&gt;

&lt;div class=&#34;responsive-wrap&#34;&gt;
  &lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vR18vtYd3XhDHVbLaP4DXmGELqvX_OV6s7OIdkwhNv4Wi6hLPREQ7wr1r4ki3PDX2mPhugO248Y4DG3/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0&#34;&gt;Wenfei Fan, Wenyuan Yu, Jingbo Xu, Jingren Zhou, Xiaojian Luo, Qiang Yin, Ping Lu, Yang Cao, and Ruiqi Xu. 2018. Parallelizing Sequential Graph Computations. ACM Trans. Database Syst. 43, 4, Article 18 (December 2018), 39 pages. DOI: &lt;a href=&#34;https://doi.org/10.1145/3282488&#34;&gt;https://doi.org/10.1145/3282488&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;Grzegorz Malewicz, Matthew H. Austern, Aart J.C Bik, JamesC. Dehnert, Ilan Horn, Naty Leiser, and Grzegorz Czajkowski.2010. Pregel: a system for large-scale graph processing. In Pro-ceedings of the 2010 ACM SIGMOD International Conferenceon Management of data (SIGMOD ’10). ACM, New York, NY,USA, 135-146.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Yucheng Low, Danny Bickson, Joseph Gonzalez, CarlosGuestrin, Aapo Kyrola, and Joseph M. Hellerstein. 2012. Dis-tributed GraphLab: a framework for machine learning and datamining in the cloud. Proc. VLDB Endow. 5, 8 (April 2012),716-727.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Giraph. &lt;a href=&#34;http://giraph.apache.org/&#34;&gt;http://giraph.apache.org/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Yucheng Low, Danny Bickson, Joseph Gonzalez, CarlosGuestrin, Aapo Kyrola, and Joseph M. Hellerstein. 2012. Dis-tributed GraphLab: a framework for machine learning and datamining in the cloud. Proc. VLDB Endow. 5, 8 (April 2012),716-727.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Da Yan, James Cheng, Yi Lu, and Wilfred Ng. 2014. Blogel:a block-centric framework for distributed computation on real-world graphs. Proc. VLDB Endow. 7, 14 (October 2014), 1981-1992.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;Peter Buneman, Gao Cong, Wenfei Fan, and Anastasios Ke-mentsietsidis. 2006. Using partial evaluation in distributedquery evaluation. In Proceedings of the 32nd international con-ference on Very large data bases (VLDB ’06), UmeshwarDayal, Khu-Yong Whang, David Lomet, Gustavo Alonso, GuyLohman, Martin Kersten, Sang K. Cha, and Young-Kuk Kim(Eds.). VLDB Endowment 211-222
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;Wenfei Fan, Chunming Hu, and Chao Tian. 2017. Incremen-tal Graph Computations: Doable and Undoable. In Proceedingsof the 2017 ACM International Conference on Management ofData (SIGMOD ’17). ACM, New York, NY, USA, 155-169.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;Snap. &lt;a href=&#34;http://snap.stanford.edu/data/index.html&#34;&gt;http://snap.stanford.edu/data/index.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Emulator v.s. Simulator</title>
      <link>/ja/post/simulator-vs-emulator/</link>
      <pubDate>Tue, 29 Oct 2019 23:24:38 +0900</pubDate>
      <guid>/ja/post/simulator-vs-emulator/</guid>
      <description>&lt;h2 id=&#34;ある人によれば&#34;&gt;ある人によれば&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Simulation = For analysis and study&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Emulation = For usage as a substitute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A simulator is an environment which models but an emulator is one that replicates the usage as on the original device or system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simulator mimics the activity of something that it is simulating. It &lt;strong&gt;&amp;ldquo;appears&amp;rdquo;&lt;/strong&gt; (a lot can go with this &amp;ldquo;appears&amp;rdquo;, depending on the context) to be the same as the thing being simulated. For example the flight simulator &amp;ldquo;appears&amp;rdquo; to be a real flight to the user, although it does not transport you from one place to another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Emulator, on the other hand, &lt;strong&gt;actually &amp;ldquo;does&amp;rdquo;&lt;/strong&gt; what the thing being emulated does, and in doing so it too &amp;ldquo;appears to be doing the same thing&amp;rdquo;. An emulator may use different set of protocols for mimicking the thing being emulated, but the result/outcome is always the same as the original object. For example, EMU8086 emulates the 8086 microprocessor on your computer, which obviously is not running on 8086 (= different protocols), but the output it gives is what a real 8086 would give.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;また別の人によれば&#34;&gt;また別の人によれば&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Simulator is broader than Emulator&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Simulator tends to imitate/model more global processes/things in general with ability to narrow the imitation down (e.g. capacitor simulator with presets representing some known models)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Emulator tends to imitate certain hardware devices with certain specification, known characteristics and properties (e.g. SNES emulator, Intel 8087 or Roland TB-303)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;語源を辿ると&#34;&gt;語源を辿ると&amp;hellip;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;emulate is &amp;ldquo;to be equal&amp;rdquo; (looks like more aggressive and straightforward - rivalry)&lt;/li&gt;
&lt;li&gt;simulate is &amp;ldquo;to be similar&amp;rdquo; (looks like more sly and tricky - imitation)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;日本語だと&#34;&gt;日本語だと&amp;hellip;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emulation: （代替可能なレベルでの）模倣&lt;/li&gt;
&lt;li&gt;Simulation: 模擬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;かな？🤔&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1584617/simulator-or-emulator-what-is-the-difference&#34;&gt;Simulator or Emulator? What is the difference?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHub上でのmerge</title>
      <link>/ja/post/three-kinds-of-merge-on-github/</link>
      <pubDate>Tue, 29 Oct 2019 19:50:58 +0900</pubDate>
      <guid>/ja/post/three-kinds-of-merge-on-github/</guid>
      <description>&lt;h2 id=&#34;github上でのmerge&#34;&gt;GitHub上でのmerge&lt;/h2&gt;
&lt;p&gt;GitHub上で行えるmergeには3種類あります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a merge commit&lt;/li&gt;
&lt;li&gt;Squash and merge&lt;/li&gt;
&lt;li&gt;Rebase and merge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらは，「merge commitの有無」「merge commitのauthorが誰になるのか」などの点で微妙に異なります．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;merge commitの有無&lt;/th&gt;
&lt;th&gt;merge commitのauthor&lt;/th&gt;
&lt;th&gt;merge元のbranchのcommit log&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create a merge commit&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;merge先&lt;/td&gt;
&lt;td&gt;残る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Squash and merge&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;td&gt;merge元&lt;/td&gt;
&lt;td&gt;残らない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rebase and merge&lt;/td&gt;
&lt;td&gt;無&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;残る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;create-a-merge-commit&#34;&gt;Create a merge commit&lt;/h3&gt;
&lt;p&gt;「Create a merge commit」では，&lt;code&gt;git merge --no-ff&lt;/code&gt;でmergeすることになります．つまり，merge先に新たなcommitが作成され，そのcommitがmerge元のcommitを取り込みます．このとき作成されるmerge commitのauthorはmerge先のauthorとして記録されます．&lt;/p&gt;
&lt;p&gt;この方法は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「何をmergeしたのか」がmerge commitという形で記録として残る&lt;/li&gt;
&lt;li&gt;merge元のbranchがそのまま残るので変更箇所を追いやすい&lt;/li&gt;
&lt;li&gt;merge後に，merge元のbranchを削除したとしても，このbranchのcommit logがmerge先に残る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という特徴があります．わかりやすい一方で，「merge commitのauthorがmerge元ではない」のが（個人的に）「その人の頑張りを讃えたいのになぁ」とか思っちゃったりしてちょっと申し訳ない気がするとかしないとか．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;create-merge-commit.gif&#34; data-caption=&#34;Create a merge commit&#34;&gt;
&lt;img src=&#34;create-merge-commit.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Create a merge commit
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;squash-and-merge&#34;&gt;Squash and merge&lt;/h3&gt;
&lt;p&gt;「Squash and merge」では，&lt;code&gt;git merge --squash&lt;/code&gt;でmergeすることになります．つまり，merge元のcommitを一つのcommitにまとめた上で，merge先にmerge commitとして先頭に追加されます．このときのmerge commitのauthorはmerge元のauthorとなります．&lt;/p&gt;
&lt;p&gt;この方法は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「何をmergeしたのか」がmerge commitという形で記録として残る&lt;/li&gt;
&lt;li&gt;複数のcommitをまとめて一つにできるのでmerge先のcommit logがわかりやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という特徴があります．一方で，一度commitをまとめてしまうと，「どの変更が誰によってどのcommitで行われたのか」という情報が失われてしまうことになります．他の人の複数のcommitを一つのcommitに押し込むことになるので，個人的には若干怖さがあります．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;squash-and-merge.gif&#34; data-caption=&#34;Squash and merge&#34;&gt;
&lt;img src=&#34;squash-and-merge.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Squash and merge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;rebase-and-merge&#34;&gt;Rebase and merge&lt;/h3&gt;
&lt;p&gt;「Rebase and merge」では，まずmerge元のブランチにあるcommit列に対して&lt;code&gt;git rebase&lt;/code&gt;して，commit列が一列になったところでfast-forwardの形でmergeが実行されます．&lt;/p&gt;
&lt;p&gt;この方法は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mergeした結果，merge先のcommit logが一直線で見やすい&lt;/li&gt;
&lt;li&gt;merge commitが作成されない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という特徴があります．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;rebase-and-merge.gif&#34; data-caption=&#34;Rebase and merge&#34;&gt;
&lt;img src=&#34;rebase-and-merge.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Rebase and merge
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/administering-a-repository/about-merge-methods-on-github&#34;&gt;About merge methods on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Federated Social WebとActivityPub</title>
      <link>/ja/post/what-is-activitypub/</link>
      <pubDate>Mon, 28 Oct 2019 17:49:25 +0900</pubDate>
      <guid>/ja/post/what-is-activitypub/</guid>
      <description>&lt;h2 id=&#34;federated-social-webとは&#34;&gt;Federated Social Webとは？&lt;/h2&gt;
&lt;p&gt;Federated Social Webとは，誤解を恐れず端的に言えば「分散Twitter」である．&lt;/p&gt;
&lt;p&gt;「分散Twitter」とは何かを説明するには，Twitterと対比するのがわかりやすい．TwitterはTwitter社が提供しているマイクロブログサービスで，ユーザーはTwitter社が管理するサーバー上に展開されているTwitterというシステム内にアカウントを作成し，テキストメッセージや動画像を投稿（ツイート）したり拡散（リツイート）したりすることができる．アカウントごとにタイムラインというインタフェースが提供され，ユーザーはタイムラインを通じてコンテンツを閲覧することができる．Twitterはアカウントを「Followする」という機能も実装している．これは「他のアカウントの投稿を自分のタイムラインに表示する機能」でユーザーは好みのコンテンツを投稿してくれるアカウントをフォローすることで，より簡単に好みのコンテンツを発見・消費することができるようになる．&lt;/p&gt;
&lt;p&gt;Twitterの抱える問題点は「Twitterというサービスが中央集権的である」という点である．「Twitterというサービスが中央集権的である」とは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「TwitterというシステムはTwitter社の管理するマシン上でのみ展開されているため，そのマシンが落ちるとTwitterというシステム全体が落ちてしまう（単一障害点）」&lt;/li&gt;
&lt;li&gt;「ユーザーがTwitterに投稿した任意のコンテンツやデータは基本的にTwitter社の管理するマシンにしか残らない」&lt;/li&gt;
&lt;li&gt;「ユーザーは投稿内容についてTwitter社の決めるルールに従わなければならない（コンテンツの価値判断についての自由がユーザーから剥奪される．少なくともTwitter社がコンテンツに対して検閲を行えばそれを回避する手段は存在しない）」&lt;/li&gt;
&lt;li&gt;「Twitterというサービスを提供するTwitter社の決めるルールに，ユーザーの全員が従わなければならない」&lt;/li&gt;
&lt;li&gt;「TwitterというサービスのしようがTwitter社の一存で決まるため，Twitterというシステムに乗っかろうとする外部の開発者は地位的にTwitter社の下につくことになる」&lt;/li&gt;
&lt;li&gt;「Twitterの実装は公開されない（ので，ユーザーがなんらかの不具合に直面しても，ユーザー自身で修正することが根本的に不可能）」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということ．&lt;/p&gt;
&lt;p&gt;「Twitterというシステムの管理者がTwitter社しかいない」と「ユーザーはTwitter社の決めたルールの中でした活動できない」ということになる．これは殊「コンテンツ共有」という文脈において大きな問題になる可能性がある．というのも，「コンテンツに対する価値判断やそれを発表することは，基本的に人間に与えられた自由である」からだ．いわゆる「表現の自由」ってやつだ．細かなことを言えば，法律が保証する「表現の自由」の範囲は「公共の福祉を侵害したり他者の自由を侵害しない」ような表現の自由であるようだが．ここで大事なのは，表現の自由を制約するのは「公共の福祉や他社の自由を侵害するかしないか」という社会的な合意であって，Twitterといった一私企業の決めたルールではないということだ．現状のSNSはその点で問題を抱えている（と自由を求めるユーザーは主張している）．無論，Twitter社の決めたルールの範囲内で楽しむので十分というユーザーもいるだろうし，なんならそっちの方が多数派な気もするが．&lt;/p&gt;
&lt;p&gt;そんな問題意識からFederated Social Webという概念が登場している．Federated Social Webが実現したいのは「中央集権ではない形で社会的な人間の在りようをインターネットの世界に実装すること」である．Federated Social Webでは，先に挙げた目的を「Cleint-ServerモデルとServer-Serverモデルの組み合わせ」で実現しようとしている．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;federated-social-web.jpeg&#34; data-caption=&#34;Fededated Social Web&#34;&gt;
&lt;img src=&#34;federated-social-web.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Fededated Social Web
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Federated Social Webでは「既存のTwitterのような仕組みを提供するserverが不特定多数の管理者（これは組織でも個人でもいい）によって提供され，彼らが提供するシステムにユーザーが乗っかる」というモデルである．&lt;/p&gt;
&lt;p&gt;「Federated」を英英辞典で引くと&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(of a country or organization) set up as a single centralized unit within which each state or division keeps some internal autonomy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とある．つまり，Social Networkingに必要な機能を提供するserverが，（単一の管理者によって定められたルールによって動くのではなくて）複数の管理者が自由に定めたルールに基づいて統治・管理されるということだ．ユーザーは自分の納得するルールで運用されているserverにぶら下がれば，そのユーザーにとって十分な自由を享受できるし，いやになれば異なるルールで動いている他のserverに移ることだって可能だ．さらに言えば「オレオレルール」で運用されるオレオレSNSを構築することだって許されている．&lt;/p&gt;
&lt;h2 id=&#34;activitypubとは&#34;&gt;ActivityPubとは&lt;/h2&gt;
&lt;p&gt;ActivityPubはFederated Social Webを実現する際の通信プロトコルだ．ActivityPubは「あるserverとそれにぶら下がっているclient間の通信プロトコル」と「連合を組むserver間の通信プロトコル」の2つのプロトコルを内包している．&lt;/p&gt;
&lt;p&gt;「あるserverとそれにぶら下がっているclient間の通信プロトコル」は，通常のSNSにおいて必要な投稿だとか他の人の行動のお知らせとかを受け取るために必要な通信を規定しているもの．&lt;/p&gt;
&lt;p&gt;「連合を組むserver間の通信プロトコル」は，不特定多数の管理者が運営するserver間で情報を共有するための通信を規定するもの．これがあることで，「Federated」なSocial Webが初めて実現できる．&lt;/p&gt;
&lt;p&gt;ActivityPubでは，ユーザーは「他のユーザーからのお知らせを受け取る&lt;code&gt;inbox&lt;/code&gt;と自分のシステム上での行動を他の人に通知する&lt;code&gt;outbox&lt;/code&gt;を持つActor」としてモデル化される．&lt;code&gt;inbox&lt;/code&gt;/&lt;code&gt;outbox&lt;/code&gt;の実体はwebの世界で言うところのURLに過ぎず，さらに言えばclientがserverに&lt;code&gt;GET&lt;/code&gt;/&lt;code&gt;POST&lt;/code&gt;する際のapi endpointでしかない．あctivityPubではどんな形式のデータをやりとりするかも規定している．より具体的に言えば「SNSをWeb上で実現する際のJSONメッセージフォーマット」を規定するActivityStreamsの上にActivityPubは規定されている．&lt;/p&gt;
&lt;p&gt;要するに，client-server間の通信とclient-client間の通信のそれぞれについて，ActivityStreamsが定義するデータを用いたSNS上におけるActorの行動に対するCRUDを定義しているのがActivityPubである．&lt;/p&gt;
&lt;h2 id=&#34;疑問&#34;&gt;疑問&lt;/h2&gt;
&lt;p&gt;不特定多数の管理者がそれぞれのルールでSNSを提供するときに，それらSNS同士がやり取りをするための統一的なデータ形式・APIを規定しているのがActivityPubということになるが，各SNSが独自機能を実装して独自データフォーマットを追加したときはどのように対応するのだろう．&lt;/p&gt;
&lt;p&gt;ActivityPubは最低限実装されるべきAPIとして整備されるにしても，独自データフォーマットについては共有する方法とかは規定していない．ActivityPubには「JSON-LDを用いてActivityStreamsは拡張可能である」としている．やり取りされるJSONメッセージに未知のフィールドが存在していたら，無視するか適当に解釈するかしかないので，どうするのだろう．ただ，SNSというある程度要求されるAPIがサービスから予測がつくしそれ以上の独自性がなさそうという感覚からすればActivityStreamsで十分なのかもしれない．この点はActivityStreamsを読んでみないとわからないと思うので気が向いたらやろうかな．&lt;/p&gt;
&lt;h2 id=&#34;mastodon&#34;&gt;Mastodon&lt;/h2&gt;
&lt;p&gt;MastodonはActivityPubを実装しているウェブアプリケーションの1つ．ちょっと前にちょっと流行った．Mastodonの面白いところは，Social Webにおけるグローバルなuser identityをメールアドレスみたいな形式で表現できるようにしたこと．Web上でのIdentityはサービスと強固に結びついていて，現在でもGoogle，Facebook，GitHub認証のサービスがたくさんある．「私はAliceです」と，ただそれだけで主張することができるURLがWeb上には存在していなくて，「FacebookのAliceさん」とか「GoogleのAliceさん」という風にしか自分のことを表現できていない状態にある．Federated Social Webの実装例であるMastodonでは，&lt;code&gt;&amp;lt;user_id&amp;gt;@&amp;lt;federation_id&amp;gt;&lt;/code&gt;みたいな形でユーザーのグローバルなIdentityを与えることにしていて，これは賢いなと思う．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>共通鍵暗号</title>
      <link>/ja/post/symmetric-key-encription-scheme/</link>
      <pubDate>Mon, 28 Oct 2019 17:19:36 +0900</pubDate>
      <guid>/ja/post/symmetric-key-encription-scheme/</guid>
      <description>&lt;h2 id=&#34;共通鍵暗号&#34;&gt;共通鍵暗号&lt;/h2&gt;
&lt;p&gt;暗号化・復号で同一の鍵を用いる暗号化方式&lt;/p&gt;
&lt;h2 id=&#34;シナリオ&#34;&gt;シナリオ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aliceが秘密鍵$key$を作成し，Bobに安全に共有&lt;/li&gt;
&lt;li&gt;Aliceがメッセージ$m$を$key$で暗号化$c = Enc(m, key)$し，Bobに送信&lt;/li&gt;
&lt;li&gt;Bobが受け取った暗号文$c$を$key$で復号$m = Dec(c, key)$して平文$m$を得る&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;共通鍵暗号の満たすべき性質&#34;&gt;共通鍵暗号の満たすべき性質&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正当性
&lt;ul&gt;
&lt;li&gt;$m = Dec(Enc(m, key), key)$が成立すること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;秘匿性
&lt;ul&gt;
&lt;li&gt;暗号文$c$から平文$m$に関連する情報が得られないこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;共通鍵暗号に対する攻撃モデル&#34;&gt;共通鍵暗号に対する攻撃モデル&lt;/h2&gt;
&lt;h3 id=&#34;暗号文単独攻撃ciphertext-only-attack&#34;&gt;暗号文単独攻撃：Ciphertext Only Attack&lt;/h3&gt;
&lt;p&gt;攻撃者が「解読対象の暗号文$c^*$」と「盗聴した暗号文$c_1$，$c_2$，$c_3$&amp;hellip;$c_k$」を手元に持っている状況での攻撃．通信路の盗聴という攻撃に相当．&lt;/p&gt;
&lt;h3 id=&#34;既知平文攻撃known-plaintext-attack&#34;&gt;既知平文攻撃：Known Plaintext Attack&lt;/h3&gt;
&lt;p&gt;攻撃者が「解読対象の暗号文$c^*$」と「（同一の鍵で暗号化された）ランダムな平文と暗号文の対$(m_1, c_1)$，$(m_2, c_2)$，$(m_3, c_3)$&amp;hellip;$(m_k, c_k)$」を手元に持っている状況での攻撃．過去の平文が特定済みであるような状況での攻撃に相当．&lt;/p&gt;
&lt;h3 id=&#34;選択平文攻撃chosen-plaintext-attack&#34;&gt;選択平文攻撃：Chosen Plaintext Attack&lt;/h3&gt;
&lt;p&gt;攻撃者が「解読対象の暗号文$c^*$」を持ち，「攻撃者が選んだ任意の平文に対応する暗号文を自由に入手できる」ような状況での攻撃．&lt;/p&gt;
&lt;h3 id=&#34;選択暗号文攻撃chosen-ciphertext-attack&#34;&gt;選択暗号文攻撃：Chosen Ciphertext Attack&lt;/h3&gt;
&lt;p&gt;攻撃者が「解読対象の暗号文$c^&lt;em&gt;$」を持ち，「攻撃対象の暗号文$c^&lt;/em&gt;$を入手する前の時点で，攻撃者が自分の選んだ暗号文に対応する平文を入手することができる」ような状況での攻撃．&lt;/p&gt;
&lt;h3 id=&#34;適応的選択暗号文攻撃adaptive-chosen-ciphertext-attack&#34;&gt;適応的選択暗号文攻撃：Adaptive Chosen Ciphertext Attack&lt;/h3&gt;
&lt;p&gt;攻撃者が「解読対象の暗号文$c^*$」を持ち，「攻撃者が選んだ任意の暗号文に対応する平文を自由に入手できる」ような状況での攻撃．&lt;/p&gt;
&lt;h2 id=&#34;鍵全数探索攻撃に対する共通鍵暗号の安全性&#34;&gt;鍵全数探索攻撃に対する共通鍵暗号の安全性&lt;/h2&gt;
&lt;p&gt;秘密鍵が$k$bitであるような共通鍵暗号では，$2^k$個の鍵を全部試せば必ず秘密鍵を得ることができる．共通鍵暗号では「鍵全数探索攻撃よりも効率的に秘密鍵を求めるアルゴリズムが存在しないこと」が安全性に対する条件である．&lt;/p&gt;
&lt;h2 id=&#34;さまざまな共通鍵暗号&#34;&gt;さまざまな共通鍵暗号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ストリーム暗号
&lt;ul&gt;
&lt;li&gt;平文を小さい単位で順次処理していく方式&lt;/li&gt;
&lt;li&gt;アルゴリズムを実行する回数が1回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ブロック暗号
&lt;ul&gt;
&lt;li&gt;平文を一定の大きさの単位で処理していく方式&lt;/li&gt;
&lt;li&gt;アルゴリズムを実行する回数がブロックの個数分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;バーナム暗号&#34;&gt;バーナム暗号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;👍
&lt;ul&gt;
&lt;li&gt;情報理論的安全性を持つ
&lt;ul&gt;
&lt;li&gt;たとえ，鍵全数探索を実行できる無限の計算能力を持っている攻撃者であっても解読できない（どれが本当の平文なのかがわからない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;処理が「平文と鍵で&lt;code&gt;xor&lt;/code&gt;」と単純なので非常に高速&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;👎
&lt;ul&gt;
&lt;li&gt;少なくとも平文と同じ長さの秘密鍵が必要になるし，基本的に鍵は使い捨てなのでいくら鍵を用意しても足りないし，そもそもこの秘密鍵を安全に共有できるなら暗号化する必要がない&lt;/li&gt;
&lt;li&gt;鍵の生成に「真性乱数」を用意しなければならず，長い鍵を作るには手間がかかる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ストリーム暗号&#34;&gt;ストリーム暗号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;👍
&lt;ul&gt;
&lt;li&gt;バーナム暗号と比べて（安全性をやや犠牲にしながらも）効率性を向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;👎
&lt;ul&gt;
&lt;li&gt;擬似乱数生成器の安全性がストリーム暗号の安全性に直結する
&lt;ul&gt;
&lt;li&gt;過去の系列を見て未来の系列が予測できてしまえば解読されてしまう&lt;/li&gt;
&lt;li&gt;擬似乱数生成器の初期化に用いる秘密鍵を特定されてしまうと解読されてしまう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>暗号の基礎技術</title>
      <link>/ja/post/basic-cryptographic-technologies/</link>
      <pubDate>Mon, 28 Oct 2019 12:40:48 +0900</pubDate>
      <guid>/ja/post/basic-cryptographic-technologies/</guid>
      <description>&lt;h2 id=&#34;暗号の基礎技術&#34;&gt;暗号の基礎技術&lt;/h2&gt;
&lt;p&gt;暗号技術の中でも基礎となるもの．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暗号&lt;/li&gt;
&lt;li&gt;鍵配送&lt;/li&gt;
&lt;li&gt;ハッシュ関数&lt;/li&gt;
&lt;li&gt;メッセージ認証コード&lt;/li&gt;
&lt;li&gt;デジタル署名&lt;/li&gt;
&lt;li&gt;擬似乱数生成器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;暗号&#34;&gt;暗号&lt;/h3&gt;
&lt;p&gt;暗号とは，「正当な送信者と受信者以外に内容を秘匿する技術」のこと．送信者は平文に対して，なんらかの操作を施すことで，暗号文を生成する．この過程を暗号化という．一方で，受信者は暗号文に対してなんらかの操作を施すことで平文を得る．この過程を復号という．&lt;/p&gt;
&lt;h3 id=&#34;鍵配送&#34;&gt;鍵配送&lt;/h3&gt;
&lt;p&gt;鍵配送とは，暗号化や復号に用いる鍵を安全に配送・共有するための技術や方式のこと．鍵は「第三者に知られないように」配送する必要があります．&lt;/p&gt;
&lt;h3 id=&#34;ハッシュ関数&#34;&gt;ハッシュ関数&lt;/h3&gt;
&lt;p&gt;ハッシュ関数とは，任意長のビット列を入力として固定長のビット列を出力する関数のこと．同一の入力に対して同一の出力をする一方で，異なる入力に対して異なる出力となり，異なる入力に対して同一の出力にならないという性質が求められる．&lt;/p&gt;
&lt;h3 id=&#34;メッセージ認証コード&#34;&gt;メッセージ認証コード&lt;/h3&gt;
&lt;p&gt;メッセージ認証コードとは，「伝送路上を通ってきたデータが改ざんされていないこと」「データが期待した通信相手から送信されていること」を検証するための技術のこと．&lt;/p&gt;
&lt;h3 id=&#34;デジタル署名&#34;&gt;デジタル署名&lt;/h3&gt;
&lt;p&gt;デジタル署名とは，契約書における物理的なサインのデジタル版で，ユーザー認証とデータ認証を同時に実現する技術のこと．メッセージの改ざんを防ぎ，メッセージに対する署名は署名した本人でしか生成できないことから，後から署名者が署名した契約について否認することを防止することができる．&lt;/p&gt;
&lt;h3 id=&#34;擬似乱数生成器&#34;&gt;擬似乱数生成器&lt;/h3&gt;
&lt;p&gt;真の乱数ではないにしても，暗号論的に安全とみなせる乱数列を生成するための技術のこと．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>情報セキュリティの構成要素</title>
      <link>/ja/post/six-elements-of-infomation-security/</link>
      <pubDate>Mon, 28 Oct 2019 11:54:27 +0900</pubDate>
      <guid>/ja/post/six-elements-of-infomation-security/</guid>
      <description>&lt;h2 id=&#34;情報セキュリティの構成要素&#34;&gt;情報セキュリティの構成要素&lt;/h2&gt;
&lt;p&gt;「情報セキュリティ」の言葉の指し示す意味範囲は&lt;a href=&#34;oecd.org/internet/ieconomy/15582260.pdf&#34;&gt;OECDの情報セキュリティガイドライン&lt;/a&gt;やISO/IEC TR13335&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;として国際的に定義されている．&lt;/p&gt;
&lt;p&gt;ISO/IEC TR13335にて情報セキュリティとは下記6要素のことを指すとされている．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機密性 Confidentiality&lt;/li&gt;
&lt;li&gt;完全性 Integrity&lt;/li&gt;
&lt;li&gt;可用性 Availability&lt;/li&gt;
&lt;li&gt;責任追跡性 Accountability&lt;/li&gt;
&lt;li&gt;真正性 Authenticity&lt;/li&gt;
&lt;li&gt;信頼性 Reliability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;機密性-confidentiality&#34;&gt;機密性 Confidentiality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;意図した相手以外に情報が漏れないこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;盗聴や内部からの情報漏洩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;暗号技術&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全性-integrity&#34;&gt;完全性 Integrity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;情報が正確であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;情報の改ざん，ノイズによるビット反転・ビットの欠落&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;誤り訂正符号，ハッシュ関数，メッセージ認証コード，デジタル署名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可用性-availability&#34;&gt;可用性 Availability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;ある情報にアクセスすることが許されている主体が，任意の時点で情報にアクセスすることができること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;システムへの過負荷，災害，意図しないロック&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;システムの多重化，クラウド化，負荷分散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;責任追跡性-accountability&#34;&gt;責任追跡性 Accountability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;ユーザやシステムの振る舞いについて説明が可能であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;ログの改ざん，否認&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;ロギング，デジタル署名（否認防止）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;真正性-authenticity&#34;&gt;真正性 Authenticity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;観測されるユーザやシステムの振る舞いが，その主体によるものであること（なりすましではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;なりすまし&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;認証，デジタル署名（なりすまし防止）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信頼性-reliability&#34;&gt;信頼性 Reliability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意味
&lt;ul&gt;
&lt;li&gt;システムが一貫して動作すること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リスク
&lt;ul&gt;
&lt;li&gt;盗聴や内部からの情報漏洩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;対策
&lt;ul&gt;
&lt;li&gt;システムの多重化，負荷の監視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;正確には企業のセキュリティリスクを査定する際のガイドラインを定めたものになっている．通称GMITS（Guidelines for the Management for IT Security） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>FramworkとLibraryの違い</title>
      <link>/ja/post/what-is-the-difference-between-library-and-framework/</link>
      <pubDate>Fri, 25 Oct 2019 22:45:15 +0900</pubDate>
      <guid>/ja/post/what-is-the-difference-between-library-and-framework/</guid>
      <description>&lt;h2 id=&#34;ありがちな会話&#34;&gt;ありがちな会話&lt;/h2&gt;
&lt;p&gt;「Web Application Frameworkと言ったら，やっぱりRuby on Railsだよね！」&lt;/p&gt;
&lt;p&gt;「Webのフロント開発ではjQueryってライブラリがあってだな&amp;hellip;」&lt;/p&gt;
&lt;p&gt;「最近だと，FacebookがJavascriptのフレームワークとしてReactを発表してるよね」&lt;/p&gt;
&lt;p&gt;「ReactよりAngular JSの方がいいよ」&lt;/p&gt;
&lt;p&gt;Web系の技術の話では，たくさんのFrameworkだのLibraryだのが提案されて使用されていると思います．僕なんかも初めて聞くものがあれば，すぐにググってその正体を知ろうとするのですが，どれもこれも「これは便利なWeb Frameworkです」ぐらいしか教えてくれません．Frameworkの正体って一体何なのでしょうか．気になったので調べてみました．&lt;/p&gt;
&lt;h2 id=&#34;library-vs-framework&#34;&gt;Library v.s. Framework&lt;/h2&gt;
&lt;h3 id=&#34;library&#34;&gt;Library&lt;/h3&gt;
&lt;p&gt;Libraryは，コードの再利用を目的とした「便利な関数やクラスの（ただの）コレクション」のようなものです．Libraryに含まれる関数やクラスは，ある特定の処理を達成するロジックを含んでいて，開発者がそれらを利用することで開発を進めていくことになります．例えばグラフアルゴリズムのライブラリなら，Dijkstra法とかBellman-Ford法を実装した関数が含まれていて，開発者がその関数を利用することでアプリケーションを開発します．アプリケーションの開発者が書いているロジックにライブラリの関数が利用されるので，アプリケーションの制御は開発者側にあります．&lt;/p&gt;
&lt;p&gt;Libraryを用いることで，他の人の仕事の恩恵に与りながら開発を進めることができます．これはとても嬉しいことです．開発の速度が上がります．&lt;/p&gt;
&lt;p&gt;要するに「&lt;strong&gt;Libraryのコードを開発者が利用する&lt;/strong&gt;」のがLibraryです．&lt;/p&gt;
&lt;h3 id=&#34;framework&#34;&gt;Framework&lt;/h3&gt;
&lt;p&gt;Frameworkは， (初期化から実際の処理，終了といった) アプリケーションの制御は &lt;em&gt;全てFramework側にあります&lt;/em&gt; ．アプリケーションを開発者は，Frameworkが要求するロジックを部品としてFrameworkに提供することになるわけです．Frameworkはアプリケーションの骨格を定義しているともいるかもしれません．外枠だけ定義しているのです．このFrameworkの持つ性質は，ソフトウェア工学的には「制御の反転 IoC (Inversion of Control)」と呼ばれています．&lt;/p&gt;
&lt;p&gt;Frameworkを用いることで，アプリケーション開発者は設計についてあれやこれや悩む必要がなくなります．Frameworkの要求に従っていれば，それなりの品質のシステムが勝手に出来上がることになるからです．また，Frameworkに則ってアプリケーションを開発していくと，コードに一貫性が生まれます．これはコードに可読性を与え，メンテナンスがしやすくなります．&lt;/p&gt;
&lt;p&gt;一方で，Frameworkは「制約の集合」でもあります．アプリケーションの全体としての制御が開発者の自由にできないわけですから，Frameworkを導入するならばFrameworkの課すルールを理解する必要があります．ルールを理解するのには時間がかかるものですし，Frameworkのルールに窮屈さを感じることもあるかもしれません．小規模なその場限りの開発現場などでは，この制約がFrameworkのメリットを上回ることがあるので，Frameworkを導入しないこともあるでしょう．&lt;/p&gt;
&lt;p&gt;要するに「&lt;strong&gt;Frameworkが開発者のコードを利用する&lt;/strong&gt;」のがFrameworkです．&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;library-framework-relationship.jpeg&#34; data-caption=&#34;LibraryとFrameworkとあなた&#34;&gt;
&lt;img src=&#34;library-framework-relationship.jpeg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    LibraryとFrameworkとあなた
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.nikkeibp.co.jp/it/article/lecture/20070205/260697/&#34;&gt;ソフトウエアのフレームワークとはなにか (日経XTECH)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/azuki8/items/ad7710fdefaedc63e3f7&#34;&gt;フレームワークとライブラリの違い (Qiita)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/the-difference-between-a-framework-and-a-library-bd133054023f/&#34;&gt;The Difference Between a Framework and a Library (freeCodeCamp)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library&#34;&gt;What is the difference between a framework and a library? (stackoverflow)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>🚩flagパッケージでコマンドライン引数を扱う</title>
      <link>/ja/post/handle-commandline-args-with-flag-package/</link>
      <pubDate>Fri, 25 Oct 2019 19:04:31 +0900</pubDate>
      <guid>/ja/post/handle-commandline-args-with-flag-package/</guid>
      <description>&lt;h2 id=&#34;flagパッケージ&#34;&gt;&lt;code&gt;flag&lt;/code&gt;パッケージ&lt;/h2&gt;
&lt;p&gt;Golangでは，標準パッケージとしてコマンドライン引数を扱う&lt;a href=&#34;https://golang.org/pkg/flag/&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt;パッケージが付属しています．「痒い所に手が届く」とはこのことですね．&lt;/p&gt;
&lt;h2 id=&#34;フラグの立っていないコマンドライン引数の取得&#34;&gt;フラグの立っていないコマンドライン引数の取得&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Parse()&lt;/code&gt;の後に&lt;code&gt;Args()&lt;/code&gt;で&lt;code&gt;[]string&lt;/code&gt;として取得できます．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-no-flag0.go a b c
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;a b c&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
$ go run with-no-flag0.go &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$n$番目の要素のみを取り出したい場合は&lt;code&gt;Arg(n)&lt;/code&gt;で&lt;code&gt;string&lt;/code&gt;として取得できます．$n$番目の要素が存在しない場合は&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;が返ってくるようです．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Arg&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Arg&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-no-flag1.go hoge fuga
hoge fuga
$ go run with-no-flag1.go &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;フラグの立っているコマンドライン引数の取得&#34;&gt;フラグの立っているコマンドライン引数の取得&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;型名()&lt;/code&gt;もしくは&lt;code&gt;型名Var()&lt;/code&gt;で，フラグを定義したのち，&lt;code&gt;Parse()&lt;/code&gt;でそれぞれの変数を取得できます．&lt;/p&gt;
&lt;p&gt;フラグの定義は「フラグ名」「デフォルト値」「ヘルプメッセージ」で行います．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;型名()&lt;/code&gt;の場合は，指定した型へのポインタが返ってきます．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int flag&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string flag&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool flag&amp;#34;&lt;/span&gt;)
	)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-flag0.go -int &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -str hello -bool true
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; hello true
$ go run with-flag0.go
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; default false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;型名Var()&lt;/code&gt;の場合は，引数で渡した変数に代入されます．また，適切な値を渡さないと怒られます．ダメな理由も教えてくれるので怒られがいがあります．定義していないフラグも受け付けてくれません．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
		&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;
	)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DurationVar&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dur&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;duration flag&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Float64Var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;float&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;float flag&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-flag1.go -dur 1h -float 2.3
1h0m0s 2.3
$ go run with-flag1.go -float str
invalid value &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; flag -float: strconv.ParseFloat: parsing &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;: invalid syntax
Usage of /var/folders/.../with-flag1:
  -dur duration
    	duration flag &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default 1s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  -float float
    	float flag &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default 0.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
exit status &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;フラグの書き方&#34;&gt;フラグの書き方&lt;/h2&gt;
&lt;p&gt;フラグの書き方は次の2通りが可能です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-flag value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-flag=value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，Bool値を取得する場合は&lt;code&gt;flag=value&lt;/code&gt;を使った方がいいかもしれません．というのも， &lt;strong&gt;フラグの型がBool値かつ引数が続かない場合，フラグが立っただけで&lt;code&gt;true&lt;/code&gt;となる&lt;/strong&gt;からです．&lt;/p&gt;
&lt;p&gt;つまり，フラグを立ててBool値を取得したい場合は&lt;code&gt;-bool=true&lt;/code&gt;/&lt;code&gt;-bool=false&lt;/code&gt;としなければならないということです．&lt;code&gt;-bool false&lt;/code&gt;では&lt;code&gt;true&lt;/code&gt;となってしまいます．また&lt;code&gt;-bool false&lt;/code&gt;以降の引数が全てフラグ無しで渡された引数として評価されてしまいます．注意が必要ですね．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int flag&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string flag&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool flag&amp;#34;&lt;/span&gt;)
	)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-flag0.go -bool false -int &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; -str abc &lt;span style=&#34;color:#75715e&#34;&gt;# falseを含むそれ以降が全て非フラグで渡されたコマンドライン引数として扱われる&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; default true 
$ go run with-flag0.go -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -int &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; -str abc
&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; abc true
$ go run with-flag0.go -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false -int &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; -str abc
&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt; abc false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに&lt;code&gt;-h&lt;/code&gt;でヘルプを表示してくれます．賢いですね．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run with-flag0.go -h
Usage of /var/folders/.../with-flag0:
  -bool
    	bool flag
  -int int
    	int flag
  -str string
    	string flag &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
exit status &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;コマンドライン引数の個数を数える&#34;&gt;コマンドライン引数の個数を数える&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NArg()&lt;/code&gt;で非フラグなものを，&lt;code&gt;NFlag()&lt;/code&gt;でフラグなものをカウントできます．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int flag&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string flag&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bool flag&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;non flag:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NArg&lt;/span&gt;())
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NFlag&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go run flag-test.go -int &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -str foo -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true a b
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
$ go run flag-test.go -int &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -str foo -bool true a b
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
$ go run flag-test.go -bool true -int &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -str foo a b
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
$ go run flag-test.go a b c -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -str foo
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
$ go run flag-test.go -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -str foo a b c
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
$ go run flag-test.go a b c
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
$ go run flag-test.go -bool&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -str foo
non flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
flag: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>HugoとGitHub Pagesでブログを作ってみた！</title>
      <link>/ja/post/about-this-site/</link>
      <pubDate>Fri, 25 Oct 2019 17:21:38 +0900</pubDate>
      <guid>/ja/post/about-this-site/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近はもっぱら卒論の実装ばかりやっています，zakです．&lt;/p&gt;
&lt;p&gt;プログラム書くのって難しいですよね．僕にとってはとても難しいので，わからないことがあったらデキる人のブログを参考にさせていただいたりしています．
そんな中で，自分もコードを書くことが増えてきて，そこで得た知識をなんらかの形で発信できないかなと思って，このブログを思いつきで始めました．&lt;/p&gt;
&lt;h2 id=&#34;採用技術&#34;&gt;採用技術&lt;/h2&gt;
&lt;p&gt;このブログはサイトジェネレータとしてHugo，ホスティングサービスとしてGitHub Pagesを採用しています．&lt;/p&gt;
&lt;p&gt;HugoはGolangで記述されたオープンソースの静的サイトジェネレーターです．設定をtomlで書いて，記事をMarkdownで書いて，それをHugoがHTMLその他ファイルに爆速でしたためてくれます．真面目にウェブサイトを作ろうとすると，「書きにくいHTMLで文章を書いて，CSSで見栄えを整えて」という感じで作っていくことになります．HTMLってあんまり洗練されていなくて人間にとっては読みずらいですよね．一方でMarkdownは文法が簡単なので，箇条書きでメモってるぐらいの感覚で構造を持った文章が書けてしまいます．Hugoを使うことで，サイト作成者はMarkdownというわかりやすい文法で記事を書くことができ，本来の仕事に専念できるわけです．&lt;/p&gt;
&lt;p&gt;Hugoのいいところはそれだけではありません．Hugoはその便利さから，多くのユーザーから愛されていて，そのユーザーらがそれぞれ美しいデザインテーマを公開してくれています．どれもセンスが良く，機能面でも充実しています．このテーマはオープンソースで公開されているので，カスタマイズも簡単です．そこらへんのブログサービスを利用すると，テーマがどれも陳腐で不満ですよね．&lt;/p&gt;
&lt;p&gt;今回はMarkdownで記事が執筆できるところとHugoで用いることができるAcademicというテーマが気に入ったので，Hugoを使うことにしました．&lt;/p&gt;
&lt;p&gt;GitHub Pagesは，GitHubが提供している静的サイトのホスティングサービスです．GitHubのアカウントさえあれば，誰でも静的なサイトを公開することができます．何より無料なので，これを使わない手はありません．サイトのソースコードをGitHubで管理しつつ公開もできちゃうなんて，GitHubは太っ腹ですね．&lt;/p&gt;
&lt;p&gt;GitHub Pagesの他にもホスティングサービスはありますが，ソースコード管理と一緒にホスティングできるところが便利だと思ったので採用しました．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;気が向いたら，もうちょっと追記します 🙇‍♂️&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>🚀最初の投稿</title>
      <link>/ja/post/first-post/</link>
      <pubDate>Fri, 25 Oct 2019 17:07:09 +0900</pubDate>
      <guid>/ja/post/first-post/</guid>
      <description>&lt;h1 id=&#34;ご挨拶&#34;&gt;ご挨拶&lt;/h1&gt;
&lt;p&gt;はじめまして．技術ブログ始めてみました．ぼちぼち投稿します 👍&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
