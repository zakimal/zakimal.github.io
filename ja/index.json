[{"authors":["admin"],"categories":null,"content":"はじめまして！zak です．\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/ja/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ja/authors/admin/","section":"authors","summary":"はじめまして！zak です．","tags":null,"title":"尾崎 耀一 (@zak)","type":"authors"},{"authors":[],"categories":[],"content":"問題 $n$の階乗の末尾には$0$がいくつ並んでいるか．求めよ．\n答え よくある中学受験問題．素因数分解したときに$2$より$5$のほうが数が多いので，$5$の個数を数えれば良い．\ndef factorial_zeros(n): def factor_of_5(n): count = 0 while n % 5 == 0: count += 1 n = n / 5 return count ans = 0 for i in range(1, n + 1): ans += factor_of_5(i) return ans $5$の累乗の倍数がそれぞれ何個あるかを計算して足し上げてもいい．\ndef factorial_zeros(n): ans = 0 i = 5 while i \u0026lt;= n: ans += n // i i *= 5 return ans 階段を縦に見てるか，横に見てるかの違い．\n","date":1616834523,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616834523,"objectID":"f3e72ab9ced22510b83986aa34d7342f","permalink":"/ja/post/how-many-zeros-in-suffix-of-factorial/","publishdate":"2021-03-27T17:42:03+09:00","relpermalink":"/ja/post/how-many-zeros-in-suffix-of-factorial/","section":"post","summary":"問題 $n$の階乗の末尾には$0$がいくつ並んでいるか．求めよ． 答え よくある中学受験問題．素因数分解したときに$2$より$5$のほうが数が多い","tags":[],"title":"How Many Zeros in Suffix of Factorial","type":"post"},{"authors":[],"categories":[],"content":"問題 一時変数を使わずに整数aとbを交換せよ．\n答え a = 10 b = 3 print(a, b) # =\u0026gt; 10 3 a = a - b b = a + b # (1) a = b - a # (2) print(a, b) # =\u0026gt; 3, 10 a，bを交換前の数字とすると，\n (1)：(a - b) + b = a (2)：a - (a - b) = b  xorを使う方が汎用性は高そう．a xor a = 0，0 xor a = aという性質を利用する．\na = 10 b = 3 print(a, b) # =\u0026gt; 10 3 a = a ^ b b = a ^ b # (1) a = a ^ b # (2) print(a, b) # =\u0026gt; 3, 10 a，bを交換前の数字とすると，\n (1)：(a xor b) xor b = a xor (b xor b) = a xor 0 = a (2)：(a xor b) xor a = b xor (a xor a) = b xor 0 = b  ","date":1616833051,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616833051,"objectID":"14380f7806db8087874d07ff97a98bd9","permalink":"/ja/post/swap-two-intergers-without-additional-mrmory/","publishdate":"2021-03-27T17:17:31+09:00","relpermalink":"/ja/post/swap-two-intergers-without-additional-mrmory/","section":"post","summary":"問題 一時変数を使わずに整数aとbを交換せよ． 答え a = 10 b = 3 print(a, b) # =\u0026gt; 10 3 a = a - b b = a + b # (1) a = b - a # (2) print(a, b) # =\u0026gt; 3, 10 a，bを交換前の数","tags":[],"title":"Swap Two Intergers Without Additional Mrmory","type":"post"},{"authors":[],"categories":[],"content":"問題 Listみたいなデータ構造Listyを考える．Listyは次のように定義される．\nclass Listy: def __init__(self, lst): lst.sort() self.lst = lst def at(self, idx): if idx \u0026lt; len(lst): return self.lst[idx] else: return -1 基本的にListyは要素を昇順に格納しているListのようなものである．ここでListyにはその長さを返すメソッドが用意されていない．つまりListyの長さを直接知ることはできない．一方で，Listy.at(idx)メソッドが用意されており，idxの位置に存在する要素を$O(1)$で返すことができる．もしidxがListyの範囲を超えると-1を返す．\nあるListyとkeyを与えられたとき，keyがListy内に存在するかを判定し，存在するならその位置（0-オリジン）を返す関数を書け．\n答え 「要素が昇順に並んでいる」ので二分探索を使いたいところ．Listyの全長を知ることができないので[2^i, 2^(i + 1))で探索範囲を広げながら二分探索する．\nlisty = Listy([0, 4, 2, 5, 7, 3, 9 ,13, 15]) def search(listy, key): # listyの[left:right)から要素がkey以上となる最小の位置を二分探索 def binary_search(listy, key, left, right): ng = left - 1 ok = right def is_ok(mid): return key \u0026lt;= listy.at(mid) while 1 \u0026lt; abs(ok - ng): mid = (ok + ng) // 2 if is_ok(mid): ok = mid else: ng = mid # okの位置にある要素がkeyと等しければ発見成功 found = listy.at(ok) == key return found, ok right = 1 while listy.at(right) != -1 and listy.at(right) \u0026lt; key: right *= 2 left = right // 2 return binary_search(listy, key, left, right) print(search(listy, -1)) # =\u0026gt; (False, 0) print(search(listy, 0)) # =\u0026gt; (True, 0) print(search(listy, 2)) # =\u0026gt; (True, 1) print(search(listy, 3)) # =\u0026gt; (True, 2) print(search(listy, 13)) # =\u0026gt; (True, 7) print(search(listy, 15)) # =\u0026gt; (True, 8) print(search(listy, 16)) # =\u0026gt; (False, 16) ","date":1616825179,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616825179,"objectID":"54dcaf3b852db6e3e4be055da4938704","permalink":"/ja/post/find-key-in-listy/","publishdate":"2021-03-27T15:06:19+09:00","relpermalink":"/ja/post/find-key-in-listy/","section":"post","summary":"問題 Listみたいなデータ構造Listyを考える．Listyは次のように定義される． class Listy: def __init__(self, lst): lst.sort() self.lst = lst def at(self, idx): if idx \u0026lt; len(lst): return self.lst[idx] else: return -1 基本的にLis","tags":[],"title":"Find Key in Listy","type":"post"},{"authors":[],"categories":[],"content":"問題 共に昇順に整列された配列aと配列bが与えられる．aにはbの要素を全て格納するほどのバッファが存在する．このとき，追加のメモリを使用せずにaとbを昇順に整列された状態にマージせよ．\n答え 後ろからやる．\na = [1, 3, 4, 8, 10, -1, -1, -1, -1] b = [2, 7, 11, 14] def sorted_merge(a, b, tail_a, tail_b): idx_a = tail_a - 1 idx_b = tail_b - 1 idx_merged = tail_a + tail_b - 1 while 0 \u0026lt;= idx_b: if 0 \u0026lt;= idx_a and b[idx_b] \u0026lt; a[idx_a]: a[idx_merged] = a[idx_a] idx_a -= 1 else: a[idx_merged] = b[idx_b] idx_b -= 1 idx_merged -= 1 sorted_merge(a, b, 5, 4) print(a) # =\u0026gt; [1, 2, 3, 4, 7, 8, 10, 11, 14] ","date":1616821318,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616821318,"objectID":"250dc9ebefb7c7972f907d6f1af85c6a","permalink":"/ja/post/merge-two-sorted-array-in-place/","publishdate":"2021-03-27T14:01:58+09:00","relpermalink":"/ja/post/merge-two-sorted-array-in-place/","section":"post","summary":"問題 共に昇順に整列された配列aと配列bが与えられる．aにはbの要素を全て格納するほどのバッファが存在する．このとき，追加のメモリを使用せずに","tags":[],"title":"Merge Two Sorted Array in Place","type":"post"},{"authors":[],"categories":[],"content":"問題 手元に$1$円硬貨，$5$円硬貨，$10$円硬貨，$25$円硬貨が無限に存在する．$n$円支払うときの，硬貨の出し方の総数はいくらか．\n答え coins = [25, 10, 5, 1] def make_change(n, coins): # remain円をcoins[pos:]を使って支払うときの支払い方の総数 def rec(coins, pos, remain): if pos == len(coins) - 1: return 1 # remain円を1円硬貨で支払う方法は「remain枚の1円硬貨」の1通り ways = 0 i = 0 while i * coins[pos] \u0026lt;= remain: ways += rec(coins, pos + 1, remain - i * coins[pos]) i += 1 return ways return rec(coins, 0, n) 実際の支払い方を保存しておくこともできる．\ncoins = [25, 10, 5, 1] def make_change(n, coins): payments = [] # remain円をcoins[pos:]を使って支払うときの支払い方の総数 def rec(remain, pos, sofar): if pos == len(coins) - 1: payments.append(sofar + [1 for _ in range(remain)]) return 1 # remain円を1円硬貨で支払う方法は「remain枚の1円硬貨」の1通り ways = 0 i = 0 while i * coins[pos] \u0026lt;= remain: ways += rec(remain - i * coins[pos], pos + 1, sofar + [coins[pos] for _ in range(i)]) i += 1 return ways ans = rec(n, 0, []) return ans, payments ways, payments = make_change(100, coins) print(\u0026#34;ways:\u0026#34;, ways) for i, payment in enumerate(payments): print(\u0026#34;{}: coin usage: {}, payment: {}\u0026#34;.format(i, len(payment), payment)) rec()の求めるものを「remain円をcoins[:pos]を使って支払うときの支払い方の総数」とした方が自然．\ndef make_change(n, coins): # remain円をcoins[:pos+1]を使って支払うときの支払い方の総数 def rec(remain, pos): if pos == 0: return 1 ways = 0 i = 0 while i * coins[pos] \u0026lt;= remain: ways += rec(remain - i * coins[pos], pos - 1) i += 1 return ways coins.sort() # coins = [1, ...] return rec(n, len(coins) - 1) TODO：メモ化\n","date":1616813821,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616813821,"objectID":"8cb4740f699e990b38869e6f217b92b0","permalink":"/ja/post/coin-change/","publishdate":"2021-03-27T11:57:01+09:00","relpermalink":"/ja/post/coin-change/","section":"post","summary":"問題 手元に$1$円硬貨，$5$円硬貨，$10$円硬貨，$25$円硬貨が無限に存在する．$n$円支払うときの，硬貨の出し方の総数はいくらか． 答","tags":[],"title":"Coin Change","type":"post"},{"authors":[],"categories":[],"content":"問題 $n$個の()を，全ての開きカッコと閉じカッコの対応が正しいように並べたときの全通りを求めよ．\n答え def valid_parentheses(n): ret = [] def rec(left, right, sofar): if left == 0 and right == 0: ret.append(sofar) return if 0 \u0026lt; left: rec(left - 1, right, sofar + \u0026#34;(\u0026#34;) if left \u0026lt; right: rec(left, right - 1, sofar + \u0026#34;)\u0026#34;) rec(n, n, \u0026#34;\u0026#34;) return ret print(valid_parentheses(3)) # =\u0026gt; [\u0026#39;((()))\u0026#39;, \u0026#39;(()())\u0026#39;, \u0026#39;(())()\u0026#39;, \u0026#39;()(())\u0026#39;, \u0026#39;()()()\u0026#39;] ","date":1616813465,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616813465,"objectID":"f8543b124a997a9e2ede3523719e27c3","permalink":"/ja/post/valid-parentheses/","publishdate":"2021-03-27T11:51:05+09:00","relpermalink":"/ja/post/valid-parentheses/","section":"post","summary":"問題 $n$個の()を，全ての開きカッコと閉じカッコの対応が正しいように並べたときの全通りを求めよ． 答え def valid_parentheses(n): ret = [] def rec(left, right, sofar): if left == 0 and right == 0: ret.append(sofar) return","tags":[],"title":"Valid Parentheses","type":"post"},{"authors":[],"categories":[],"content":"問題 *を使わずに掛け算を実装せよ．\n答え def product(a, b): smaller = a if a \u0026lt; b else b larger = b if a \u0026lt; b else a def helper(smaller, larger): # sum up `larger` in `smaller` times if smaller == 0: # 0 x larger = 0 return 0 if smaller == 1: # 1 x larger = larger return larger s = smaller \u0026gt;\u0026gt; 1 half = helper(s, larger) if smaller \u0026amp; 1: return half + half + larger else: return half + half return helper(smaller, larger) メモ化再帰でもっと効率良くできる．\ndef product(a, b): smaller = a if a \u0026lt; b else b larger = b if a \u0026lt; b else a memo = [-1] * (smaller + 1) def helper(smaller, larger, memo): if smaller == 0: return 0 if smaller == 1: return larger if memo[smaller] != -1: return memo[smaller] s = smaller \u0026gt;\u0026gt; 1 half = helper(s, larger, memo) ret = 0 if smaller \u0026amp; 1: ret = half + half + larger else: ret = half + half memo[smaller] = ret return ret return helper(smaller, larger, memo) ","date":1616772863,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616772863,"objectID":"16bed3c941f6fa77ac07a0f4a405cbff","permalink":"/ja/post/recursive-multiply/","publishdate":"2021-03-27T00:34:23+09:00","relpermalink":"/ja/post/recursive-multiply/","section":"post","summary":"問題 *を使わずに掛け算を実装せよ． 答え def product(a, b): smaller = a if a \u0026lt; b else b larger = b if a \u0026lt; b else a def helper(smaller, larger): # sum up `larger` in `smaller` times if smaller == 0: # 0 x larger = 0 return 0 if smaller == 1: # 1 x larger","tags":[],"title":"Recursive Multiply","type":"post"},{"authors":[],"categories":[],"content":"問題 すべての要素が互いに異なりかつ昇順に整列された配列$a$が与えられる．ここで\n$$ a_i = i $$\nつまり，配列$a$の$i$番目の要素が$i$であるような$i$を magic index と呼ぶことにする．\n配列が与えられたとき，magic index を求めよ．\n答え すべての要素を一つずつ見ながら magic index であるかを確認することで求まる．$O(n)$\ndef get_magic_index(lst): ret = [] for idx, ele in enumerate(lst): if ele == idx: ret.append(idx) return ret だが，これでは「与えられる配列が昇順になっている」という条件を使えていない．\n「昇順」と来たら，二分探索．$O(\\log n)$\ndef get_magic_index(lst): def rec(lst, left, right): if right \u0026lt; left: return -1 mid = (left + right) // 2 if lst[mid] == mid: return mid if lst[mid] \u0026lt; mid: return rec(lst, mid + 1, right) if mid \u0026lt; lst[mid]: return rec(lst, left, mid - 1) return rec(lst, 0, len(lst) - 1) ","date":1616766549,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616766549,"objectID":"0ae980ace738bac000014c4fbafbc189","permalink":"/ja/post/magic-index/","publishdate":"2021-03-26T22:49:09+09:00","relpermalink":"/ja/post/magic-index/","section":"post","summary":"問題 すべての要素が互いに異なりかつ昇順に整列された配列$a$が与えられる．ここで $$ a_i = i $$ つまり，配列$a$の$i$番目の要素が$i$である","tags":[],"title":"Magic Index","type":"post"},{"authors":[],"categories":[],"content":"問題 $n$段の階段がある．おじさんは筋トレにハマっており，$i$段飛ばしが好きだ．現状おじさんは$i = 1, 2, 3$の$i$段飛ばしができる．おじさんが$n$段の階段をのぼる方法は全部で何通りあるか．\n答え def solve(n): if n \u0026lt; 0: return 0 if n == 0: return 1 return solve(n - 1) + solve(n - 2) + solve(n - 3) メモ化再帰\ndef solve(n, memo): if n \u0026lt; 0: return 0 if n == 0: return 1 if memo[n] != -1: return memo[n] ret = solve(n - 1, memo) + solve(n - 2, memo) + solve(n - 3, memo) memo[n] = ret return ret ","date":1616764218,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616764218,"objectID":"3e19f874f4725b18fdb451c30dfef448","permalink":"/ja/post/how-many-ways-to-run-up-the-stairs/","publishdate":"2021-03-26T22:10:18+09:00","relpermalink":"/ja/post/how-many-ways-to-run-up-the-stairs/","section":"post","summary":"問題 $n$段の階段がある．おじさんは筋トレにハマっており，$i$段飛ばしが好きだ．現状おじさんは$i = 1, 2, 3$の$i$段飛ばしができる．おじ","tags":[],"title":"How Many Ways to Run Up the Stairs?","type":"post"},{"authors":[],"categories":[],"content":"問題 整数$A$を整数$B$に変換するのに必要なビット反転の回数を計算せよ．\n答え def count(a, b): ret = 0 c = a ^ b # 異なる桁だけ1が立つ while c != 0: ret += 1 if c \u0026amp; 1 else 0 c = c \u0026gt;\u0026gt; 1 return ret こうも書ける．\ndef count(a, b): ret = 0 c = a ^ b while c != 0: ret += 1 c = c \u0026amp; (c - 1) # 右端の1が0になる return ret ","date":1616753682,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616753682,"objectID":"f0bb68c2d1ed64f40ce2ef12445d52ad","permalink":"/ja/post/convert-a-number-to-a-number/","publishdate":"2021-03-26T19:14:42+09:00","relpermalink":"/ja/post/convert-a-number-to-a-number/","section":"post","summary":"問題 整数$A$を整数$B$に変換するのに必要なビット反転の回数を計算せよ． 答え def count(a, b): ret = 0 c = a ^ b # 異なる桁だけ1が立つ while c != 0: ret += 1 if c","tags":[],"title":"Convert a Number to a Number","type":"post"},{"authors":[],"categories":[],"content":"問題 ビット列の指定された位置に別のビット列を挿入せよ．\nA = 100000000 の 2桁目から6桁目にB = 101101を挿入 -\u0026gt; 101011010 答え # aのi桁目からj桁目にbを挿入 def insert(a, b, i, j): ones = ~0 # 全部1 left = ones \u0026lt;\u0026lt; (j + 1) right = (1 \u0026lt;\u0026lt; i) - 1 mask = left | right a \u0026amp;= mask b \u0026lt;\u0026lt;= i return a | b (1 \u0026lt;\u0026lt; i) - 1：1が$i$個右端に並ぶ\n","date":1616753171,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616753171,"objectID":"40efc95fa2c8407a0c0180f5d484f27c","permalink":"/ja/post/insert-a-number-in-a-number/","publishdate":"2021-03-26T19:06:11+09:00","relpermalink":"/ja/post/insert-a-number-in-a-number/","section":"post","summary":"問題 ビット列の指定された位置に別のビット列を挿入せよ． A = 100000000 の 2桁目から6桁目にB = 101101を挿入 -\u0026gt; 101011010 答え # aのi桁目からj桁目にbを挿","tags":[],"title":"Insert a Number in a Number","type":"post"},{"authors":[],"categories":[],"content":"部分和問題 配列lstと整数Wが与えられたとき，lstの部分配列の和がWになることような部分配列は存在するか．\n解法 再帰で解く．\ndef check(lst, W): def rec(pos, sofar): if pos == len(lst): return sofar == W if rec(pos + 1, sofar + lst[pos]): return True if rec(pos + 1, sofar): return True return False return rec(0, 0) def check(lst, W): def rec(pos, remain): if pos == len(lst): return remain == 0 if rec(pos + 1, remain - lst[pos]): return True if rec(pos + 1, remain): return True return False return rec(0, W) def check(lst, W): memo = [[-1 for _ in range(len(lst))] for _ in range(W)] def rec(pos, remain): if memo[remain][pos] != -1: return memo[remain][pos] ret = 0 if pos == 0: return remain == 0 if rec(pos - 1, remain - lst[pos]): ret = 1 if rec(pos - 1, remain): ret = 1 memo[remain][pos] = ret return ret return rec(N, W) ビット全探索\ndef check(lst, W): for i in range(1 \u0026lt;\u0026lt; len(lst)): sofar = 0 for j in range(len(lst)): if i \u0026amp; (1 \u0026lt;\u0026lt; j): sofar += lst[j] if sofar == W: return True return False ","date":1616686897,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616686897,"objectID":"41f207d688c7f164a2f60a05b1bed4c9","permalink":"/ja/post/sub-of-subarray/","publishdate":"2021-03-26T00:41:37+09:00","relpermalink":"/ja/post/sub-of-subarray/","section":"post","summary":"部分和問題 配列lstと整数Wが与えられたとき，lstの部分配列の和がWになることような部分配列は存在するか． 解法 再帰で解く． def check(lst, W): def rec(pos, sofar): if pos","tags":[],"title":"Sub of Subarray","type":"post"},{"authors":[],"categories":[],"content":"Longest Increasing Subarray：最長増加部分列問題 長さ$N$の数列が与えられたとき，そのうちいくつかの項を順番を変えずに取り出して部分列を作る．これら部分列のうち，それが増加列であるようなものの中で，最大の長さを求めよ．\n[3, 5, 2, 6, 7, 1, 4] -\u0026gt; [3, 5, 6, 7] (len = 4) 解法 $O(2^N \\times N)$な力技 考えられる部分列を全て列挙し，それぞれが増加列であるかを調べる．部分列の列挙に$O(2^N)$，ある部分列が増加列であるかを調べるのに$O(N)$かかる．\n再帰で全探索．\nlst = [3, 5, 2, 6, 7, 1, 4] # =\u0026gt; 4 def LIS(lst): subs = [] def rec(pos, sofar): if pos == len(lst): subs.append(sofar) return rec(pos + 1, sofar) rec(pos + 1, sofar + [lst[pos]]) rec(0, []) def is_increasing(lst): for i in range(len(lst) - 1): if lst[i] \u0026gt; lst[i + 1]: return False return True ans = 0 for sub in subs: if is_increasing(sub): ans = max(ans, len(sub)) return ans print(LIS(lst)) ビット全探索．\nlst = [3, 5, 2, 6, 7, 1, 4] # =\u0026gt; 4 def LIS(lst): ans = 0 def is_increasing(lst): for i in range(len(lst) - 1): if lst[i] \u0026gt; lst[i + 1]: return False return True for i in range(1 \u0026lt;\u0026lt; len(lst)): sub = [] for j in range(len(lst)): if i \u0026amp; (1 \u0026lt;\u0026lt; j): sub.append(lst[j]) if is_increasing(sub): ans = max(ans, len(sub)) return ans print(LIS(lst)) $O(N^2)$で解く DP dp[i]を「lst[i]が右端となるような増加部分列の最大の長さ」とすると，dp[i+1]は「j \u0026lt; i + 1かつlst[j] \u0026lt;= lst[i + 1]なjについてのdp[j]の最大値 + 1」と更新できる．\nlst = [3, 5, 2, 6, 7, 1, 4] # =\u0026gt; 4 def LIS(lst): # dp[i]: lst[i]が右端となるような増加部分列の最大の長さ dp = [1 for _ in range(len(lst))] for i in range(len(lst)): for j in range(i): if lst[j] \u0026lt;= lst[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) print(LIS(lst)) $O(N^2)$で解く DP 一つ前のと添字を逆転させる．つまり，dp[i]を「長さi + 1の増加部分列のうちの最小の右端」とする．dp[i+1]はdp[i]より大きい最小のlst要素．\nlst = [3, 5, 2, 6, 7, 1, 4] # =\u0026gt; 4 def LIS(lst): # dp[i]: 長さがi+1の増加部分列の最小の右端 INF = float(\u0026#39;inf\u0026#39;) dp = [INF for _ in range(len(lst))] for i in range(len(lst)): for j in range(len(dp)): if j == 0 or dp[j - 1] \u0026lt; lst[i]: dp[j] = min(dp[j], lst[i]) ans = 0 for i in range(len(dp)): if dp[i] \u0026lt; INF: ans = i ans += 1 return ans print(LIS(lst)) $O(N \\log N)$で解く DP dp[j]ごとにそこに入れるべきlst要素を決めるのでなくて，lst要素ごとにdpのどこに入れるべきなのかを二分探索で計算する．\nlst = [3, 5, 2, 6, 7, 1, 4] # =\u0026gt; 4 from bisect import bisect_left def LIS(lst): # dp[i]: 長さがi+1の増加部分列の最小の右端 INF = float(\u0026#39;inf\u0026#39;) dp = [INF for _ in range(len(lst))] for i in range(len(lst)): dp[bisect_left(dp, lst[i])] = lst[i] return bisect_left(dp, INF) print(LIS(lst)) ","date":1616648306,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616648306,"objectID":"da8a2ba3a1373b6665b60798ca85e843","permalink":"/ja/post/longest-increasing-subarray/","publishdate":"2021-03-25T13:58:26+09:00","relpermalink":"/ja/post/longest-increasing-subarray/","section":"post","summary":"Longest Increasing Subarray：最長増加部分列問題 長さ$N$の数列が与えられたとき，そのうちいくつかの項を順番を変えずに取り出して部分列を作る．これら","tags":[],"title":"Longest Increasing Subarray","type":"post"},{"authors":[],"categories":[],"content":"辞書順で直後の順列を求めたい 長さ$n$の配列から$n$個の要素を取り出す順列を考える．ある並びを与えられたときに，順列を辞書順に並べたときの直後の並びを求めたい．\n[0, 1, 2, 3] -\u0026gt; [0, 1, 3, 2] [0, 1, 2, 5, 3, 3, 0] -\u0026gt; [0, 1, 3, 0, 2, 3, 5] 答え def next_permutation(lst): i = len(lst) - 1 while 0 \u0026lt; i and lst[i-1] \u0026gt;= lst[i]: i -= 1 if i == 0: return lst.reverse() i -= 1 pivot = lst[i] j = len(lst) - 1 while pivot \u0026gt;= lst[j]: j -= 1 lst[i], lst[j] = lst[j], lst[i] lst[i + 1:] = reversed(lst[i + 1:]) return lst ref: https://www.nayuki.io/page/next-lexicographical-permutation-algorithm\n","date":1616600916,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616600916,"objectID":"2a5e4f10921ca3dbfad4a85c6c86bc10","permalink":"/ja/post/next-lexicographical-permutation/","publishdate":"2021-03-25T00:48:36+09:00","relpermalink":"/ja/post/next-lexicographical-permutation/","section":"post","summary":"辞書順で直後の順列を求めたい 長さ$n$の配列から$n$個の要素を取り出す順列を考える．ある並びを与えられたときに，順列を辞書順に並べたときの","tags":[],"title":"Next Lexicographical Permutation","type":"post"},{"authors":[],"categories":[],"content":"Maximum Subarray Problem：最大部分配列問題 整数配列arrを与えられる．arrの連続する部分配列の和のうち最大となるものの値を求めよ．\n解法 いくつかやり方はある．\n$O(n^3)$な力技 部分配列の候補となる添字の組み合わせ全部に対して，その部分配列の和を実際に計算して最大値を出す．\nlst = [-5, -1, 6, 4, 9, -6, -7] # ans = 19 # [2, 5] # index def solve(lst): ans = - 10 ** 9 idx = (-1, -1) for i in range(len(lst)): for j in range(i+1, len(lst)+1): s = 0 for k in range(i, j): s += lst[k] if ans \u0026lt; s: idx = (i, j) ans = s return ans, idx print(solve(lst)) $O(n^2)$な力技 累積和を計算しておけばlst[i:j]の和を$O(1)$で計算できるので全体として$O(n^2)$にできる．\nlst = [-5, -1, 6, 4, 9, -6, -7] # ans = 19 # [2, 5] # index def solve(lst): accum = [0] for num in lst: accum.append(accum[-1] + num) print(accum) ans = - 10 ** 9 idx = (-1, -1) for i in range(len(lst)): for j in range(i+1, len(lst)+1): s = accum[j] - accum[i] if ans \u0026lt; s: idx = (i, j) ans = s return ans, idx print(solve(lst)) $O(n)$な賢いやり方 数列$a$の部分和を\n$$ sum(i, j) = a_i + a_{i+1} + \u0026hellip; + a_{j-1} + a_j $$\nとする．ここで最後の要素が$a_j$であるような部分配列の和の最大値を$s_j$とすると，$s_j$は\n$$ s_j = max_{i \u0026lt; j} sum(i, j) $$\n最終的に求めたい値は\n$$ max_{j} s_j $$\nここで，$s_{j+1}$は，\n$$ s_{j+1} = max(s_j + a_{j+1}, a_{j+1}) $$\n$a_{j+1}$と比べる理由は，「$a_{j+1}$のみからなる列」も「最後の要素が$a_{j+1}$で終わる部分列」であり，その要素の和は$a_{j+1}$だから．\nlst = [-5, -1, 6, 4, 9, -6, -7] # ans = 19 # [2, 5] # index def solve(lst): # dp[i]: 最後の要素がlst[i]であるような部分列の和の最大値 dp = [lst[0]] for i in range(len(lst)-1): dp.append(max(dp[i] + lst[i+1], lst[i+1])) return max(dp) print(solve(lst)) dp[i+1]を求めるのにdp[i]しか使わないので配列も使わない実装も可能．\nlst = [-5, -1, 6, 4, 9, -6, -7] # ans = 19 # [2, 5] # index def solve(lst): ans = lst[0] for i in range(len(lst)-1): ans = max(ans, max(ans + lst[i+1], lst[i+1])) return ans print(solve(lst)) ","date":1616595565,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616595565,"objectID":"f85097f6a216a0e1ddbec9a574f758f8","permalink":"/ja/post/max-subarray-problem-by-kadane-algorithm/","publishdate":"2021-03-24T23:19:25+09:00","relpermalink":"/ja/post/max-subarray-problem-by-kadane-algorithm/","section":"post","summary":"Maximum Subarray Problem：最大部分配列問題 整数配列arrを与えられる．arrの連続する部分配列の和のうち最大となるものの値を求めよ． 解法 いくつかや","tags":[],"title":"Max Subarray Problem by Kadane Algorithm","type":"post"},{"authors":[],"categories":[],"content":"順列・組み合わせを Python で求めたい Python は偉いので，itertoolsという便利ライブラリを使えばうんと効率の良い実装が得られる．今回は敢えてitertoolsを使わずに書いてみる．要するに実装の練習．\n取り出す要素数を固定にした順列・組み合わせの実装を考える $n$個のものから$r$個取り出すことをいきなり考えると混乱するので，とりあえず$n$個のものから$3$個取り出すことを考える．\n重複を許す順列 重複を許す順列は$r$回ネストしたforに等しい．\ndef repeated_permutation(lst): ret = [] for i in range(len(lst)): for j in range(len(lst)): for k in range(len(lst)): ret.append([lst[i], lst[j], lst[k]]) return ret 順列 一度取り出したものは次に取り出せない．\ndef permutation(lst): def exclude(lst, idx): return lst[:idx] + lst[idx+1:] ret = [] for i in range(len(lst)): for j in range(len(lst)-1): for k in range(len(lst)-2): ex_i = exclude(lst, i) ex_ij = exclude(ex_i, j) ret.append([lst[i], ex_i[j], ex_ij[k]]) return ret 重複を許す組み合わせ 000 -\u0026gt; 001 -\u0026gt; 002 -\u0026gt; 010 -\u0026gt; 011 -\u0026gt; \u0026hellip;\ndef repeated_combination(lst): ret = [] for i in range(len(lst)): for j in range(i, len(lst)): for k in range(j, len(lst)): ret.append([lst[i], lst[j], lst[k]]) return ret 組み合わせ 一度取り出したものは次に取り出せない．\ndef combination(lst): def exclude(lst, idx): return lst[:idx] + lst[idx+1:] ret = [] for i in range(len(lst)): for j in range(i, len(lst)-1): for k in range(j, len(lst)-2): ex_i = exclude(lst, i) ex_ij = exclude(ex_i, j) ret.append([lst[i], ex_i[j], ex_ij[k]]) return ret こうとも言える．\ndef combination(lst): ret = [] for i in range(len(lst)): for j in range(i+1, len(lst)): for k in range(j+1, len(lst)): ret.append([lst[i], lst[j], lst[k]]) return ret 取り出す要素数を$r$個にした順列・組み合わせの実装を考える $r$回のネストを再帰関数で書く．\n重複を許す順列 def repeated_permutation(lst, r): if r \u0026lt;= 0: return [] ret = [] def _recurse(lst, r, sofar): if r == 0: ret.append(sofar) return for i in range(len(lst)): _recurse(lst, r-1, sofar + [lst[i]]) _recurse(lst, r, []) return ret 順列 def permutation(lst, r): if r \u0026lt;= 0: return [] ret = [] def _recurse(lst, r, sofar): if r == 0: ret.append(sofar) return for i in range(len(lst)): _recurse(lst[i:] + lst[i+1:], r-1, sofar + [lst[i]]) _recurse(lst, r, []) return ret 重複を許す組み合わせ def repeated_combination(lst, r): if r \u0026lt;= 0: return [] ret = [] def _recurse(lst, r, sofar, start_idx): if r == 0: ret.append(sofar) return for i in range(start_idx, len(lst)): _recurse(lst, r-1, sofar + [lst[i]], i) _recurse(lst, r, [], 0) return ret 組み合わせ def combination(lst, r): if r \u0026lt;= 0: return 0 ret = [] def _recurse(lst, r, sofar, start_idx): if r == 0: ret.append(sofar) return for i in range(start_idx, len(lst)): _recurse(lst[:i] + lst[i+1:], r-1, sofar + [lst[i]], i) _recurse(lst, r, [], 0) return ret def combination(lst, r): if r \u0026lt;= 0: return 0 ret = [] def _recurse(lst, r, sofar, start_idx): if r == 0: ret.append(sofar) return for i in range(start_idx, len(lst)): _recurse(lst, r-1, sofar + [lst[i]], i+1) _recurse(lst, r, [], 0) return ret ","date":1616591859,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616591859,"objectID":"d7fb34de5b1d350aaa11070bda41065e","permalink":"/ja/post/permutation-combination-in-python/","publishdate":"2021-03-24T22:17:39+09:00","relpermalink":"/ja/post/permutation-combination-in-python/","section":"post","summary":"順列・組み合わせを Python で求めたい Python は偉いので，itertoolsという便利ライブラリを使えばうんと効率の良い実装が得られる．今回は敢えてite","tags":[],"title":"Permutation and Combination in Python","type":"post"},{"authors":[],"categories":[],"content":"問題 数字を 2 進数表示にしなさい．\n答え 再帰で解く．\ndef num_to_bits(num): if 1 \u0026lt; num: return num_to_bits(num // 2) + str(num % 2) return str(num % 2) for num in range(10): print(\u0026#34;{}:{}\u0026#34;.format(num, num_to_bits(num))) 繰り返しで解く．\ndef num_to_bits(num): if num == 0: return 0 bits = \u0026#34;\u0026#34; while num: if num % 2: bits = \u0026#34;1\u0026#34; + bits else: bits = \u0026#34;0\u0026#34; + bits num \u0026gt;\u0026gt;= 1 return bits for num in range(10): print(\u0026#34;{}:{}\u0026#34;.format(num, num_to_bits(num))) ","date":1616590466,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616590466,"objectID":"460befaa4e473da3467577670375f20a","permalink":"/ja/post/binary-representation-of-a-given-number/","publishdate":"2021-03-24T21:54:26+09:00","relpermalink":"/ja/post/binary-representation-of-a-given-number/","section":"post","summary":"問題 数字を 2 進数表示にしなさい． 答え 再帰で解く． def num_to_bits(num): if 1 \u0026lt; num: return num_to_bits(num // 2) + str(num % 2) return str(num % 2) for num in range(10): print(\u0026#34;{}:{}\u0026#34;.format(num, num_to_bits(num))) 繰り返しで解く． def num_to_bits(num): if num == 0: return 0 bits = \u0026#34;\u0026#34; while num: if","tags":[],"title":"Binary Representation of a Given Number","type":"post"},{"authors":[],"categories":[],"content":"配列の部分配列を全部求める 要素数$n$の配列の部分配列を全部求めたい．部分配列の総数は$2^n$．\n[1, 2, 3] -\u0026gt; [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] 再帰で求める lst[i:]の部分配列のそれぞれにlst[i]が入る・入らないの 2 択．\nlst = [1, 2, 3] def subsets(lst): if len(lst) == 0: return [[]] x = subsets(lst[1:]) return x + [[lst[0]] + ele for ele in x] print(subsets(lst)) ビット全探索 000，001，010，011，100，101，110，111でどの要素を部分配列に入れるか入れないかを決める．\nlst = [1, 2, 3] def subsets(lst): ret = [] for i in range(1 \u0026lt;\u0026lt; len(lst)): sub = [] for j in range(len(lst)): if i \u0026amp; (1 \u0026lt;\u0026lt; j): sub.append(lst[j]) ret.append(sub) return ret print(subsets(lst)) ","date":1616588440,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616588440,"objectID":"ab5364f63ad4ac4cfc2ffbd5c1529f29","permalink":"/ja/post/all-subsets-from-a-list-in-two-ways/","publishdate":"2021-03-24T21:20:40+09:00","relpermalink":"/ja/post/all-subsets-from-a-list-in-two-ways/","section":"post","summary":"配列の部分配列を全部求める 要素数$n$の配列の部分配列を全部求めたい．部分配列の総数は$2^n$． [1, 2, 3] -\u0026gt; [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] 再帰で求","tags":[],"title":"All Subsets From a List in Two Ways","type":"post"},{"authors":[],"categories":[],"content":"この 60 問を Python で解く．\n01: Two Sum $O(n^2)$ではない答えにしたいので，どうするか．\n 答え class Solution: def twoSum(self, nums: List[int], target: int) -\u0026gt; List[int]: table = dict() for idx, num in enumerate(nums): complement = target - num if complement in table.keys(): return [idx, table[complement]] else: table[num] = idx  02: Add Two Numbers 再帰的に書く．再帰的に．\n 答え # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -\u0026gt; ListNode: def _recurse(l1: ListNode, l2: ListNode, carry: int) -\u0026gt; ListNode: # base case if l1 is None and l2 is None and carry == 0: return None val = carry if l1 is not None: val += l1.val if l2 is not None: val += l2.val result = ListNode(val=val%10, next=None) if l1 is not None or l2 is not None: next_l1 = None next_l2 = None if l1 is not None: next_l1 = l1.next if l2 is not None: next_l2 = l2.next next_carry = val // 10 result.next = _recurse(next_l1, next_l2, next_carry) return result return _recurse(l1, l2, 0)  03: Longest Substring Without Repeating Characters 題意は「与えられた文字列に含まれる，ユニークな文字による連続する部分文字列の中で，最長のものの長さを求めよ」\n 答え class Solution: def lengthOfLongestSubstring(self, s: str) -\u0026gt; int: if s == \u0026#34;\u0026#34;: return 0 table = dict() start_idx = 0 current_len = 0 max_len = 0 for current_idx, char in enumerate(s): if char in table.keys() and start_idx \u0026lt;= table[char]: start_idx = table[char] + 1 table[char] = current_idx current_len = current_idx - start_idx + 1 else: table[char] = current_idx current_len += 1 max_len = max(max_len, current_len) return max_len  04: ZigZag Conversion 観察する．\nrow = 0 | 0 -(+6)-\u0026gt; 6 row = 1 | 1 -(+4)-\u0026gt; 5 -(+2)-\u0026gt; 7 ... row = 2 | 2 -(+2)-\u0026gt; 4 -(+4)-\u0026gt; 8 10 row = 3 | 3 -(+6)-\u0026gt; 9  答え class Solution: def convert(self, s: str, numRows: int) -\u0026gt; str: if numRows == 1: return s interval = 2 * numRows - 2 ans = \u0026#34;\u0026#34; for row in range(numRows): for index in range(row, len(s), interval): ans += s[index] if not (row == 0 or row == numRows - 1): if index + (interval - row * 2) \u0026lt; len(s): ans += s[index + (interval - row * 2)] return ans  05: String to Integer (atoi) 一文字ずつ見ていく．\n 答え class Solution: def myAtoi(self, s: str) -\u0026gt; int: s = s.strip() int_part = \u0026#34;\u0026#34; for char in s: if char == \u0026#34;.\u0026#34;: break if char.isdigit() or char in [\u0026#34;+\u0026#34;, \u0026#34;-\u0026#34;]: if char in [\u0026#34;+\u0026#34;, \u0026#34;-\u0026#34;] and 0 \u0026lt; len(int_part): break int_part += char else: # char is alphabet break ans = 0 digit = 0 for char in int_part[::-1]: if char == \u0026#34;-\u0026#34;: ans *= -1 elif char == \u0026#34;+\u0026#34;: continue else: ans += (10 ** digit) * int(char) digit += 1 if -2**31 \u0026lt;= ans and ans \u0026lt; 2**31: return ans elif ans \u0026lt; -2**31: return -2**31 elif 2**31 \u0026lt;= ans: return 2**31-1  06: Valid Parentheses 閉じカッコに対応するのは，最直近の開きカッコなので，FIFO．だから stack でうまく書ける．\n 答え class Solution: def isValid(self, s: str) -\u0026gt; bool: stack = [] for p in s: if p in [\u0026#34;(\u0026#34;, \u0026#34;{\u0026#34;, \u0026#34;[\u0026#34;]: stack.append(p) continue else: if len(stack) == 0: return False q = stack.pop() if q in [\u0026#34;)\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;]\u0026#34;]: return False else: if q+p in [\u0026#34;()\u0026#34;, \u0026#34;{}\u0026#34;, \u0026#34;[]\u0026#34;]: continue else: stack.append(q) stack.append(p) if len(stack) == 0: return True else: return False  07: Generate Parentheses $n$個の()を正しく並べるときの全通りを出力する．\n 答え class Solution: def generateParenthesis(self, n: int) -\u0026gt; List[str]: ans = [] def _recurse(sofar, left, right, n): if left == n and right == n: ans.append(sofar) return if left \u0026lt; n: _recurse(sofar + \u0026#34;(\u0026#34;, left+1, right, n) if right \u0026lt; left: _recurse(sofar + \u0026#34;)\u0026#34;, left, right+1, n) _recurse(\u0026#34;\u0026#34;, 0, 0, n) return ans  08: Next Permutation 0125330の直後の順列は0130235．直後の順列は後半だけいじりたい．\n 答え class Solution: def nextPermutation(self, nums: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; i = len(nums) - 1 while 0 \u0026lt; i and nums[i - 1] \u0026gt;= nums[i]: i -= 1 i -= 1 pivot = nums[i] j = len(nums) - 1 while 0 \u0026lt; j and nums[j] \u0026lt;= pivot: j -= 1 nums[i], nums[j] = nums[j], nums[i] nums[i + 1:] = sorted(nums[i + 1:])  09: Search in Rotated Sorted Array 昇順になっているときは二分探索を使ってほしいという出題意図を汲み取りたい．\n 答え class Solution: def search(self, A: List[int], target: int) -\u0026gt; int: n = len(A) left, right = 0, n - 1 if n == 0: return -1 while left \u0026lt;= right: mid = left + (right - left) // 2 if A[mid] == target: return mid if A[mid] \u0026gt;= A[left]: if A[left] \u0026lt;= target \u0026lt; A[mid]: right = mid - 1 else: left = mid + 1 else: if A[mid] \u0026lt; target \u0026lt;= A[right]: left = mid + 1 else: right = mid - 1 return -1  10: Search Insert Position 一つずつ見ていく．\n 答え class Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: pos = 0 for ele in nums: if target \u0026lt;= ele: return pos else: pos += 1 return pos  11: Combination Sum 全通りがいくつあるのかはわからないけど，猪突猛進に調べる．candidates[:]を使う場合，candidates[1:]を使う場合，candidates[2:]を使う場合\u0026hellip;\n 答え class Solution: def combinationSum(self, candidates: List[int], target: int) -\u0026gt; List[List[int]]: ans = [] def _recurse(nums, target, sofar): # base case if target \u0026lt; 0: return if target == 0: ans.append(sofar) return for i in range(len(nums)): _recurse(nums[i:], target - nums[i], sofar + [nums[i]]) _recurse(candidates, target, []) return ans  12: Permutations 集合$A$から一つ選んで，残りから一つ選んで\u0026hellip;\n 答え class Solution: def permute(self, nums: List[int]) -\u0026gt; List[List[int]]: ans = [] def _recurse(nums, sofar): if len(nums) == 0: ans.append(sofar) return for i in range(len(nums)): _recurse(nums[:i]+nums[i+1:], sofar + [nums[i]]) _recurse(nums, []) return ans  13: Group Anagrams  答え class Solution: def groupAnagrams(self, strs: List[str]) -\u0026gt; List[List[str]]: table = dict() for s in strs: ss = \u0026#34;\u0026#34;.join(sorted(s)) if ss not in table: table[ss] = [s] else: table[ss].append(s) return list(table.values())  14: Pow(x, n) myPow = powは流石にチートか．出題意図は繰り返し自乗法．\n 答え 再帰で書いた答え\nclass Solution: def myPow(self, x: float, n: int) -\u0026gt; float: if n == 0: return 1.0 if n \u0026lt; 0: return 1/self.myPow(x, -n) if n % 2 == 1: return x * self.myPow(x, n-1) return self.myPow(x*x, n/2) 繰り返しで書いた答え\nclass Solution: def myPow(self, x: float, n: int) -\u0026gt; float: if n == 0: return 1.0 if n \u0026lt; 0: x = 1 / x n = -n ans = 1 while n != 0: if n \u0026amp; 1: ans *= x x *= x n \u0026gt;\u0026gt;= 1 return ans  15: Maximum Subarray  答え 最大部分配列問題：与えられた配列に対して，その部分配列のうち要素の和が最大となるときのその最大和を求める問題\n入力： ${a_i}_{i=0}^{n-1}$\n出力： $x = \\max \\sum_{k=i}^j a_k \\mathrel{\\bigg|} 0\\leq i \\leq j \\lt n$\n  $i$，$j$について全探索すれば$O(n^3)$：$x = \\max_{0\\leq i \u0026lt; n} \\max_{i \\leq j \u0026lt; n} \\sum_{k=i}^j a_k$\n  $\\sum_{k=i}^j a_k$を累積和を使って求めれば$O(n^2)$\n  $i$と$j$の最大値を取る順番を逆にして$x = \\max_{0\\leq j \u0026lt; n} \\max_{0 \\leq i \u0026lt; j} \\sum_{k=i}^j a_k$と変形すると$s_j = \\max_{0 \\leq i \u0026lt; j} \\sum_{k=i}^j a_k$として$x = \\max_{0\\leq j \u0026lt; n} s_j$となって，$s_j$について以下が成立するので$O(n)$．\n  $$ \\begin{align} s_{j} \u0026amp;= \\max_{0 \\leq i \\leq j} \\sum_{k=i}^j a_k\\\\\\\n\u0026amp;= \\max (\\max_{0 \\leq i \\leq j-1} \\sum_{k=i}^j a_k, \\max_{j \\leq i \\leq j} \\sum_{k=i}^j a_k) \\\\\\\n\u0026amp;= \\max (\\max_{0 \\leq i \\leq j-1} \\sum_{k=i}^{j-1} a_k + a_j, a_j) \\\\\\\n\u0026amp;= \\max( s_{j-1} + a_j, a_j) \\end{align} $$\nclass Solution: def maxSubArray(self, nums: List[int]) -\u0026gt; int: s = 0 ans = -10**5 for j in range(len(nums)): s = max(s + nums[j], nums[j]) ans = max(ans, s) return ans  16: Unique Paths 中学受験の道の数え上げ問題\n 答え class Solution: def uniquePaths(self, m: int, n: int) -\u0026gt; int: # dp[i][j]: number of unique paths to (i, j) # dp[i][j] = dp[i][j-1] + dp[i-1][j] dp = [[1 for _ in range(n)] for _ in range(m)] for i in range(1, m, 1): for j in range(1, n, 1): dp[i][j] = dp[i][j-1] + dp[i-1][j] return dp[m-1][n-1]  17: Unique Paths II これも中学受験で頻出のやつ．\n 答え class Solution: def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u0026gt; int: if not obstacleGrid: return 0 H = len(obstacleGrid) W = len(obstacleGrid[0]) obstacleGrid[0][0] = 1 - obstacleGrid[0][0] for h in range(1, H): obstacleGrid[h][0] = obstacleGrid[h-1][0] * (1 - obstacleGrid[h][0]) for w in range(1, W): obstacleGrid[0][w] = obstacleGrid[0][w-1] * (1 - obstacleGrid[0][w]) for h in range(1, H): for w in range(1, W): obstacleGrid[h][w] = (obstacleGrid[h-1][w] + obstacleGrid[h][w-1]) * (1 - obstacleGrid[h][w]) return obstacleGrid[H-1][W-1]  18: Subsets 全探索\n 答え  再帰で書く：$n$個の数字から得られるすべての部分配列は，$n-1$個の数字から得られるすべての部分配列のそれぞれに$n$個目の数字を入れるか入れないかで計算できる  class Solution: def subsets(self, nums: List[int]) -\u0026gt; List[List[int]]: def _recurse(nums): if len(nums) == 0: return [[]] sub = _recurse(nums[1:]) return sub + [s + [nums[0]] for s in sub] return _recurse(nums)  bit 全探索で書く  class Solution: def subsets(self, nums: List[int]) -\u0026gt; List[List[int]]: ans = [] for i in range(1 \u0026lt;\u0026lt; len(nums)): sub = [] for j in range(len(nums)): if i \u0026amp; 1 \u0026lt;\u0026lt; j: sub.append(nums[j]) ans.append(sub) return ans  繰り返しで書く  class Solution: def subsets(self, nums: List[int]) -\u0026gt; List[List[int]]: ans = [[]] for num in nums: ans += [[num] + sub for sub in ans] return ans  19: Remove Duplicates from Sorted List II 一つずつ見ていく．\n 答え # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def deleteDuplicates(self, head: ListNode) -\u0026gt; ListNode: dummy_head = ListNode(val=-101, next=head) prev = dummy_head current = head while current is not None and current.next is not None: while current.val != current.next.val: current = current.next prev = prev.next if current.next is None: return dummy_head.next while current is not None and current.next is not None and current.val == current.next.val: current = current.next prev.next = current.next current = current.next if current is None: return dummy_head.next return dummy_head.next  20: Remove Duplicates from Sorted List 一個飛ばし\n 答え # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def deleteDuplicates(self, head: ListNode) -\u0026gt; ListNode: current = head while current is not None and current.next is not None: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head  21: Validate Binary Search Tree inorder で頂点に訪問したときに昇順になっていれば正しい二分探索木\n 答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isValidBST(self, root: TreeNode) -\u0026gt; bool: inordered = [] def _inorder_traversal(root): if root is None: return if root.left is not None: _inorder_traversal(root.left) inordered.append(root.val) if root.right is not None: _inorder_traversal(root.right) _inorder_traversal(root) for i in range(0, len(inordered)-1, 1): if inordered[i] \u0026gt;= inordered[i+1]: return False return True 左の部分木の最大値 \u0026lt; このノードの値 \u0026lt; 右の部分木の最小値を再帰的に確かめる方法もある．\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def isValidBST(self, root: TreeNode) -\u0026gt; bool: def _isValidBST(root, larger_than, less_than): if root is None: return True if root.val \u0026lt;= larger_than or less_than \u0026lt;= root.val: return False return _isValidBST(root.left, larger_than, min(less_than, root.val)) and _isValidBST(root.right, max(larger_than, root.val), less_than) return _isValidBST(root, float(\u0026#39;-inf\u0026#39;), float(\u0026#39;inf\u0026#39;))  22: Binary Tree Level Order Traversal  答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def levelOrder(self, root: TreeNode) -\u0026gt; List[List[int]]: def _levelOrder(root, lsts, level): if root is None: return lst = None if len(lsts) == level: lst = list() lsts.append(lst) else: lst = lsts[level] lst.append(root.val) _levelOrder(root.left, lsts, level+1) _levelOrder(root.right, lsts, level+1) return lsts return _levelOrder(root, [], 0) BFS っぽくもできる．suspendedにlevel段目の頂点のみが全部入っているように更新する．suspendedに追加しながら次の頂点に行かないようにする．\n# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def levelOrder(self, root: TreeNode) -\u0026gt; List[List[int]]: if root is None: return [] suspended = [] suspended.append(root) lsts = [] level = 0 while len(suspended) != 0: if len(lsts) == level: lsts.append([]) next_suspended = [] for u in suspended: lsts[level].append(u.val) if u.left is not None: next_suspended.append(u.left) if u.right is not None: next_suspended.append(u.right) suspended = next_suspended level += 1 return lsts  23: Binary Tree Zigzag Level Order Traversal 一つ前のをちょっとだけイジる．\n 答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def zigzagLevelOrder(self, root: TreeNode) -\u0026gt; List[List[int]]: if root is None: return [] suspended = [] suspended.append(root) lsts = [] level = 0 order_flag = -1 while len(suspended) != 0: if len(lsts) == level: lsts.append([]) next_suspended = [] for u in suspended: lsts[level].append(u.val) if u.right is not None: next_suspended.append(u.right) if u.left is not None: next_suspended.append(u.left) suspended = next_suspended lsts[level] = lsts[level][::order_flag] order_flag = -order_flag level += 1 return lsts  24: Maximum Depth of Binary Tree 木の深さは葉ノードから戻ってきながら計算する．\n 答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def maxDepth(self, root: TreeNode) -\u0026gt; int: def _recurse(root): if root is None: return 0 if root.left is not None and root.right is not None: return max(_recurse(root.left), _recurse(root.right)) + 1 if root.left is None and root.right is not None: return _recurse(root.right) + 1 if root.left is not None and root.right is None: return _recurse(root.left) + 1 return 1 return _recurse(root)  25: Construct Binary Tree from Preorder and Inorder Traversal preorderからinorderを左右に分割できる．これを繰り返す．\n 答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def buildTree(self, preorder: List[int], inorder: List[int]) -\u0026gt; TreeNode: if len(inorder) != 0: idx = inorder.index(preorder.pop(0)) root = TreeNode(val=inorder[idx]) root.left = self.buildTree(preorder, inorder[0:idx]) root.right = self.buildTree(preorder, inorder[idx+1:]) return root  26: Convert Sorted Array to Binary Search Tree 左右の部分木の高さが同じくらいにしたいので，だいたい大きさ的に真ん中ぐらいの要素から根にする．要素がソートされているのでインデックスで真ん中辺りから根を作る．\n 答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def sortedArrayToBST(self, nums: List[int]) -\u0026gt; TreeNode: def _recurse(nums, low, high): if high \u0026lt; low: return None middle = (low + high) // 2 root = TreeNode(val=nums[middle]) root.left = _recurse(nums, low, middle-1) root.right = _recurse(nums, middle+1, high) return root return _recurse(nums, 0, len(nums)-1)  27: Minimum Depth of Binary Tree  答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def minDepth(self, root: TreeNode) -\u0026gt; int: def _recurse(root): if root is None: return 0 if root.left is not None and root.right is not None: return min(_recurse(root.left), _recurse(root.right)) + 1 if root.left is None: return _recurse(root.right) + 1 if root.right is None: return _recurse(root.left) + 1 return 1 return _recurse(root)  28: Path Sum 全探索\n 答え  再帰を使った DFS  # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def hasPathSum(self, root: TreeNode, targetSum: int) -\u0026gt; bool: results = [] def _recurse(root, remaining): if root is None: return if root.left is None and root.right is None and root.val == remaining: results.append(True) return remaining -= root.val _recurse(root.left, remaining) _recurse(root.right, remaining) _recurse(root, targetSum) return any(results)  stack を使った DFS  # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def hasPathSum(self, root: TreeNode, targetSum: int) -\u0026gt; bool: if root is None: return False suspended = list() suspended.append((root, root.val)) while len(suspended) != 0: u, sofar = suspended.pop() if u.left is None and u.right is None and sofar == targetSum: return True if u.left is not None: suspended.append((u.left, sofar + u.left.val)) if u.right is not None: suspended.append((u.right, sofar + u.right.val)) return False  queue を使った BFS  # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def hasPathSum(self, root: TreeNode, targetSum: int) -\u0026gt; bool: if root is None: return False suspended = list() suspended.append((root, root.val)) while len(suspended) != 0: u, sofar = suspended.pop(0) if u.left is None and u.right is None and sofar == targetSum: return True if u.left is not None: suspended.append((u.left, sofar + u.left.val)) if u.right is not None: suspended.append((u.right, sofar + u.right.val)) return False  29: Best Time to Buy and Sell Stock 最小の日を保存しながら舐める．\n 答え class Solution: def maxProfit(self, prices: List[int]) -\u0026gt; int: profit = 0 min_sofar = prices[0] for i in range(1, len(prices), 1): profit = max(profit, prices[i] - min_sofar) min_sofar = min(min_sofar, prices[i]) return profit 問題をちょっとだけ弄って，前日からの値段の差を格納した配列が渡されて利益の最大値を求めようとすると，これは最大部分配列和問題．\nKadane アルゴリズムで解ける．Kadane アルゴリズムは全探索の順序を替えることで前日までの最大利益を使って当日までの最大利益を低数時間で計算できて，全体として$O(n)$になるというやつ．DP．\nclass Solution: def maxProfit(self, priceDiff: List[int]) -\u0026gt; int: max_profit = 0 max_current = 0 for i in range(1, len(priceDiff), 1): max_current += (priceDiff[i] - priceDiff[i-1]) max_current = max(0, max_current) max_profit = max(max_profit, max_current) return max_profit  30: Best Time to Buy and Sell Stock II 今日より明日のほうが高値なら，今日買って明日売ろう．\n 答え class Solution: def maxProfit(self, prices: List[int]) -\u0026gt; int: return sum(max(0, prices[i+1] - prices[i]) for i in range(len(prices) - 1))  31: Word Ladder グリッドグラフの文字列版だと思えれば大丈夫．グリッドグラフのマス目に 1 文字だけ違う文字列を書き込んでグラフ上のマス目を踏んでいくイメージ．言うなれば 26 次元グリッドグラフか．\n 答え class Solution: def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -\u0026gt; int: not_visited_yet = set(wordList) suspended = list() not_visited_yet.add(beginWord) suspended.append((beginWord, 1)) while len(suspended) != 0: word, length = suspended.pop(0) if word == endWord: return length for i in range(len(word)): for char in \u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;: next_candidate = word[:i] + char + word[i+1:] if next_candidate in not_visited_yet: not_visited_yet.remove(next_candidate) suspended.append((next_candidate, length + 1)) return 0  32: Word Break wordDict内の文字列の重複を許す組み合わせを全部求めてsと一致するかを調べても$O(2^n)$で原理的には解けるが1 \u0026lt;= len(wordDict) \u0026lt;= 1000なので間に合わない． そこでsについて考える．「$i$文字目より前の部分文字列s[:i]を実現できるか」は「$j$（$j \u0026lt; i$）文字目より前の部分文字列s[:j]を実現できて，かつ残りのs[j:i]がwordDict内にあるか」で求まる．DP．\n 答え class Solution: def wordBreak(self, s: str, wordDict: List[str]) -\u0026gt; bool: # dp[i]: whether s[:i] can be build from words in wordDict words = set(wordDict) # for lookup in O(1) dp = [True] for i in range(1, len(s)+1): dp += [any(dp[j] and s[j:i] in words for j in range(i))] return dp[len(s)] 「wordDict内にある最長の文字列の長さ」以上のs部分文字列がwordDict内にあるはずがないのでそれを省くと効率が良くなる．\nclass Solution: def wordBreak(self, s: str, wordDict: List[str]) -\u0026gt; bool: # dp[i]: whether s[:i] can be build from words in wordDict words = set(wordDict) # for lookup in O(1) max_len = max(map(len, wordDict)) dp = [True] for i in range(1, len(s)+1): dp += [any(dp[j] and s[j:i] in words for j in range(max(0, i - max_len), i))] return dp[len(s)]  33: Linked List Cycle 二人走らせる．出逢えばループあり．足の早いほうが崖から落ちればループなし．\n 答え # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: if head is None: return False slower = head faster = head while faster.next is not None and faster.next.next is not None: slower = slower.next faster = faster.next.next if slower is faster: return True return False  34: Linked List Cycle II 二人走らせる．1 周回差つけられたところで初めて出会う．\n 答え # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def detectCycle(self, head: ListNode) -\u0026gt; ListNode: if head is None: return None faster = head slower = head has_loop = False while faster.next is not None and faster.next.next is not None: slower = slower.next faster = faster.next.next if slower is faster: has_loop = True slower = head break if has_loop: while slower is not faster: slower = slower.next faster = faster.next return slower else: return None  35: Find Minimum in Rotated Sorted Array 二分探索っぽいことをする．昇順になったものを回転させるときの折れ線グラフを描く真ん中と左右の比較でどこに最小値があるかがわかる．\n 答え class Solution: def findMin(self, nums: List[int]) -\u0026gt; int: left, right = 0, len(nums) - 1 while left \u0026lt; right: middle = (left + right) // 2 if nums[middle] \u0026lt; nums[right]: right = middle else: left = middle + 1 return nums[left]  36: House Robber [2,1,1,2]というパターンを忘れてはならない．\n 答え dp[i]：i番目までの家から盗めるお金の最大値 dp[i] = max(dp[i-2] + nums[i], dp[i-1])\nclass Solution: def rob(self, nums: List[int]) -\u0026gt; int: if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] dp = [nums[0], max(nums[0], nums[1])] for num in nums[2:]: dp.append(max(dp[-1], dp[-2] + num)) return dp[-1]  37: Number of Islands グリッドグラフの全探索．拙著記事はここ．\n 答え queue を使う BFS の答え\nclass Solution: def numIslands(self, grid: List[List[str]]) -\u0026gt; int: dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] H = len(grid) W = len(grid[0]) has_visited = set() suspended = list() ans = 0 for h in range(H): for w in range(W): if (h, w) in has_visited or grid[h][w] == \u0026#34;0\u0026#34;: continue has_visited.add((h, w)) suspended.append((h, w)) ans += 1 while len(suspended) != 0: (_h, _w) = suspended.pop(0) for (dh, dw) in dirs: next_h = _h + dh next_w = _w + dw if 0 \u0026lt;= next_h \u0026lt; H and 0 \u0026lt;= next_w \u0026lt; W and grid[next_h][next_w] == \u0026#34;1\u0026#34; and (next_h, next_w) not in has_visited: has_visited.add((next_h, next_w)) suspended.append((next_h, next_w)) return ans stack を使う DFS の答え\nclass Solution: def numIslands(self, grid: List[List[str]]) -\u0026gt; int: dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] H = len(grid) W = len(grid[0]) has_visited = set() suspended = list() ans = 0 for h in range(H): for w in range(W): if (h, w) in has_visited or grid[h][w] == \u0026#34;0\u0026#34;: continue has_visited.add((h, w)) suspended.append((h, w)) ans += 1 while len(suspended) != 0: (_h, _w) = suspended.pop() for (dh, dw) in dirs: next_h = _h + dh next_w = _w + dw if 0 \u0026lt;= next_h \u0026lt; H and 0 \u0026lt;= next_w \u0026lt; W and grid[next_h][next_w] == \u0026#34;1\u0026#34; and (next_h, next_w) not in has_visited: has_visited.add((next_h, next_w)) suspended.append((next_h, next_w)) return ans 再気をつかう DFS の答え\nclass Solution: def numIslands(self, grid: List[List[str]]) -\u0026gt; int: dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] H = len(grid) W = len(grid[0]) has_visited = set() ans = 0 def dfs(h, w): has_visited.add((h, w)) for (dh, dw) in dirs: nh = h + dh nw = w + dw if 0 \u0026lt;= nh \u0026lt; H and 0 \u0026lt;= nw \u0026lt; W and grid[nh][nw] == \u0026#34;1\u0026#34; and (nh, nw) not in has_visited: dfs(h + dh, w + dw) for h in range(H): for w in range(W): if (h, w) in has_visited or grid[h][w] == \u0026#34;0\u0026#34;: continue ans += 1 dfs(h, w) return ans  38: Reverse Linked List  答え 遅い．\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: ListNode) -\u0026gt; ListNode: if head is None: return None if head.next is None: return ListNode(val=head.val) reversed_head = self.reverseList(head.next) reversed_tail = reversed_head while reversed_tail.next is not None: reversed_tail = reversed_tail.next reversed_tail.next = ListNode(val=head.val) return reversed_head 賢く．\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: ListNode) -\u0026gt; ListNode: if head is None or head.next is None: return head reversed_head = self.reverseList(head.next) head.next.next = head head.next = None return reversed_head 繰り返しで．\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: ListNode) -\u0026gt; ListNode: prev = None curr = head while curr is not None: tmp = curr.next curr.next = prev prev = curr curr = tmp return prev  39: Minimum Size Subarray Sum  答え 力技なら部分列を全部取って計算するので$O(n^3)$で間に合わない．\n累積和を使って部分列の和を$O(1)$で求めて全体で$O(n^2)$．ただこれだと Python だと間に合わない．\nclass Solution: def minSubArrayLen(self, target: int, nums: List[int]) -\u0026gt; int: accum = [nums[0]] for num in nums[1:]: accum.append(accum[-1] + num) ans = 10 ** 9 for i in range(0, len(nums), 1): for j in range(i, len(nums), 1): added = accum[j] - accum[i] + nums[i] if target \u0026lt;= added: ans = min(ans, (j - i + 1)) return ans if ans != 10 ** 9 else 0 部分和の大きさについて，部分列の長さが長くなればなるほど部分和は単調に増加するので，target以上となる最小のインデックスは二分探索で探せる．全体としては$O(n \\log n)$\nclass Solution: def minSubArrayLen(self, target: int, nums: List[int]) -\u0026gt; int: accum = [nums[0]] for num in nums[1:]: accum.append(accum[-1] + num) def is_ok(lst, mid, key): if key \u0026lt;= lst[mid]: return True return False def binary_search(lst, key): ng = -1 ok = len(lst) while 1 \u0026lt; abs(ok - ng): mid = (ok + ng) // 2 if is_ok(lst, mid, key): ok = mid else: ng = mid return ok ans = 10 ** 9 for i in range(0, len(nums), 1): accum_j = target + accum[i] - nums[i] j = binary_search(accum[i:], accum_j) + i if j == len(accum): continue ans = min(ans, (j - i + 1)) return ans if ans != 10 ** 9 else 0 もっと賢いやり方がある．部分列の和は，「部分列が長ければ長いほど大きくなる」ので，一度部分列の和がtarget以上になったらそれ以上その部分列を伸ばして探しても答えに関係ない．部分列の末端の位置が早々に確定できるので，部分列の先頭を回すだけで求まる．$O(n)$．これは世の中では尺取法と呼ばれているそうだ．英語では sliding window と呼ばれているのか？\nclass Solution: def minSubArrayLen(self, target: int, nums: List[int]) -\u0026gt; int: ans = 10 ** 9 head = 0 subsum = 0 for tail in range(0, len(nums), 1): subsum += nums[tail] while target \u0026lt;= subsum: ans = min(ans, tail - head + 1) subsum -= nums[head] head += 1 return ans if ans != 10 ** 9 else 0  40: House Robber II  答え nums[0]とnums[-1]を同時に襲えないので，nums[1:]を対象にしたときとnums[:-1]を対象にしたときを別個に計算して大きい方を取ればいい．\nclass Solution: def rob(self, nums: List[int]) -\u0026gt; int: def _rob(nums): # dp[i]: i番目までの家を対象に盗みを図る # dp[i] = max(dp[i-2] + nums[i], dp[i-1]) if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] dp = [nums[0], max(nums[0], nums[1])] for num in nums[2:]: dp += [max(dp[-1], dp[-2] + num)] return dp[-1] if len(nums) == 0: return 0 if len(nums) == 1: return nums[0] return max(_rob(nums[:-1]), _rob(nums[1:]))  41: Meeting Rooms 複数の MTG の開始時刻と終了時刻が与えられるとき，全ての MTG 予定がダブらないかどうかを判定せよ．\n 答え # Definition for an interval # class Interval(object): # def __init__(self, s=0, e=0): # self.start = s # self.end = e class Solution: def canAttendMeetings(self, intervals: List[Interval]) -\u0026gt; bool: intervals.sort(key=lambda x: x.start) for i in range(0, len(intervals) - 1, 1): if intervals[i].end \u0026gt; intervals[i + 1].start: return False return True  42: Meeting Rooms II 複数の MTG の開始時刻と終了時刻が与えられるとき，必要最小限の MTG 部屋の数を計算せよ．\n 答え # Definition for an interval # class Interval(object): # def __init__(self, s=0, e=0): # self.start = s # self.end = e class Solution: def minMeetingRooms(self, intervals: List[Interval]) -\u0026gt; int: intervals.sort(key=lambda x: x.start) heap = [] for mtg in intervals: if len(heap) != 0 and heap[0] \u0026lt;= mtg.start: heapq.heappop(heap) heapq.heappush(heap, mtg.end) else: heapq.heappush(heap, mtg.end) return len(heap)  43: Paint Fence Not Yet.\n 答え pass  44: Move Zeroes  答え class Solution: def moveZeroes(self, nums: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums in-place instead. \u0026#34;\u0026#34;\u0026#34; last_non_zero_at = 0 for i in range(0, len(nums), 1): if nums[i] != 0: nums[last_non_zero_at], nums[i] = nums[i], nums[last_non_zero_at] last_non_zero_at += 1  45: Longest Increasing Subsequence  答え 力技でやるなら全ての部分列を取り上げて長さの最小値を求める．$O(2^n)$．\n再帰を使って全探索．当然 TLE．\nclass Solution: def lengthOfLIS(self, nums: List[int]) -\u0026gt; int: def check(seq): for i in range(0, len(seq)-1, 1): if seq[i] \u0026gt;= seq[i+1]: return False return True lens = [] def _recurse(pos, seq): if pos == len(nums): if check(seq): lens.append(len(seq)) return _recurse(pos + 1, seq) _recurse(pos + 1, seq + [nums[pos]]) _recurse(0, []) return max(lens) bit 全探索．これも当然 TLE．\nclass Solution: def lengthOfLIS(self, nums: List[int]) -\u0026gt; int: def check(seq): for i in range(0, len(seq)-1, 1): if seq[i] \u0026gt;= seq[i+1]: return False return True ans = 0 for i in range(1 \u0026lt;\u0026lt; len(nums)): seq = [] for j in range(len(nums)): if i \u0026amp; (1 \u0026lt;\u0026lt; j): seq.append(nums[j]) if check(seq): ans = max(ans, len(seq)) return ans DP で解くと$O(n^2)$\ndp[i]：nums[i]で終わる最長部分増加列の長さ\ndp[i]はdp[0]，dp[1]，dp[2]，\u0026hellip;dp[i-1]を使って計算できる．dp[i]は「nums[i]がnums[j]以上であるようなjの中での最大のdp[j]に 1 足したもの」\nfor j in range(0, i): if nums[j] \u0026lt; nums[i]: dp[i] = max(dp[i], dp[j] + 1) class Solution: def lengthOfLIS(self, nums: List[int]) -\u0026gt; int: # dp[i]: nums[i]で終わる最大増加部分列の長さ # dp[i] = { # nums[j] \u0026lt; nums[i]を満たすようなj(0 \u0026lt; j \u0026lt; i)に対して # 最大のdp[j] + 1 # } dp = [0 for _ in range(len(nums))] for i in range(len(nums)): dp[i] = 1 # 長さ1の増加部分列：[nums[i]] for j in range(i): if nums[j] \u0026lt; nums[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)  46: Coin Change  答え class Solution: def coinChange(self, coins: List[int], amount: int) -\u0026gt; int: # dp[i][j]: i番目までのコインを使ってj円を実現するときの最小枚数 # dp[i][j] = min(dp[i-1][j], dp[i][j-coins[i]] + 1) coins = [-1] + coins INF = 10 ** 9 dp = [[INF for _ in range(amount + 1)] for _ in range(len(coins))] for i in range(len(coins)): dp[i][0] = 0 for i in range(1, len(coins)): for j in range(amount + 1): if 0 \u0026lt;= j-coins[i]: dp[i][j] = min(dp[i-1][j], dp[i][j-coins[i]] + 1) else: dp[i][j] = dp[i-1][j] return dp[-1][-1] if dp[-1][-1] != INF else -1 DP 配列は二次元でなくても大丈夫だった．\nclass Solution: def coinChange(self, coins: List[int], amount: int) -\u0026gt; int: # dp[i]: i円支払うときの最小枚数 dp = [float(\u0026#39;inf\u0026#39;) for _ in range(amount+1)] dp[0] = 0 for i in range(1, amount+1): dp[i] = min([dp[i-coin] if 0 \u0026lt;= i-coin else float(\u0026#39;inf\u0026#39;) for coin in coins]) + 1 return dp[amount] if dp[amount] != float(\u0026#39;inf\u0026#39;) else -1  47: Number of Connected Components in an Undirected Graph  答え 問題文が見れないので標準入力経由でグラフを入力されたと想定して解く．ある頂点から始める DFS を．未訪問の頂点がなくなるまで繰り返す．\n# graph: # 0 # / | \\ # 1--2 3 # | \\ # 4 6 # 5--7 N, M = map(int, input().split()) G = [[] for _ in range(N)] for _ in range(M): u, v = map(int, input().split()) G[u].append(v) G[v].append(u) def connected_component(graph): cc = 0 has_visited = set() for n in range(len(graph)): if n not in has_visited: cc += 1 suspended = [n] while len(suspended) != 0: u = suspended.pop() if u in has_visited: continue has_visited.add(u) for v in graph[u]: suspended.append(v) return cc print(connected_component(G))  48: Top K Frequent Elements これは素直に書くだけ．\n 答え class Solution: def topKFrequent(self, nums: List[int], k: int) -\u0026gt; List[int]: table = dict() for num in nums: if num in table: table[num] += 1 else: table[num] = 0 ordered = list(table.items()) ordered.sort(key=lambda x: x[1], reverse=True) return [x[0] for x in ordered[:k]]  49: Intersection of Two Arrays python が偉い．\n 答え class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -\u0026gt; List[int]: return list(set(nums1).intersection(set(nums2)))  50: Find K Pairs with Smallest Sums  答え 力技 1：テーブル全部計算する．\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: return sorted(itertools.product(nums1, nums2), key=sum)[:k] 力技 2：テーブル全部計算する．\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: return map(list, sorted(itertools.product(nums1, nums2), key=sum)[:k]) 力技 3：generator を使って必要な分だけ計算する．\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: return map(list, heapq.nsmallest(k, itertools.product(nums1, nums2), key=sum)) 力技 4：これも generator\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: return heapq.nsmallest(k, ([u, v] for u in nums1 for v in nums2), key=sum) テーブルを 1 行ごと計算する generator\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: streams = map(lambda u: ([u+v, u, v] for v in nums2), nums1) stream = heapq.merge(*streams) return [ret[1:] for ret in itertools.islice(stream, k)] テーブルの左端の方だけ欲しいというのを優先度付きキューを使ってうまく実装する．\nclass Solution: def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -\u0026gt; List[List[int]]: queue = [] def push(i, j): if i \u0026lt; len(nums1) and j \u0026lt; len(nums2): heapq.heappush(queue, [nums1[i] + nums2[j], i, j]) push(0, 0) ans = [] while len(queue) != 0 and len(ans) \u0026lt; k: _, i, j = heapq.heappop(queue) ans.append([nums1[i], nums2[j]]) push(i, j + 1) if j == 0: push(i + 1, j) return ans  51: First Unique Character in a String  答え class Solution: def firstUniqChar(self, s: str) -\u0026gt; int: checked = set() def is_unique(s, i): return s[i] in (s[:i] + s[i+1:]) for i in range(len(s)): if s[i] in checked: continue if not is_unique(s, i): return i checked.add(s[i]) return -1  52: Is Subsequence iter化することで，見つかるまで文字を吐き出すイテレータを作る．\n 答え class Solution: def isSubsequence(self, s: str, t: str) -\u0026gt; bool: t = iter(t) return all(char in t for char in s)  53: Subarray Sum Equals K  答え 力技．$O(n^3)$．TLE．\nclass Solution: def subarraySum(self, nums: List[int], k: int) -\u0026gt; int: ans = 0 for start in range(len(nums)): for end in range(start + 1, len(nums) + 1): subsum = 0 for num in nums[start:end]: subsum += num if subsum == k: ans += 1 return ans 累積和を使ってsubsumを求めて$O(n^2)$．TLE．\nclass Solution: def subarraySum(self, nums: List[int], k: int) -\u0026gt; int: ans = 0 accum = [0] for num in nums: accum += [accum[-1] + num] for start in range(len(nums)): for end in range(start + 1, len(nums) + 1): subsum = accum[end] - accum[start] if subsum == k: ans += 1 return ans subsumを求めながら添え字を回す．$O(n^2)$．TLE．\nclass Solution: def subarraySum(self, nums: List[int], k: int) -\u0026gt; int: ans = 0 for start in range(len(nums)): subsum = 0 for end in range(start, len(nums)): subsum += nums[end] if subsum == k: ans += 1 return ans 結局部分列の個数だけカウントしたいのであれば，部分列の最初と最後のインデックスはいらなくて，合計がいくらになる部分列が何個あるかが重要．\nclass Solution: def subarraySum(self, nums: List[int], k: int) -\u0026gt; int: ans = 0 subsum = 0 table = dict() # subsum: freq table[0] = 1 for num in nums: subsum += num if subsum - k in table: ans += table[subsum - k] table[subsum] = table.get(subsum, 0) + 1 return ans  54: Merge Two Binary Trees  答え # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def mergeTrees(self, root1: TreeNode, root2: TreeNode) -\u0026gt; TreeNode: if root1 is None: return root2 if root2 is None: return root1 root1.val += root2.val root1.left = self.mergeTrees(root1.left, root2.left) root1.right = self.mergeTrees(root1.right, root2.right) return root1  55: Max Area of Island  答え DFS で全探索．\nclass Solution: def maxAreaOfIsland(self, grid: List[List[int]]) -\u0026gt; int: H = len(grid) W = len(grid[0]) dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] has_visited = set() def traverse(h, w): area = 0 suspended = list() suspended.append((h, w)) while len(suspended) != 0: h_, w_ = suspended.pop() has_visited.add((h_, w_)) area += 1 for (dh, dw) in dirs: nh = h_ + dh nw = w_ + dw if 0 \u0026lt;= nh \u0026lt; H and 0 \u0026lt;= nw \u0026lt; W and (nh, nw) not in has_visited and grid[nh][nw] == 1: has_visited.add((nh, nw)) suspended.append((nh, nw)) return area max_area = 0 for h in range(H): for w in range(W): if grid[h][w] == 1: area = traverse(h, w) max_area = max(max_area, area) return max_area BFS で全探索\nclass Solution: def maxAreaOfIsland(self, grid: List[List[int]]) -\u0026gt; int: H = len(grid) W = len(grid[0]) dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] has_visited = set() def traverse(h, w): area = 0 suspended = list() suspended.append((h, w)) while len(suspended) != 0: h_, w_ = suspended.pop(0) has_visited.add((h_, w_)) area += 1 for (dh, dw) in dirs: nh = h_ + dh nw = w_ + dw if 0 \u0026lt;= nh \u0026lt; H and 0 \u0026lt;= nw \u0026lt; W and (nh, nw) not in has_visited and grid[nh][nw] == 1: has_visited.add((nh, nw)) suspended.append((nh, nw)) return area max_area = 0 for h in range(H): for w in range(W): if grid[h][w] == 1: area = traverse(h, w) max_area = max(max_area, area) return max_area 再帰で DFS．再帰関数は地点(i, j)を端点とした土地の面積を返す．上下左右の土地はつながっていないので上下左右から始めた土地の面積の合計に 1 足せば良い．\nclass Solution: def maxAreaOfIsland(self, grid: List[List[int]]) -\u0026gt; int: H = len(grid) W = len(grid[0]) dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)] has_visited = set() def area_from(h, w): if (h \u0026lt; 0 or H \u0026lt;= h) or (w \u0026lt; 0 or W \u0026lt;= w) or (h, w) in has_visited or grid[h][w] == 0: return 0 has_visited.add((h, w)) return 1 + sum(area_from(h + dh, w + dw) for (dh, dw) in dirs) return max(area_from(h, w) for h in range(H) for w in range(W))  56: Kth Largest Element in a Stream 大きい方から数えて$k$番目の要素は，昇順に並ぶ長さ$k$の優先度付きキューの先頭．\n 答え class KthLargest: def __init__(self, k: int, nums: List[int]): self.queue = nums self.k = k heapq.heapify(self.queue) while k \u0026lt; len(self.queue): heapq.heappop(self.queue) def add(self, val: int) -\u0026gt; int: if len(self.queue) \u0026lt; self.k: heapq.heappush(self.queue, val) elif self.queue[0] \u0026lt; val: heapq.heappop(self.queue) heapq.heappush(self.queue, val) return self.queue[0] # Your KthLargest object will be instantiated and called as such: # obj = KthLargest(k, nums) # param_1 = obj.add(val)  57: Split BST  答え class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def splitBST(root, v): inordered = [] def inorder_traverse(root): if root is None: return inorder_traverse(root.left) inordered.append(root.val) inorder_traverse(root.right) idx = inordered.index(v) def build_bst(i, j): if j \u0026lt; i: return None mid = (i + j) // 2 root = TreeNode(inordered[mid]) root.left = build_bst(i, mid-1) root.right = build_bst(mid+1, j) return root return [build_bst(0, idx), build(idx, len(inordered)-1)]  58: K-th Symbol in Grammar $i+1$行目のビット列$s_{i+1}$は$i$列目のビット列$s_i$とそのビット反転したものを連結したものになっている．これを使って真面目に文字列を全部求めると時間かかる．$s_{i+1}$の前半は$s_i$と同じなので，問題のサイズを半分にすることができる．\n 答え class Solution: def kthGrammar(self, N: int, K: int) -\u0026gt; int: if N == 1: if K == 1: return 0 else: return 1 half = 1 \u0026lt;\u0026lt; (N-1) if K \u0026lt;= half: return self.kthGrammar(N - 1, K) else: return 0 if self.kthGrammar(N - 1, K - half) else 1  59: Unique Email Addresses  答え class Solution: def numUniqueEmails(self, emails: List[str]) -\u0026gt; int: table = dict() for email in emails: (local, domain) = email.split(\u0026#34;@\u0026#34;) local = local.replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;) idx = local.find(\u0026#34;+\u0026#34;) if idx == -1: idx = len(local) local = local[:idx] if domain in table: table[domain].add(local) else: table[domain] = {local} ans = 0 for ls in table.values(): ans += len(list(ls)) return ans +の処理を先にしたほうが効率的らしい．\nclass Solution: def numUniqueEmails(self, emails: List[str]) -\u0026gt; int: canonicals = set() for email in emails: (local, domain) = email.split(\u0026#34;@\u0026#34;) local = local.split(\u0026#34;+\u0026#34;)[0].replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;) canonicals.add(local + \u0026#34;@\u0026#34; + domain) return len(canonicals)  60: Capacity To Ship Packages Within D Days  答え 無限に積める船があれば確実に$D$日以内に運べる．逆に許容積載量が$0$なら絶対に運べない．「ある条件を満たす最小値」と来れば，二分探索の出番．\nclass Solution: def shipWithinDays(self, weights: List[int], D: int) -\u0026gt; int: def is_ok(mid): elapsed = 1 loaded = 0 for weight in weights: loaded += weight if mid \u0026lt; loaded: elapsed += 1 loaded = weight if elapsed \u0026lt;= D: return True else: return False def binary_search(weights): ng = max(weights)-1 # 常に条件を満たさない ok = sum(weights)+1 # 常に条件を満たす while 1 \u0026lt; abs(ng - ok): mid = (ng + ok) // 2 if is_ok(mid): ok = mid else: ng = mid return ok return binary_search(weights)  ","date":1616385276,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616385276,"objectID":"c18cee1f0c9199d9ebe9e647b51b6c06","permalink":"/ja/post/leetcode-60-questions/","publishdate":"2021-03-22T12:54:36+09:00","relpermalink":"/ja/post/leetcode-60-questions/","section":"post","summary":"この 60 問を Python で解く． 01: Two Sum $O(n^2)$ではない答えにしたいので，どうするか． 答え class Solution: def twoSum(self, nums: List[int], target: int) -\u0026gt; List[int]: table = dict() for idx, num in enumerate(nums): complement = target - num if complement in table.keys(): return","tags":["leetcode","python"],"title":"Leetcode 60 Questions","type":"post"},{"authors":[],"categories":[],"content":"問題 二分木が与えられたとき，最小の深さを求めよ．\n答え class BinaryTreeNode: def __init__(self, key): self.key = key self.right = None self.left = None def minimum_depth(root): # base case if root is None: return 0 if root.left is not None and root.right is not None: return min(minimum_depth(root.left), minimum_depth(root.right)) + 1 elif root.left is None and root.right is not None: return minimum_depth(root.right) + 1 elif root.left is not None and root.right is None: return minimum_depth(root.left) + 1 else: # root.left is None and root.right is None return 1 ","date":1616325860,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616325860,"objectID":"2b373208cb0d3c55a118d80e365d307b","permalink":"/ja/post/minimum-depth-of-binary-tree/","publishdate":"2021-03-21T20:24:20+09:00","relpermalink":"/ja/post/minimum-depth-of-binary-tree/","section":"post","summary":"問題 二分木が与えられたとき，最小の深さを求めよ． 答え class BinaryTreeNode: def __init__(self, key): self.key = key self.right = None self.left = None def minimum_depth(root): # base case if root is None: return 0 if root.left is not None and root.right is not None: return min(minimum_depth(root.left), minimum_depth(root.right)) + 1 elif root.left is None","tags":[],"title":"Minimum Depth of Binary Tree","type":"post"},{"authors":[],"categories":[],"content":"問題 昇順にソートされた配列lstと値xが与えられたとき，和がxに最も近くなる 2 要素のペアをlstから求めよ．\n答え 原理的には$O(n^2)$で解けるが，lstが昇順にソートされていることをうまく使えば$O(n)$で解ける．\n $O(n^2)$  def solve(lst, x): diff = 10 ** 9 ans = (-1, -1) for i in range(len(lst)): for j in range(i+1, len(lst), 1): if abs(x - (lst[i] + lst[j])) \u0026lt; diff: diff = abs(x - (lst[i] + lst[j])) ans = (lst[i], lst[j]) return ans  $O(n)$  def solve(lst, x): diff = 10 ** 9 ans = (-1, -1) low = 0 high = len(lst) - 1 while low \u0026lt; high: s = lst[low] + lst[high] if abs(x - s) \u0026lt; diff: ans = (lst[low], lst[high]) diff = abs(x - s) if s \u0026lt; x: low += 1 else: high -= 1 return ans ","date":1616314461,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616314461,"objectID":"7aa86252723463524ab369205d2fdd3b","permalink":"/ja/post/closest-pair-from-sorted-list/","publishdate":"2021-03-21T17:14:21+09:00","relpermalink":"/ja/post/closest-pair-from-sorted-list/","section":"post","summary":"問題 昇順にソートされた配列lstと値xが与えられたとき，和がxに最も近くなる 2 要素のペアをlstから求めよ． 答え 原理的には$O(n^2)$で","tags":[],"title":"Closest Pair From Sorted List","type":"post"},{"authors":[],"categories":[],"content":"基本的なソートアルゴリズムを復習\nBubble Sort 隣り合う要素同士の比較を繰り返すことで，最大要素を順次確定させていく．\ndef bubble_sort(lst): for idx in range(len(lst) - 1, 0, -1): for j in range(0, idx, 1): if lst[j+1] \u0026lt; lst[j]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst Insertion Sort トランプゲームで手札をソートするときをイメージする．左のカードから，そのカードが挿入されるべき位置を探し出してそこに挿れる．カードを移動しながら挿入位置を探す．\ndef insertion_sort(lst): for i in range(0, len(lst), 1): key = lst[i] j = i - 1 while -1 \u0026lt; j and key \u0026lt; lst[j]: lst[j+1] = lst[j] j -= 1 lst[j+1] = key return lst Merge Sort 分割統治法．\ndef merge_sort(lst): return _merge_sort(lst, 0, len(lst)-1) def _merge_sort(lst, left, right): if left == right: return [lst[left]] middle = (left + right) // 2 lhs = _merge_sort(lst, left, middle) rhs = _merge_sort(lst, middle+1, right) return __merge(lhs, rhs) def __merge(a, b): ret = [] i = 0 j = 0 while i \u0026lt; len(a) and j \u0026lt; len(b): if a[i] \u0026lt; b[j]: ret.append(a[i]) i += 1 else: ret.append(b[j]) j += 1 if i \u0026lt; len(a): ret += a[i:] else: ret += b[j:] return ret Heap Sort ヒープを使って最大値を調べ続けることでソートする．\ndef heap_sort(lst): for i in range(len(lst)-1, 0, -1): _heapify(lst, 0, i) lst[0], lst[i] = lst[i], lst[0] return lst def _heapify(lst, left, right): parent = (left + right) // 2 while parent != -1: left_child = 2 * parent + 1 right_child = 2 * parent + 2 if right \u0026lt; left_child: # no child pass elif right \u0026lt; right_child: # only left child if lst[parent] \u0026lt; lst[left_child]: lst[parent], lst[left_child] = lst[left_child], lst[parent] else: # both child largest = right_child if lst[left_child] \u0026lt; lst[right_child] else left_child if lst[parent] \u0026lt; lst[largest]: lst[parent], lst[largest], lst[largest], lst[parent] parent -= 1 Quick Sort 分割統治法．\ndef quick_sort(lst): # base case if len(lst) == 0: return [] pivot = lst[0] # better strategy exists left = [] # less than pivot right = [] # more than pivot counter = 0 # number of elements that equal to pivot for ele in lst: if ele \u0026lt; pivot: left.append(ele) elif ele == pivot: counter += 1 else: # pivot \u0026lt; ele right.append(ele) left = quick_sort(left) right = quick_sort(right) return left + [pivot] * counter + right ","date":1616300773,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616300773,"objectID":"0bda1d507c35927975823d924db6664e","permalink":"/ja/post/sort-algorithms/","publishdate":"2021-03-21T13:26:13+09:00","relpermalink":"/ja/post/sort-algorithms/","section":"post","summary":"基本的なソートアルゴリズムを復習 Bubble Sort 隣り合う要素同士の比較を繰り返すことで，最大要素を順次確定させていく． def bubble_sort(lst): for idx in range(len(lst) - 1, 0, -1): for j in range(0, idx, 1): if","tags":[],"title":"Sort Algorithms","type":"post"},{"authors":[],"categories":[],"content":"何も見ないで Dijkstra 法を書けるようになりたい 何も見ないで Dijkstra 法を書けるようになりたい，ので，練習する． といってもただただ暗記するのは応用が効かないので，DFS・BFS と比較して覚えることにする．\nグラフ上の探索の一般形 「発見したけどまだ未訪問」の頂点リストから次に訪問する頂点の選び方の違いによって性格が変わる．\ndef traversal(graph, start, select_func): has_visited = set() suspended = list() has_visited.add(start) suspended.append(start) while len(suspended) != 0: u = select_func(suspended) # ここで探索の性格が決まる has_visited.add(u) for v in graph[u]: if v in has_visited: continue else: suspended.append(v) select_funcでsuspendedを stack みたいに扱うと DFS． select_funcでsuspendedを queue みたいに扱うと BFS．\nsuspendedを優先度付きキューとして扱えば Dijkstra 法 from heapq from heappush, heappop INF = 10 ** 9 def dijkstra(graph, start): has_visited = set() suspended = list() dist = [INF for _ in range(N)] has_visited.add(start) suspended.append((0, start)) dist[start] = 0 while len(suspended) != 0: d, u = heappop(suspended) # suspendedを優先度付きキューとして扱う has_visited.add(u) for (v, cost) in graph[u]: if v not in has_visited and dist[u] + cost \u0026lt; dist[v]: dist[v] = dist[u] + cost heappush(suspended, (dist[v], v)) return dist ついでに Prim 法 最小全域木を計算するアルゴリズム．頂点一つからなる木から始めて，木に含まれていない頂点と木に含まれる頂点を結ぶ辺のうち，重さの最小のものを採用し木に含まれる頂点を増やす，ということを繰り返す．Dijkstra 法に雰囲気似ている．\nfrom heapq import heapify, heappush, heappop def prim(graph): has_used = set() has_used.add(0) suspended = [(cost, 0, v) for v, cost in graph[0]] heapify(suspended) mst = [] mst_weight = 0 while len(suspended) != 0: cost, u, v = heappop(suspended) if u in has_used and v in has_used: continue has_used.add(u) has_used.add(v) mst.append((u, v)) mst_weight += cost for w, cost in graph[u]: if w in has_used: continue heappush(suspended, (cost, u, w)) for w, cost in graph[v]: if w in has_used: continue heappush(suspended, (cost, v, w)) suspended = list(set(suspended)) heaepify(suspended) return mst, mst_weight ","date":1616246827,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616246827,"objectID":"eda99d67bf0495fbcad11e95ae90fea0","permalink":"/ja/post/dijkstra-algorithm/","publishdate":"2021-03-20T22:27:07+09:00","relpermalink":"/ja/post/dijkstra-algorithm/","section":"post","summary":"何も見ないで Dijkstra 法を書けるようになりたい 何も見ないで Dijkstra 法を書けるようになりたい，ので，練習する． といってもただただ暗記するのは応用が効かないの","tags":[],"title":"Dijkstra Algorithm","type":"post"},{"authors":[],"categories":[],"content":"二分探索木 二分木の中でも，左の子供 \u0026lt;= 自分 \u0026lt; 右の子供となっているような木．\n頂点の挿入順序によって出来上がる木は複数パターンある．\n実装 class BinarySearchTreeNode: def __init__(self, key): self.key = key self.right = None self.left = None def insert(self, key): if self.key == key: return if self.key \u0026lt; key: if self.right is None: self.right = BinarySearchTreeNode(key) else: self.right.insert(key) else: # key \u0026lt; self.key: if self.left is None: self.left = BinarySearchTreeNode(key) else: self.left.insert(key) # ref: https://stackoverflow.com/questions/34012886/print-binary-tree-level-by-level-in-python def display(self): lines, *_ = self._display() for line in lines: print(line) def _display(self): \u0026#34;\u0026#34;\u0026#34;Returns list of strings, width, height, and horizontal coordinate of the root.\u0026#34;\u0026#34;\u0026#34; # No child. if self.right is None and self.left is None: line = \u0026#39;%s\u0026#39; % self.key width = len(line) height = 1 middle = width // 2 return [line], width, height, middle # Only left child. if self.right is None: lines, n, p, x = self.left._display() s = \u0026#39;%s\u0026#39; % self.key u = len(s) first_line = (x + 1) * \u0026#39; \u0026#39; + (n - x - 1) * \u0026#39;_\u0026#39; + s second_line = x * \u0026#39; \u0026#39; + \u0026#39;/\u0026#39; + (n - x - 1 + u) * \u0026#39; \u0026#39; shifted_lines = [line + u * \u0026#39; \u0026#39; for line in lines] return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2 # Only right child. if self.left is None: lines, n, p, x = self.right._display() s = \u0026#39;%s\u0026#39; % self.key u = len(s) first_line = s + x * \u0026#39;_\u0026#39; + (n - x) * \u0026#39; \u0026#39; second_line = (u + x) * \u0026#39; \u0026#39; + \u0026#39;\\\\\u0026#39; + (n - x - 1) * \u0026#39; \u0026#39; shifted_lines = [u * \u0026#39; \u0026#39; + line for line in lines] return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2 # Two children. left, n, p, x = self.left._display() right, m, q, y = self.right._display() s = \u0026#39;%s\u0026#39; % self.key u = len(s) first_line = (x + 1) * \u0026#39; \u0026#39; + (n - x - 1) * \u0026#39;_\u0026#39; + s + y * \u0026#39;_\u0026#39; + (m - y) * \u0026#39; \u0026#39; second_line = x * \u0026#39; \u0026#39; + \u0026#39;/\u0026#39; + (n - x - 1 + u + y) * \u0026#39; \u0026#39; + \u0026#39;\\\\\u0026#39; + (m - y - 1) * \u0026#39; \u0026#39; if p \u0026lt; q: left += [n * \u0026#39; \u0026#39;] * (q - p) elif q \u0026lt; p: right += [m * \u0026#39; \u0026#39;] * (p - q) zipped_lines = zip(left, right) lines = [first_line, second_line] + [a + u * \u0026#39; \u0026#39; + b for a, b in zipped_lines] return lines, n + m + u, max(p, q) + 2, n + u // 2 高さが最小の二分探索木 昇順にソートされたkeyの配列を渡されたときに，それらを格納する二分探索木のうち最も高さの小さいものを作る．\n考え方としては，高さが最小になるとき，左右の木の高さが等しいので，keyの真ん中ぐらいの大きさのものから格納していくとできそうという感じ．\ndef build_minimum_height_bst(keys): return _build_minimum_height_bst(keys, 0, len(keys) - 1) def _build_minimum_height_bst(keys, start, end): if end \u0026lt; start: return None middle = (start + end) // 2 root = BinarySearchTreeNode(keys[middle]) root.left = _build_minimum_height_bst(keys, start, middle - 1) root.right = _build_minimum_height_bst(keys, middle + 1, end) return root 深さごとのkeyのリスト 二分探索木から[ [深さ0のkeyのリスト], [深さ1のkeyのリスト], ...]を作る．二分探索木を横串に見る感じ．\ndef list_of_depths(root, lsts, level): if root is None: return lst = None if len(lsts) == level: # 深さ0のリストの存在に注意 lst = [] lsts.append(lst) else: lst = lsts[level] lst.append(root.key) list_of_depths(root.left, lsts, level + 1) list_of_depths(root.right, lsts, level + 1) return lsts BFS っぽくもできる．$n$段目を見終わった段階で$n+1$段目がsuspendedに入っているように実装する．\ndef list_of_depths(root): if root is None: return [] suspended = [] suspended.append(root) lsts = [] level = 0 while len(suspended) != 0: if len(lsts) == level: lsts.append([]) next_suspended = [] for u in suspended: lsts[level].append(u.key) if u.left is not None: next_suspended.append(u.left) if u.right is not None: next_suspended.append(u.right) suspended = next_suspended level += 1 return lsts 「その木は完全にバランスしているか？」 ここでは「その木に含まれるどの頂点を根とした部分木を考えてもその左右の部分木がバランスしている状態」を「完全にバランスしている」とする．左右の部分木の高さの差が 1 以下になっているかを調べる．要するに木の高さを求められますかという問題．ある頂点を根とする木の高さは，その頂点の左右の子供を根とする部分木のサイズの大きい方+1 なので再帰的に書ける．\ndef get_height(root): # base case if root is None: return -1 left = get_height(root.left) right = get_height(root.right) return max(left, right) + 1 def is_balanced(root): if root is None: return true diff = abs(get_height(root.left) - get_height(root.right)) if 1 \u0026lt; diff: return False else: return is_balanced(root.left) and is_balanced(root.right) ただこれだと効率が悪い．一部がバランスしてない事実が発覚した時点でそれ以上の木の高さを真面目に計算する必要がなくなるので，工夫する余地がある．\nその二分木は二分探索木？ 与えられた二分木が二分探索木になっているかを調べる．根から inorder で走査した結果が昇順にソートされていればその木は二分探索木の定義を満たす．\nclass Integer: def __init__(self, num): self.num = num last_visited = None def is_valid(root): if root is None: return True if not is_valid(root.left): return False if last_visited is not None and root.key \u0026lt;= last_visited.num: return False if not is_valid(root.right): return False return True def inorder(root): if root is None: return inorder(root.left) print(root.key) inorder(root.right) def preorder(root): if root is None: return print(root.key) preorder(root.left) preorder(root.right) def postorder(root): if root is None: return postorder(root.left) postorder(root.right) print(root.key) 間順走査順で次の頂点はどれか 注目頂点の右の部分木が存在するなら，その部分木の最も左側の頂点が次に訪問する頂点になる． 注目頂点の右の部分木が存在しないなら，注目頂点の親にとって注目頂点が左側の子なら，その親自身が次の頂点．\ndef left_most_child(root): if root is None: return None while root.left is not None: root = root.left return root def inorder_successor(root): if root is None: return None if root.right is not None: return left_most_child(root.right) else: q = root x = root.parent while x is not None and q is not x.left: q = x x = q.parent return x ","date":1616226834,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616226834,"objectID":"acd26e94c6534e50c408d2b84e074017","permalink":"/ja/post/binary-search-tree/","publishdate":"2021-03-20T16:53:54+09:00","relpermalink":"/ja/post/binary-search-tree/","section":"post","summary":"二分探索木 二分木の中でも，左の子供 \u0026lt;= 自分 \u0026lt; 右の子供となっているような木． 頂点の挿入順序によって出来上がる木は複数パターンある． 実装 class BinarySearchTreeNode: def __init__(self, key):","tags":[],"title":"Binary Search Tree","type":"post"},{"authors":[],"categories":[],"content":"問題 有向グラフと 2 頂点が与えられたとき，その 2 頂点間にパスがあるか判定せよ．\n答え 探索するだけ\nN = int(input()) # number of nodes M = int(input()) # number of edges start = int(input()) goal = int(input()) G = [[] for _ in range(N)] for _ in range(M): u, v = map(int, input(),split()) G[u].append(v) # G[v].append(u) # for undirected has_visited = set() def DFS(graph, node): has_visited.add(node) for neighbor in graph[node]: if neighbor in has_visited: continue else: DFS(graph, neighbor) DFS(G, start) if goal in has_visited: print(\u0026#34;reachable\u0026#34;) else: print(\u0026#34;unreachable\u0026#34;) ","date":1616226424,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616226424,"objectID":"779edfc3fa3770d0f21239ce6189cd12","permalink":"/ja/post/route-between-nodes/","publishdate":"2021-03-20T16:47:04+09:00","relpermalink":"/ja/post/route-between-nodes/","section":"post","summary":"問題 有向グラフと 2 頂点が与えられたとき，その 2 頂点間にパスがあるか判定せよ． 答え 探索するだけ N = int(input()) # number of nodes M = int(input()) # number of edges start = int(input()) goal = int(input()) G = [[] for","tags":[],"title":"Route Between Nodes","type":"post"},{"authors":[],"categories":[],"content":"問題 片連結リストが与えられたとき，そのリストがループしているか判定し，しているならどこでループしているのかを求めろ．\n答え 2 つのポインタ！\ndef check_loop(head): faster = head slower = head while faster is not None and faster.next_node is not None: faster = faster.next_node.next_node slower = slower.next_node if faster is slower: break # there is a loop! if faster is None or faster.next_node is None: return (False, None) slower = head while slower is not faster: slower = slower.next_node faster = faster.next_node return (True, slower) ","date":1616146739,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616146739,"objectID":"3bb4fc3c2a0a56de8a497b4c4a155d89","permalink":"/ja/post/find-loop-in-linked-list/","publishdate":"2021-03-19T18:38:59+09:00","relpermalink":"/ja/post/find-loop-in-linked-list/","section":"post","summary":"問題 片連結リストが与えられたとき，そのリストがループしているか判定し，しているならどこでループしているのかを求めろ． 答え 2 つのポインタ！ def check_loop(head):","tags":[],"title":"Find Loop in Linked List","type":"post"},{"authors":[],"categories":[],"content":"問題 2 つの片連結リストの頭を与えられる．この 2 つのリストがどこかで交わっているか，交わっているなら交わっているノードのデータを取れ．\n解答 交わっているか否かは両方のリストのお尻が同じノードなのかで判定できる．\nどこで交わっているのかは，2 つのリストの長さの差がわかれば簡単にわかる．\ndef check_intersection(ll0, ll1): ll0_tail = ll0 ll0_len = 0 ll1_tail = ll1 ll1_len = 0 while ll0_tail.next_node is not None: ll0_tail = ll0_tail.next_node ll0_len += 1 while ll1_tail.next_node is not None: ll1_tail = ll1_tail.next_node ll1_len += 1 if ll0_tail is not ll1_tail: return (False, None) diff = abs(ll0_len - ll1_len) longer = None shorter = None if ll0_len \u0026lt; ll1_len: longer = ll1 shorter = ll0 else: longer = ll0 shorter = ll1 for _ in range(diff): longer = longer.next_node while longer is not shorter: longer = longer.next_node shorter = shorter.next_node return (True, longer) ","date":1616145446,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616145446,"objectID":"8a37e06886d3dad63af5cc796eba8e92","permalink":"/ja/post/find-intersection-of-two-linked-lists/","publishdate":"2021-03-19T18:17:26+09:00","relpermalink":"/ja/post/find-intersection-of-two-linked-lists/","section":"post","summary":"問題 2 つの片連結リストの頭を与えられる．この 2 つのリストがどこかで交わっているか，交わっているなら交わっているノードのデータを取れ． 解答 交わ","tags":[],"title":"Find Intersection of Two Linked Lists","type":"post"},{"authors":[],"categories":[],"content":"問題 片連結リストが与えられたとき，そのリストが頭から読んでもお尻から読んでも同じかを判定する\n答え 逆転させたリストを作って各要素を確認\ndef reverse_linked_list(head): # base case if head.next_node is None: return LinkedListNode(head.data, None) reversed_head = reverse_linked_list(head.next_node) reversed_tail = reversed_head while reversed_tail.next_node is not None: reversed_tail = reversed_tail.next_node reversed_tail.next_node = LinkedListNode(head.data, None) return reversed_head def check_palindrome(head): reversed_head = reverse_linked_list(head) pointer0 = head pointer1 = reversed_head while pointer0 is not None and pointer1 is not None: if pointer0.data != pointer1.data: return False pointer0 = pointer0.next_node pointer1 = pointer1.next_node return True 別解：2 つポインタ + stack 2 つのポインタを使えば真ん中らへんが取れる．前半要素の逆順で後半要素が出てくれば Palindrome なのでそれを確認する．入れた順番の逆順で取り出せるデータ構造はstack\ndef check_palindrome(head): faster = head slower = head stack = [] while faster is not None and faster.next_node is not None: stack.append(slower.data) slower = slower.next_node faster = faster.next_node.next_node if faster is not None: slower = slower.next_node # skip middle node while len(stack) != 0: data = stack.pop() if data != slower.data: return False slower = slower.next_node return True ","date":1616142831,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616142831,"objectID":"2ed826c53ef1b4ca992d530a221c2b7d","permalink":"/ja/post/check-if-a-linked-list-is-palindrome/","publishdate":"2021-03-19T17:33:51+09:00","relpermalink":"/ja/post/check-if-a-linked-list-is-palindrome/","section":"post","summary":"問題 片連結リストが与えられたとき，そのリストが頭から読んでもお尻から読んでも同じかを判定する 答え 逆転させたリストを作って各要素を確認 def reverse_linked_list(head): # base","tags":[],"title":"Check if a Linked List Is Palindrome","type":"post"},{"authors":[],"categories":[],"content":"問題 2 つのリストを要素ごとに足し上げて 1 つのリストにする\n要するにこういうこと．\n(0) (1) (1) + + + [7] -\u0026gt; [1] -\u0026gt; [6] + + + [5] -\u0026gt; [9] -\u0026gt; [2] | | | v v v [2] -\u0026gt; [1] -\u0026gt; [9] (0) (1) (1) (1) + + + + [7] -\u0026gt; [1] -\u0026gt; [6] -\u0026gt; [1] + + + | [5] -\u0026gt; [9] -\u0026gt; [6] | | | | | v v v v [2] -\u0026gt; [1] -\u0026gt; [3] -\u0026gt; [2] 筆算みたい．\n答え 「繰り上がりと要素を 2 つ足す」を再帰的に繰り返す．\nclass LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node def sum_up_two_linked_lists(ll0, ll1, carry): # base case if ll0 is None and ll1 is None and carry == 0: return None data = carry if ll0 is not None: data += ll0.data if ll1 is not None: data += ll1.data result = LinkedListNode(-1, None) result.data = data if ll0 is not None or ll1 is not None: next_ll0 = None next_ll1 = None if ll0 is not None: next_ll0 = ll0.next_node if ll1 is not None: next_ll1 = ll1.next_node carry = result.data // 10 result.next_node = sum_up_two_linked_list(next_ll0, next_ll1, carry) return result 類題 数字が逆向きについていると\u0026hellip;\n(1) (1) (1) (0) + + + + [1] -\u0026gt; [6] -\u0026gt; [1] -\u0026gt; [7] | + + | | [6] -\u0026gt; [9] -\u0026gt; [5] | | | | v v v v [2] -\u0026gt; [3] -\u0026gt; [1] -\u0026gt; [2] 類題答え 大変そうなので片連結リストを逆転させて元の問題に帰着させる．\n# reverseしたリストのheadを返す def reverse_linked_list(head): # base case if head.next_node is None: return LinkedListNode(head.data, None) reversed_head = reverse_linked_list(head.next_node) reversed_tail = reversed_head while reversed_tail.next_node is not None: reversed_tail = reversed_tail.next_node reversed_tail.next_node = LinkedListNode(head.data, None) return reversed_head reverse_linked_list( sum_up_two_linked_lists( reverse_linked_list(ll0), reverse_linked_list(ll1), 0, ) ) ","date":1616138353,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616138353,"objectID":"88ab9fb89e7223fbe927f0b5a162e1bc","permalink":"/ja/post/sum-up-two-lists/","publishdate":"2021-03-19T16:19:13+09:00","relpermalink":"/ja/post/sum-up-two-lists/","section":"post","summary":"問題 2 つのリストを要素ごとに足し上げて 1 つのリストにする 要するにこういうこと． (0) (1) (1) + + + [7] -\u0026gt; [1] -\u0026gt; [6] + + + [5] -\u0026gt; [9] -\u0026gt; [2] | | | v v v [2] -\u0026gt; [1] -\u0026gt; [9] (0)","tags":[],"title":"Sum Up Two Lists","type":"post"},{"authors":[],"categories":[],"content":"問題 片連結リストの，後ろからk番目の要素を見つける．\nclass LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node 答え 片連結リストの長さLが与えられるなら，前からL-k番目を取ればいい．\n片連結リストの長さが与えられないときはチョット工夫する．\n 再帰で書く  def find_kth_to_last(node, k): # base case if node is None: return 0 idx = find_kth_to_last(node.next_node, k) + 1 if idx == k: print(\u0026#34;{}th to last: {}\u0026#34;.format(idx, node.data)) return idx  ポインタ 2 つ用意する．ポインタ同士がk離れているようにしておくことで時間計算量$O(n)$，空間計算量$O(1)$で済む．  def find_kth_to_last(head, k): pointer0 = head pointer1 = head for _ in range(k): pointer0 = pointer0.next_node while pointer0 is not None: pointer0 = pointer0.next_node pointer1 = pointer1.next_node print(\u0026#34;{}th to last: {}\u0026#34;.format(k, pointer1.data)) ","date":1616135256,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616135256,"objectID":"b3108b7cff1b0f78f397b390da8e5305","permalink":"/ja/post/kth-to-last-in-linked-list/","publishdate":"2021-03-19T15:27:36+09:00","relpermalink":"/ja/post/kth-to-last-in-linked-list/","section":"post","summary":"問題 片連結リストの，後ろからk番目の要素を見つける． class LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node 答え 片連結リストの長さLが与えられるなら，前からL-k番目を取れ","tags":[],"title":"Kth to Last in Linked List","type":"post"},{"authors":[],"categories":[],"content":"一つずつ舐めながら，重複しているならポインタの付替えをする\nclass LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node def remove_dups_from_linked_list(head): table = set() prev = None curr = head while curr is not None: if curr.data not in table: table.add(curr.data) prev = curr else: prev.next_node = curr.next_node curr = curr.next_node ","date":1616125675,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616125675,"objectID":"9b3ac7f402a325c313833c76ed592740","permalink":"/ja/post/remove-dups-from-unsorted-linked-list/","publishdate":"2021-03-19T12:47:55+09:00","relpermalink":"/ja/post/remove-dups-from-unsorted-linked-list/","section":"post","summary":"一つずつ舐めながら，重複しているならポインタの付替えをする class LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node def remove_dups_from_linked_list(head): table = set() prev = None curr = head while curr is not None: if curr.data not in table: table.add(curr.data) prev = curr else: prev.next_node = curr.next_node","tags":[],"title":"Remove Dups From Unsorted Linked List","type":"post"},{"authors":[],"categories":[],"content":"連結リストを織り込みたい 長さが偶数の連結リストを真ん中で切断して織り込みたい．\n要するにこれを\n[10] -\u0026gt; [11] -\u0026gt; [12] -\u0026gt; [13] -\u0026gt; [14] -\u0026gt; [15] -\u0026gt; [20] -\u0026gt; [21] -\u0026gt; [22] -\u0026gt; [23] -\u0026gt; [24] -\u0026gt; [25] こうしたい\n[10] -\u0026gt; [20] -\u0026gt; [11] -\u0026gt; [21] -\u0026gt; [12] -\u0026gt; [22] -\u0026gt; [13] -\u0026gt; [23] -\u0026gt; [14] -\u0026gt; [24] -\u0026gt; [15] -\u0026gt; [25] テク：二人走らせる  二倍の速さで走るポインタを用意すれば真ん中で切ることができる  class LinkedListNode: def __init__(self, data, next_node): self.data = data self.next_node = next_node def waven(head): faster = head slower = head while faster is not None: faster = faster.next_node.next_node slower = slower.next_node faster= head while slower is not None: next_faster = faster.next_node next_slower = slower.next_node faster.next_node = slower if next_slower is not None: slower.next_node = next_faster faster = next_faster slower = next_slower return head  waven linked list って英語は間違っていそう．  ","date":1616086513,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616086513,"objectID":"0448e4b97070ebea52b42e0ad8e21b07","permalink":"/ja/post/waven-lined-list/","publishdate":"2021-03-19T01:55:13+09:00","relpermalink":"/ja/post/waven-lined-list/","section":"post","summary":"連結リストを織り込みたい 長さが偶数の連結リストを真ん中で切断して織り込みたい． 要するにこれを [10] -\u0026gt; [11] -\u0026gt; [12] -\u0026gt; [13] -\u0026gt; [14] -\u0026gt; [15] -\u0026gt; [20] -\u0026gt; [21] -\u0026gt; [22] -\u0026gt; [23] -\u0026gt; [24] -\u0026gt; [25] こ","tags":[],"title":"Waven Lined List","type":"post"},{"authors":[],"categories":[],"content":"問題 二次元配列Xが与えられる．ここでX[i][j] == 0ならばi行目全体とj列目全体を0にしたい．\n1 2 3 1 2 0 4 5 0 -\u0026gt; 0 0 0 7 8 9 7 8 0 何も考えずに左上から右下に向かって走査しながら0を見つけ次第その行と列を0にするってやっていくと，行列全体が0になってかなしい気持ちになる．\n落ち着いて真面目にやる 走査と0埋めを別個にやれば全部0にはならない．\ndef set_zeros(table): ROW = len(table) COL = len(table[0]) row_with_zero = [False for _ in range(ROW)] col_with_zero = [False for _ in range(COL)] for r in range(ROW): for c in range(COL): if table[r][c] == 0: row_with_zero[r] = True col_with_zero[c] = True for r in range(ROW): if row_with_zero[r]: for c in range(COL): table[r][c] = 0 for c in range(COL): if col_with_zero[c]: for r in range(ROW): table[r][c] = 0 return table ","date":1616083669,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616083669,"objectID":"2053f2a99d9bd3aee8e3374d664813e4","permalink":"/ja/post/zero-matrix/","publishdate":"2021-03-19T01:07:49+09:00","relpermalink":"/ja/post/zero-matrix/","section":"post","summary":"問題 二次元配列Xが与えられる．ここでX[i][j] == 0ならばi行目全体とj列目全体を0にしたい． 1 2 3 1 2 0 4 5 0 -\u0026gt; 0 0 0 7 8 9 7 8 0 何も考","tags":[],"title":"Zero Matrix","type":"post"},{"authors":[],"categories":[],"content":"二次元配列を回転したい 頭が混乱してしまうのでまとめる．\n反時計回りに 90 度回転  回転後の行列を左上から右下へ埋めていくイメージ つまり回転前の行列の右上から左下へ拾っていく 僕の頭的には，回転後の行列の座標の軌跡を正として回転前の位置を参照する方が書きやすいみたい．  def rotate_counterclockwise(table): ROW = len(table[0]) # 回転後の行数は回転前の列数 COL = len(table) # 回転後の列数は回転前の行数 rotated = [[0 for _ in range(COL)] for _ in range(ROW)] for r in range(ROW): for c in range(COL): rotated[r][c] = table[c][ROW - r - 1] return rotated 時計回りに 90 度回転  回転後の行列を左上から右下へ埋めていくイメージ つまり回転前の行列の左下から右上へ拾っていく  def rotate_clockwise(table): ROW = len(table[0]) # 回転後の行数は回転前の列数 COL = len(table) # 回転後の列数は回転前の行数 rotated = [[0 for _ in range(COL)] for _ in range(ROW)] for r in range(ROW): for c in range(COL): rotated[r][c] = table[COL - c - 1][r] return rotated かっこいい書き方  zipを使うと左 90 度回転はかっこよくかける zipで回転後の行列を行ごとに下から集めたものが取れるので，最後にそれを逆順にする ref: https://stackoverflow.com/questions/8421337/rotating-a-two-dimensional-array-in-python  def rotate_counterclockwise(table): return [list(row) for row in zip(*table)][::-1]  豆知識：左 90 度回転 x 3 == 右 90 度回転  ","date":1616080414,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1616080414,"objectID":"7c6a930ffdfee961247d52b6c76bcb0b","permalink":"/ja/post/rotate-2d-array/","publishdate":"2021-03-19T00:13:34+09:00","relpermalink":"/ja/post/rotate-2d-array/","section":"post","summary":"二次元配列を回転したい 頭が混乱してしまうのでまとめる． 反時計回りに 90 度回転 回転後の行列を左上から右下へ埋めていくイメージ つまり回転前の行列の","tags":[],"title":"2次元配列を回転したい","type":"post"},{"authors":[],"categories":[],"content":"100 lockers ref: http://mathforum.org/library/drmath/view/56747.html\nある駅に 100 個のロッカーが設置された．各ロッカーには番号が$1$，$2$，$3$\u0026hellip;，$99$，$100$と振られており，すべての扉が閉じている．今から私は$i$（$i = 1, 2, \u0026hellip;, 99, 100$）回以下の行動をする．\n $i$の倍数の番号のロッカーを，開いていれば閉め，閉まっていれば開ける  この行動はあまりに奇人なので，やりたくない．が，やったあとに開いている扉がどれなのかはどうしても知りたい．君に教えてほしい．\n  初期状態では扉は全て閉じているので，奇数回操作の対象になると扉が開いていることになる．ここで扉$n$は$n$の約数回目に操作の対象になる．ということは最後に残っているのは扉の番号の約数が奇数個の扉である．約数が奇数個となるような数字は，平方数しかない．よって，最後に開いている扉は$1$，$4$，$9$，$16$，$25$，$36$，$49$，$64$，$81$，$100$の 10 の扉．\n ","date":1608195386,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1608195386,"objectID":"8c222117c332f47ebd82743b87ad6519","permalink":"/ja/post/puzzle-100-lockers/","publishdate":"2020-12-17T17:56:26+09:00","relpermalink":"/ja/post/puzzle-100-lockers/","section":"post","summary":"100 lockers ref: http://mathforum.org/library/drmath/view/56747.html ある駅に 100 個のロッカーが設置された．各ロッカーには番号が$1$，$2$，$3$\u0026hellip;，$99$，$100$と振られており，","tags":["puzzle"],"title":"Puzzle: 100 Lockers","type":"post"},{"authors":[],"categories":[],"content":"Ants on a Polygon ref: https://www.geeksforgeeks.org/puzzle-21-3-ants-and-triangle/\n$n$角形の拡張点に 🐜 がいる．私の掛け声で 🐜 は一斉にどちらかの辺を選んで歩き出す．🐜 が辺上で衝突する確率を求めよ．\n  $n$匹の 🐜 が全部同じ方向を選べば衝突はしない．すべての 🐜 が時計回りの枝を選ぶ確率は\n$$ \\frac{1}{2^n} $$\n同じように，すべての 🐜 が反時計回りの枝を選ぶ確率は\n$$ \\frac{1}{2^n} $$\nすべての 🐜 が同じ方向を選ぶ確率は\n$$ 2 \\times \\frac{1}{2^n} = \\frac{1}{2^{n-1}} $$\nよって衝突する確率は\n$$ 1 - \\frac{1}{2^{n-1}} $$\n ","date":1608194790,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1608194790,"objectID":"2920f67c3c4f181fbf6334a96a44dbb1","permalink":"/ja/post/puzzle-ants-on-a-polygon/","publishdate":"2020-12-17T17:46:30+09:00","relpermalink":"/ja/post/puzzle-ants-on-a-polygon/","section":"post","summary":"Ants on a Polygon ref: https://www.geeksforgeeks.org/puzzle-21-3-ants-and-triangle/ $n$角形の拡張点に 🐜 がいる．私の掛け声で 🐜 は一斉にどちらかの辺を選んで歩き出す．🐜 が辺上で衝突する確率を求めよ． $n$匹の 🐜 が","tags":["Puzzle"],"title":"Puzzle: Ants on a Polygon","type":"post"},{"authors":[],"categories":[],"content":"The heavy pill ref: https://www.geeksforgeeks.org/puzzle-10-identical-bottles-pills/\n目の前に 10 種類の錠剤の瓶が置かれている．それぞれの瓶には十分な量の錠剤が入っている．各瓶には番号が振られており，それぞれ1/2/3/4/5/6/7/8/9/10である．これらの錠剤のうち，ある一つの瓶に含まれている錠剤は重さが 1.1g で他の錠剤は 1g である．測りを 1 回だけ用いて「どの瓶に含まれる錠剤が重さ 1.1g の錠剤であるか」を求めたい．どのようにすればよいだろうか．\n  $i = 1, 2, \u0026hellip;, 9, 10$に対して，瓶$i$から$i$粒の錠剤を取り出し測りに載せる．測りの指す合計重量$X$を読み取る．番号$(X-55)/0.1$の瓶が 1.1g の錠剤の瓶である．\n ","date":1608193843,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1608193843,"objectID":"ff803954e1197e89856b0aae25446b7e","permalink":"/ja/post/puzzle-heavy-pill/","publishdate":"2020-12-17T17:30:43+09:00","relpermalink":"/ja/post/puzzle-heavy-pill/","section":"post","summary":"The heavy pill ref: https://www.geeksforgeeks.org/puzzle-10-identical-bottles-pills/ 目の前に 10 種類の錠剤の瓶が置かれている．それぞれの瓶には十分な量の錠剤が入っている．各瓶には番号が振られており，それぞれ1/2/3","tags":["puzzle"],"title":"Puzzle: Heavy Pill","type":"post"},{"authors":[],"categories":[],"content":"忘れないようにメモ  0xF = 0b1111：0x一文字は 4bits 0xFF = 0b1111 1111：0x二文字は 8bits（1byte）  if (n \u0026amp; (n-1)) == 0 if n = xxxxx 1000 then n - 1 = xxxxx 0111 ------------------------ n \u0026amp; (n - 1) = ????? 0000 なので，if (n \u0026amp; (n-1)) == 0が true なら?????が00000であり，つまりxxxxxが00000であるから，\nn = 00000 1000 ということになる．\nif (n \u0026amp; (n-1)) == 0は「nが 2 のべき乗であるか」を確認している．\n","date":1608102089,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1608102089,"objectID":"07f403fbece781ade8533256cfc92f28","permalink":"/ja/post/check-n-is-power-of-2/","publishdate":"2020-12-16T16:01:29+09:00","relpermalink":"/ja/post/check-n-is-power-of-2/","section":"post","summary":"`n`が2のべき乗であるか","tags":["ビット","bit manipulation","atcoder","競技プログラミング","競プロ"],"title":"if (n \u0026 (n-1)) == 0","type":"post"},{"authors":[],"categories":[],"content":"${}_n \\mathrm{C} _r$の定義 異なる$n$個のものから$r$個を選ぶ組み合わせの総数．\nいろんな実装  再帰的に計算する  long long combination(long long n, long long r) { if (n == r || r == 0) return 1; else return combination(n - 1, r - 1) + combination(n - 1, r); }  パスカルの三角形を用いる  二次元配列の下半分をパスカルの三角形のルールに従って埋めていく 小さいところから埋まっていくので直接定義式どおりに計算したときにオーバーフローするような大きい組み合わせを計算できる．  ABC185-Cはこれを使って AC      vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; combination(long long n, long long r) { vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; table(n+1, vector\u0026lt;long long\u0026gt;(n+1, 0)); for (int i = 0; i \u0026lt; table.size(); i++) { table[i][0] = 1; table[i][i] = 1; } for (int j = 1; j \u0026lt; table.size(); j++) { for (int k = 1; k \u0026lt; j; k++) { table[j][k] = table[j - 1][k - 1] + table[j - 1][k]; // 真上と左上の和  } } return table; // table[n][r]がnCrの値 } ","date":1607904000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1607904000,"objectID":"11e8f2a978c9250f3c268a05b691c109","permalink":"/ja/post/calc-combination/","publishdate":"2020-12-14T09:00:00+09:00","relpermalink":"/ja/post/calc-combination/","section":"post","summary":"パスカルの三角形で高速に組み合わせ計算","tags":["組み合わせ","combination","AtCoder","競技プログラミング","競プロ"],"title":"組み合わせを高速に計算する","type":"post"},{"authors":[],"categories":[],"content":"全探索を再帰関数でやるときの 2 流派 全探索を再帰関数で書くにはたいてい 2 流派ある．\n 状態情報を配っていく再帰 状態情報を集めていく再帰  全探索しなければならない問題では，探索すべき状態数が指数的に増加してしまうので，問題の制約が小さめであることが多い．大体 $10$ から $20$ ぐらいだと全探索できる．\n部分和問題  【問題】 $n$個の整数列 $a_1, a_2, \u0026hellip; , a_{n-1}$ から部分集合をうまく選んで，その集合内の数の和を $W$ に等しくすることができるか判定せよ．\n【制約】 $1 \\leq n \\leq 20$\n 状態情報を配っていく再帰 このタイプの再帰では 再帰的な樹形図の最小単位 をそのまま再帰関数が表現していると捉えるとわかりやすい．\nrec(状態を表す変数) { if (状態が樹形図の末端である) { // ベースケース 条件に対してこの状態が妥当であるかの確認 return; } rec(次の状態1) rec(次の遷移2) } 樹形図上を深さ優先探索して，末端の状態にたどり着いてから条件との整合性チェックをする．\nこの方針で部分和問題を解いてみる．ここでは状態を\n(何番目までの項を用いるか, その時点での部分和) として表現している．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int N, W; vector\u0026lt;int\u0026gt; a; bool rec(int depth, int sum) { // 樹形図の末端に到達したとき  if (depth == N) { if (sum == W) return true; else return false; } // a[depth]を部分和計算に用いる場合  if (rec(depth+1, sum + a[depth])) return true; // a[depth]を部分和計算に用いない場合  if (rec(depth+1, sum)) return true; return false; } int main() { cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; a.resize(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; // 状態(0, 0)から樹形図を末端に向かって深さ優先探索  if (rec(0, 0)) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } 状態情報を集めていく再帰 配っていく再帰との対比で考えると，集めていく再帰では状態を\n(何番目以降の項を用いるか, その時点でのWとの差) で状態を表現することになる．「実現したい和 W との差」で状態を表現するところが配る再帰とは違っている．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int N, W; vector\u0026lt;int\u0026gt; a; bool rec(int idx, int remain) { // 樹形図の末端に到達したとき: N番目以降の項を用いるときの部分和は自明  if (idx == N) { if (remain == 0) return true; else return false; } // a[idx]を部分和計算に用いる場合  if (a[idx] \u0026lt;= remain \u0026amp;\u0026amp; rec(idx+1, remain - a[idx])) return true; // a[idx]を部分和計算に用いない場合  if (rec(idx+1, remain)) return true; return false; } int main() { cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; a.resize(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; // 状態(0, W)から樹形図を末端に向かって深さ優先探索  if (rec(0, W)) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } 状態の定義次第では別の書き方もできる．状態を\n(0から何番目までの項を用いたか, その時点でのWとの差) とすると，\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int N, W; vector\u0026lt;int\u0026gt; a; bool rec(int idx, int remain) { // 樹形図の末端に到達したとき: 0番目までの項を用いた時の部分和は自明  if (idx == 0) { if (remain == 0) return true; else return false; } // a[idx-1]を部分和計算に用いる場合  if (a[idx-1] \u0026lt;= remain \u0026amp;\u0026amp; rec(idx-1, remain - a[idx-1])) return true; // a[idx-1]を部分和計算に用いない場合  if (rec(idx-1, remain)) return true; return false; } int main() { cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; a.resize(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; // 状態(N, W)から樹形図を末端に向かって深さ優先探索  if (rec(N, W)) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } 状態情報を集めていく再帰でメモ化 集めていく再帰では，サイズ $n$ の問題を解くために サイズ $n-1$ の問題の結果を利用するのだから，それを配列などにメモしておけば再帰計算の無駄を減らせる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int N, W; vector\u0026lt;int\u0026gt; a; // dp[i][j]: i番目までの項を用いて部分和Wとの差をjにできたか // -1: まだ解決していない // 0: できない // 1: できる vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp; int rec(int idx, int remain) { // まずメモを確認  if (dp[idx][remain] != -1) return dp[idx][remain]; // すでに計算してあったのでメモの内容を返す  // 樹形図の末端に到達したとき: 0番目までの工を用いた時の部分和は自明  if (idx == 0) { if (remain == 0) return true; else return false; } int ans = 0; // a[idx-1]を部分和計算に用いる場合  if (a[idx-1] \u0026lt;= renaib \u0026amp;\u0026amp; rec(idx-1, remain - a[idx-1])) ans = 1; // a[idx-1]を部分和計算に用いない場合  if (rec(idx-1, remain)) ans = 1; return dp[idx][remain] = ans; } int main() { cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; a.resize(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; // dpテーブル初期化  dp.assign(N+1, vector\u0026lt;int\u0026gt;(W+1, -1)); // 状態(N, W)から樹形図を末端に向かって深さ優先探索  if (rec(N, W) == 1) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } 再帰ではなく bit 全探索で 項の選び方を 2 進数にエンコードして状態を表現することもできる．そうすれば bit 全探索になる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N, W; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; vector\u0026lt;int\u0026gt; a(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); bit++) { int tmpsum = 0; for (int i = 0; i \u0026lt; N; i++) { if (bit \u0026amp;\u0026amp; (1 \u0026lt;\u0026lt; i)) { tmpsum += a[i]; } } if (tmpsum == W) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ","date":1589287961,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1589287961,"objectID":"9fa535b48d7fdf0bb6a0f261eb3b188b","permalink":"/ja/post/partial-sums/","publishdate":"2020-05-12T21:52:41+09:00","relpermalink":"/ja/post/partial-sums/","section":"post","summary":"部分和問題で全探索に慣れる","tags":["部分和問題","全探索","AtCoder","競技プログラミング","競プロ"],"title":"部分和問題","type":"post"},{"authors":[],"categories":[],"content":"2 つのポインタを使う ソート済み の整数配列から，和が $X$ となるような 2 要素を選ぶ問題を解く．\nナイーブなやり方は全探索で $O(n^2)$ かかる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; int x; cin \u0026gt;\u0026gt; x; vector\u0026lt;int\u0026gt; a(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; sort(a.begin(), a.end()); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { if (a[i] + a[j] == x) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \u0026#34; + \u0026#34; \u0026lt;\u0026lt; a[j] \u0026lt;\u0026lt; endl; } if (x \u0026lt; a[i] + a[j]) break; } } cout \u0026lt;\u0026lt; \u0026#34;non\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 2 つのポインタで左右から探しに行くと $O(n)$\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; int x; cin \u0026gt;\u0026gt; x; vector\u0026lt;int\u0026gt; a(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; sort(a.begin(), a.end()); int i = 0, j = n-1; while (i \u0026lt; j) { if (a[i] + a[j] == x) { cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \u0026#34; + \u0026#34; \u0026lt;\u0026lt; a[j] \u0026lt;\u0026lt; endl; } else if (a[i] + a[j] \u0026lt; x) i++; else j--s; } return 0; } ","date":1589116164,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1589116164,"objectID":"95cf2e5b59da53e3f9cd6feaee61ff1d","permalink":"/ja/post/two-pointers/","publishdate":"2020-05-10T22:09:24+09:00","relpermalink":"/ja/post/two-pointers/","section":"post","summary":"2 つのポインタを使う ソート済み の整数配列から，和が $X$ となるような 2 要素を選ぶ問題を解く． ナイーブなやり方は全探索で $O(n^2)$ かかる． #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int","tags":["Two Pointers","競プロ","競技プログラミング"],"title":"Two Pointers","type":"post"},{"authors":[],"categories":[],"content":"複数の要素をまとめてソート pair を使うと簡単．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt;, a(n); for (int i = 0; i \u0026lt; n; i++) { int no; string name; cin \u0026gt;\u0026gt; no \u0026gt;\u0026gt; name; cin \u0026gt;\u0026gt; no \u0026gt;\u0026gt; name; // ソートの優先順位は第1要素・第2要素の順  sort(a.begin(), a.end()); for (int i = 0; i \u0026lt; n; i++) { cout \u0026lt;\u0026lt; a[i].first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; a[i].second \u0026lt;\u0026lt; endl; } } return 0; } ソート順序の指定 std::sort() ではデフォルトでは昇順． greater関数を比較関数として与えると降順にできる．また，独自に比較関数を自作して与えても良い．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; void print_vector(vector\u0026lt;int\u0026gt; \u0026amp;v) { cout \u0026lt;\u0026lt; \u0026#34;[\u0026#34;; for (int i = 0; i \u0026lt; v.size(); i++) cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; v[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;]\u0026#34; \u0026lt;\u0026lt; endl; } bool less_mod3(int lhs, int rhs) { if ((lhs - rhs) % 3 != 0) return lhs % 3 \u0026lt; rhs % 3; else return lhs \u0026lt; rhs; } int main() { vector\u0026lt;int\u0026gt; a = {1, 4, -1, 3, 9, 5, 7}; sort(a.begin(), a.end()); print_vector(a); sort(a.begin(), a.end(), greater\u0026lt;int\u0026gt;()); print_vector(a); sort(a.begin(), a.end(), less_mod3); print_vector(a); return 0; } 構造体のソート \u0026lt; 演算子をオーバーロドするとよいかも．ただ pair とかの組み合わせで管理できるならそっちのほうが手間はかからない感．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct Student { int no, math, english; bool operator\u0026lt;(const Student \u0026amp;s) const { if (math != s.math) return math \u0026gt; s.math; if (english != s.english) return english \u0026gt; s.english; return no \u0026lt; s.no; } } int main() { int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;Student\u0026gt; vec(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; vec[i].no \u0026gt;\u0026gt; vec[i].math \u0026gt;\u0026gt; vec[i].english; sort(vec.begin(), vec.end()); for (int i = 0; i \u0026lt; n; i++) cout \u0026lt;\u0026lt; vec[i].no \u0026lt;\u0026lt; endl; return 0; } 演習  AIZU ONLINE JUDGE 0018 Sorting Five Numbers  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { vector\u0026lt;int\u0026gt; p(5); for (int i = 0; i \u0026lt; 5; i++) cin \u0026gt;\u0026gt; p[i]; sort(p.begin(), p.end(), greater\u0026lt;int\u0026gt;()); for (int i = 0; i \u0026lt; 5; i++) { if (i == 4) { cout \u0026lt;\u0026lt; p[i] \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; p[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } } return 0; }  AIZU ONLINE JUDGE 2198 Problem B: Moonlight Farm  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct Seed { string l; int p, a, b, c, d, e, f, s, m; double efficiency; void calc() { double duration = a + b + c + (d + e) * m; double gain = f * s * m - p; efficiency = gain / duration; } bool operator\u0026lt;(const Seed \u0026amp;s) const { return efficiency == s.efficiency ? (l \u0026lt; s.l) : efficiency \u0026gt; s.efficiency; } }; int main() { int n; while (cin \u0026gt;\u0026gt; n) { if (n == 0) break; vector\u0026lt;Seed\u0026gt; seeds(n); Seed s; for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; s.l \u0026gt;\u0026gt; s.p \u0026gt;\u0026gt; s.a \u0026gt;\u0026gt; s.b \u0026gt;\u0026gt; s.c \u0026gt;\u0026gt; s.d \u0026gt;\u0026gt; s.e \u0026gt;\u0026gt; s.f \u0026gt;\u0026gt; s.s \u0026gt;\u0026gt; s.m; s.calc(); seeds.push_back(s); } sort(seeds.begin(), seeds.end()); for (int i = 0; i \u0026lt; n; i++) cout \u0026lt;\u0026lt; seeds[i].l \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;#\u0026#34; \u0026lt;\u0026lt; endl; } return 0; } ","date":1589109543,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1589109543,"objectID":"6dc50be2d5089aef66707ba4068e5a07","permalink":"/ja/post/sorting/","publishdate":"2020-05-10T20:19:03+09:00","relpermalink":"/ja/post/sorting/","section":"post","summary":"複数の要素をまとめてソート pair を使うと簡単． #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt;, a(n); for (int i = 0; i \u0026lt; n; i++) { int no; string name; cin \u0026gt;\u0026gt; no \u0026gt;\u0026gt; name; cin \u0026gt;\u0026gt; no \u0026gt;\u0026gt; name; // ソートの優先順位は第1要","tags":["ソート","C++","競プロ","競技プログラミング","メモ"],"title":"C++でソートする","type":"post"},{"authors":[],"categories":[],"content":"スタックとキュー スタックとキューはとても基本的なデータ構造．スタックとキューの本質は データをどのように扱うか という部分．スタックやキューは配列や連結リストを用いて用意に実装でき，配列や連結リストの上手な使い方の部分がスタックやキューの本質であるとも言える．まあ，組み込み系など資源が限られている環境では実装方法自体に注意を向ける必要があることもある．\nスタック スタックは「データをLast-In-First-Outというマナーで扱う」データ構造である．スタックには，「データを積む」と「データを取り出す」という操作ができる．ここで大事なのは， 一番最後に追加したアイテムを一番最初に取り出す というところである．\nキュー キューは「データをFirst-In-First-Outというマナーで扱う」データ構造である．キューには「データを入れる」と「データを取り出す」という操作ができ，大事なのは 一番最初に追加したアテムを一番最初に取り出す というところである．\n実装 簡易的な実装をしてみる．スタックとキューはとても基本的で大事なデータ構造なので，大抵の場合もっと作り込まれた実装が標準ライブラリなどの形で提供されているので，自前実装よりそっちを使うほうが安心感がある．以下では配列を用いた実装を示すが，ほかにも連結リストを用いて実装することもできる．\nスタック スタックを配列を用いて実装する．ここではスタックの一番上を指す変数topが必要になり，このtopがスタックの真髄．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int MAX = 1000000; int st[MAX]; int top = 0; void init() { top = 0; } bool is_empty() { return (top == 0); } bool is_full() { return (top == MAX); } void push(int v) { if (is_full()) { cout \u0026lt;\u0026lt; \u0026#34;error: stack is full\u0026#34; \u0026lt;\u0026lt; endl; return; } st[top] = v; top++; } int pop() { if (is_empty()) { cout \u0026lt;\u0026lt; \u0026#34;error: sstack is empty\u0026#34; \u0026lt;\u0026lt; endl; return -1; } top--; return st[top]; } int main() { init(); push(3); push(5); push(7); cout \u0026lt;\u0026lt; pop() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; pop() \u0026lt;\u0026lt; endl; push(9); cout \u0026lt;\u0026lt; pop() \u0026lt;\u0026lt; endl; return 0; } キュー キューを配列を用いて実装する．ここではキューの頭とお尻の管理が必要になる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int MAX = 1000000; int qu[MAX]; int tail = 0, head = 0; void init() { head = tail = 0; } bool is_empty() { return (head == tail); } bool is_full() { return (head == (tail+1)%MAX); } void enqueue(int v) { if (is_full()) { cout \u0026lt;\u0026lt; \u0026#34;error: queue is full\u0026#34; \u0026lt;\u0026lt; endl; return; } qu[tail] = v; tail++; if (tail == MAX) { tail == 0; } } int dequeue() { if (is_empty()) { cout \u0026lt;\u0026lt; \u0026#34;error: queue is empty\u0026#34; \u0026lt;\u0026lt; endl; return -1; } int res = qu[head]; head++; if (head == MAX) head = 0; return res; } int main() { init(); enqueue(3); enqueue(5); enqueue(7); cout \u0026lt;\u0026lt; dequeue() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; dequeue() \u0026lt;\u0026lt; endl; enqueue(9); cout \u0026lt;\u0026lt; dequeue() \u0026lt;\u0026lt; endl; return 0; } 標準ライブラリを使う  std::stack  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { stack\u0026lt;int\u0026gt; s; s.push(3); s.push(5); s.push(7); cout \u0026lt;\u0026lt; s.top() \u0026lt;\u0026lt; endl; s.pop(); cout \u0026lt;\u0026lt; s.top() \u0026lt;\u0026lt; endl; s.pop(); cout \u0026lt;\u0026lt; s.top() \u0026lt;\u0026lt; endl; s.pop(); s.push(9); cout \u0026lt;\u0026lt; s.top() \u0026lt;\u0026lt; endl; s.pop(); reteurn 0; }  std::queue  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { queue\u0026lt;int\u0026gt; q; q.push(3); q.push(5); q.push(7); cout \u0026lt;\u0026lt; q.front() \u0026lt;\u0026lt; endl; q.pop(); cout \u0026lt;\u0026lt; q.front() \u0026lt;\u0026lt; endl; q.pop(); cout \u0026lt;\u0026lt; q.front() \u0026lt;\u0026lt; endl; q.pop(); q.push(9); cout \u0026lt;\u0026lt; q.front() \u0026lt;\u0026lt; endl; q.pop(); return 0; } スタックやキューで解決できる問題 カッコ列の整合性をスタックを用いて確認する問題 ((()(()))())(())のようなカッコ記号の列が与えられたときに，左括弧と右括弧の対応がきちんと取れているのかを確認する問題は，スタックを用いることできれいに解ける．\nカッコ列の特徴は，カッコ列を左から読んでいったときに 一番最後に見つけた左括弧に対応するのは，一番最初に見つけた右括弧である というところである．この性質がまさしく LIFOであり，スタックを用いるときれいに解ける理由である．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; bool check(const string \u0026amp;s) { stack\u0026lt;int\u0026gt; st; vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; ps; for (int i = 0; i \u0026lt; (int)s.size(); i++) { if (s[i] == \u0026#39;(\u0026#39;) st.push(i); else { if (st.empty()) { cout \u0026lt;\u0026lt; \u0026#34;error\u0026#34; \u0026lt;\u0026lt; endl; return false; } int t = st.top(); st.pop(); ps.push_back(make_pair(t, i)); } } if (!st.empty()) { cout \u0026lt;\u0026lt; \u0026#34;too many (\u0026#34; \u0026lt;\u0026lt; endl; return false; } sort(ps.begin(), ps.end()); for (auto p: ps) { cout \u0026lt;\u0026lt; \u0026#34;[\u0026#34; \u0026lt;\u0026lt; p.first \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; p.second \u0026lt;\u0026lt; \u0026#34;]\u0026#34; \u0026lt;\u0026lt; endl; } } int main() { check(\u0026#34;((()(()))())(())\u0026#34;); return 0; } 逆ポーランド記法で記述された数式の計算 逆ポーランド記法とは，数式の記法の1つで，\n$$ (1 + 2) \\times (3 - 4) $$\nという一般的なものに対して，\n$$ 1 \\space 2 \\space + 3 \\space 4 \\space - \\space \\times $$\nと， 演算子を，演算対象に対して後置する ような記法である．\n逆ポーランド記法の特徴は，逆ポーランド記法で書かれた数式を左から右へ読んでいく時に，最初に遭遇する演算子の適用先が，一番最後に遭遇する数字であるという点である．この特徴がスタックのデータの扱い方と符合する．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { string s; stack\u0026lt;int\u0026gt; st; while (cin \u0026gt;\u0026gt; s) { if (s == \u0026#34;|\u0026#34;) break; int a, b; if (s == \u0026#34;+\u0026#34;) { b = st.top(); st.pop(); a = st.top(); st.pop(); st.push(a + b); } else if (s == \u0026#34;-\u0026#34;) { b = st.top(); st.pop(); a = st.top(); st.pop(); st.push(a - b); } else if (s == \u0026#34;*\u0026#34;) { b = st.top(); st.pop(); a = st.top(); st.pop(); st.push(a * b); } else if (s == \u0026#34;/\u0026#34;) { b = st.top(); st.pop(); a = st.top(); st.pop(); st.push(a / b); } else { st.push(stoi(s)); } } cout \u0026lt;\u0026lt; st.top() \u0026lt;\u0026lt; endl; return 0; } ヒストグラム中の面積最大の長方形 ヒストグラムが与えられたときに，そのヒストグラムの外枠に内包されるような長方形のうち，面積が最大のものを求める問題はスタックで解くことができる．\nスタックを使わないで求めようとするならば，長方形の底辺を形成する範囲を全て探索すれば原理的には解くことができ，$O(n^2)$の計算量がかかる．\nint get_rectangle_area(int size, int buffer[]) { int maxv = 0; for (int i = 0; i \u0026lt; size; i++) { for (int j = i; j \u0026lt; size; j++) { int minh = INF; for (int k = i; k \u0026lt;= j; k++) { minh = min(minh, buffer[k]); } maxv = max(maxv, minh * (j-i+1)); } } return maxv; } これをスタックを用いると，$O(n)$で解くことができる．\nスタックにはヒストグラムを形成する各長方形の情報を記録する．この情報には，長方形の高さheightとその左端の位置posが記録されている．まず，スタックを空にして，ヒストグラムを左から順番に右に向かって見ていきながら（iが0からn-1まで動きながら）\n スタックが空ならば，スタックに今見ている長方形の情報(height, pos)を積む スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より低いならば，スタックに今見ている長方形の(height, pos)を積む スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より等しいならば，何もしない スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形より高いならば，  スタックが空でなく，スタックの最上位に積まれている長方形の情報の高さが，今見ている長方形の高さ以上である限り，スタックから長方形の情報を取り出し，その面積を計算し，最大値を更新する．長方形の横の長さは現在の位置と記録されている左端の位置から計算できる． 1が終わったら，スタックに今見ている長方形の情報を追加する．ただし，このときの左端の位置は最後にスタックから取り出した長方形のposの値とする．    #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int MAX = 110000; struct Rectangle { long long height; int pos; } long long get_rectangle_area(int size, long long buffer[]) { stack\u0026lt;Rectangle\u0026gt; S; long long maxv = 0; buffer[size] = 0; for (int i = 0; i \u0026lt;= size; i++) { Rectangle rec; rect.height = buffer[i]; rect.pos = i; if (S.empty()) S.push(rect); else { if (S.top().height \u0026lt; rect.height) S.push(rect); else if (rect.height \u0026lt; S.top().height) { int target = i; while (!S.empty() \u0026amp;\u0026amp; rect.height \u0026lt;= S.top().height) { Rectangle pre = S.top(); S.pop(); long long area = pre.height * (i - pre.pos); maxv = max(maxv, area); target = pre.pos; } rect.pos = target; S.push(rect); } } } return maxv; } int main() { int size; long long buffer[MAX + 1]; while (1) { cin \u0026gt;\u0026gt; size; if (size == 0) break; for (int i = 0; i \u0026lt; size; i++) { cin \u0026gt;\u0026gt; buffer[i]; } cout \u0026lt;\u0026lt; get_rectangle_area(size, buffer) \u0026lt;\u0026lt; endl; } return 0; } 上のようなアルゴリズムの亜種として，数列$A_1, A_2, \u0026hellip;, A_N$に対して，$A_i \\leq A_j$（$j \u0026lt; i$）なる最大の$j$を見つけるアルゴリズムがある．たとえば，数列\n$$ 6, 2, 4, 1, 3, 5, 7 $$\nに対しては\n$$ 0, 1, 1, 3, 3, 1, 0 $$\nとなる．原理的には，各要素に対してそれより前のすべての要素を探索すればよく，$O(N^2)$かかるが解ける．スタックを用いると$O(N)$で解ける．\n#include \u0026lt;bits/stsdc++.h\u0026gt;using namespace std; const int INF = 100000000; int main() { int N; cin \u0026gt;\u0026gt; N; vector\u0026lt;int\u0026gt; A(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; A[i]; stack\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; st; st.push(make_pair(INF, 0)); for (int i = 0; i \u0026lt; N; i++) { while (st.top().first \u0026lt; A[i]) st.pop(); cout \u0026lt;\u0026lt; st.top().second() \u0026lt;\u0026lt; \u0026#34;, \u0026#34;\u0026gt;\u0026gt; st.push(make_pair(A[i], i+1)); } cout \u0026lt;\u0026lt; endl; return 0; } ラウンドロビンスケジューリング OSのプロセスのスケジューリングに用いられているアルゴリズム．それぞれのプロセスを一定時間だけ処理して，それで終わらなければキューの最後に突っ込む．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N, Q; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; Q; queue\u0026lt;pair\u0026lt;string ,int\u0026gt;\u0026gt; que; for (int i = 0; i \u0026lt; N; i++) { string name; int time; cin \u0026gt;\u0026gt; name \u0026gt;\u0026gt; time; que.push(make_pair(name, time)); } int current_time = 0; while (!que.empty()) { auto now = que.front(); que.pop(); if (Q \u0026lt; now.second) { current_time += Q; now.second -= Q; que.push(now); } else { current_time += now.second; cout \u0026lt;\u0026lt; now.first \u0026lt;\u0026lt; \u0026#34; @ \u0026#34; \u0026lt;\u0026lt; current_time \u0026lt;\u0026lt; endl; } } } 迷路 グリッドグラフとしてグラフが与えられ，その迷路が解けるのか，解けるなら最短手数はいくつで，そのルートを通れば最短手数で迷路を解けるのかを与える．幅優先探索や深さ優先探索で，スタートからゴールまで探索していくのが良い．以下では幅優先探索で解く．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dh[4] = {1, 0, -1, 0}; const int dw[4] = {0, 1, 0, -1}; int main() { int H, W; cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; vector\u0026lt;string\u0026gt; maze(H); for (int h = 0; h \u0026lt; H; h++) cin \u0026gt;\u0026gt; maze[h]; int sh, sw, gh, gw; for (int i = 0; i \u0026lt; H; i++) { for (int j = 0; j \u0026lt; W; j++) { if (maze[i][j] == \u0026#39;S\u0026#39;) { sh = i; sw = j; } if (maze[i][j] == \u0026#39;G\u0026#39;) { gh = i; gw = j; } } } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dist(H, vector\u0026lt;int\u0026gt;(W, -1)); dist[sh][sw] = 0; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; prevh(H, vector\u0026lt;int\u0026gt;(W, -1)); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; prevw(H, vector\u0026lt;int\u0026gt;(W, -1)); queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; q; q.push(make_pair(sh, sw)); while (!q.empty()) { auto p = q.front(); q.pop(); int h = p.first; int w = p.second; for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (maze[nh][nw] == \u0026#39;#\u0026#39;) continue; if (dist[nh][nw] != -1) continue; q.push(make_pair(nh, nw)); dist[nh][nw] = dist[h][w] + 1; prevh[nh][nw] = h; prevw[nh][nw] = w; } } int h = gh, w = gw; while (h != -1 \u0026amp;\u0026amp; w != -1) { maze[h][w] = \u0026#39;o\u0026#39;; int ph = prevh[h]; int pw = prevw[w]; h = ph, w = pw; } for (int i = 0; i \u0026lt; H; i++) { for (int j = 0; j \u0026lt; W; j++) { cout \u0026lt;\u0026lt; std::setw(3) \u0026lt;\u0026lt; maze[i][j]; } cout \u0026lt;\u0026lt; endl; } return 0; } ","date":1586521087,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1586521087,"objectID":"63f0e3d0709ab78a67173b9dad2d4d7a","permalink":"/ja/post/stack-and-queue/","publishdate":"2020-04-10T21:18:07+09:00","relpermalink":"/ja/post/stack-and-queue/","section":"post","summary":"スタックとキュー スタックとキューはとても基本的なデータ構造．スタックとキューの本質は データをどのように扱うか という部分．スタックやキューは配","tags":["Stack","スタック","Queue","キュー","FIFO","LIFO","AtCoder","Competitive Programming","C++","cpp","競技プログラミング","競プロ","ABC"],"title":"スタックとキュー","type":"post"},{"authors":[],"categories":[],"content":"Union-Find木 「アイテムのグループ分け」を木を用いて管理する．具体的には，「同じグループに所属するアイテム同士は，根を同じとする木に属する」として管理する．グループ分けの情報を木を使って管理することのウレシミは，「アイテム$i$とアイテム$2$が同じグループに属しているか」と「アイテム$1$に属しているグループとアイテム$2$に属しているグループを併合して1つのグループにする」という処理が高速に実現できること．\n実装 struct UnionFind { vector\u0026lt;int\u0026gt; parents; UnionFind(int size): parents(size) { for (int i = 0; i \u0026lt; size; i++) parents[i] = i; } int root(int x) { if (parents[x] == x) return x; return parents[x] = root(parents[x]); } void unite(int x, int y) { int rootx = root(x); int rooty = root(y); if (rootx == rooty) return; parents[rootx] = rooty; } bool same(int x, int y) { int rootx = root(x); int rooty = root(y); return rootx == rooty; } } 練習問題  ABC 97 D ATC 1 B ARC 32 D  解説 ABC 97 D #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct UnionFind { vector\u0026lt;int\u0026gt; parents; UnionFind(int size): parents(size) { for (int i = 0; i \u0026lt; size; i++) parents[i] = i; } int root(int x) { if (parents[x] == x) return x; return parents[x] = root(parents[x]); } void unite(int x, int y) { int rootx = root(x); int rooty = root(y); if (rootx == rooty) return; parents[rootx] = rooty; } bool same(int x, int y) { int rootx = root(x); int rooty = root(y); return rootx == rooty; } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; vector\u0026lt;int\u0026gt; P(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; P[i]; UnionFind tree(N); for (int i = 0; i \u0026lt; M; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; x--; y--; tree.unite(x, y); } int cnt = 0; for (int i = 0; i \u0026lt; N; i++) { if (tree.same(i. P[i]-1)) cnt++; } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; } ATC 1 B #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct UnionFind { vector\u0026lt;int\u0026gt; parents; UnionFind(int size): parents(size) { for (int i = 0; i \u0026lt; size; i++) parents[i] = i; } int root(int x) { if (parents[x] == x) return x; return parents[x] = root(parents[x]); } void unite(int x, int y) { int rootx = root(x); int rooty = root(y); if (rootx == rooty) return; parents[rootx] = rooty; } bool same(int x, int y) { int rootx = root(x); int rooty = root(y); return rootx == rooty; } } int main() { int N, Q; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; Q; UnionFind tree(N); for (int i = 0; i \u0026lt; Q; i++) { int p, x, y; cin \u0026gt;\u0026gt; p \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; if (p == 0) { tree.unite(x, y); } els { if (tree.same(x, y)) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } } return 0; } ARC 32 D #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct UnionFind { vector\u0026lt;int\u0026gt; parents; UnionFind(int size): parents(size) { for (int i = 0; i \u0026lt; size; i++) parents[i] = i; } int root(int x) { if (parents[x] == x) return x; return parents[x] = root(parents[x]); } void unite(int x, int y) { int rootx = root(x); int rooty = root(y); if (rootx == rooty) return; parents[rootx] = rooty; } bool same(int x, int y) { int rootx = root(x); int rooty = root(y); return rootx == rooty; } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; UnionFind tree(N); for (int i = 9; i \u0026lt; M; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; x--; y--; tree.unite(x, y); } int cnt = 0; for (int i = 0; i \u0026lt; N; i++) { if (!tree.same(0, i)) { tree.unite(0, i); cnt++; } } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; } ","date":1586510431,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1586510431,"objectID":"c3db9d64022bc75c2a863bafc3f4b2d7","permalink":"/ja/post/union-find-tree/","publishdate":"2020-04-10T18:20:31+09:00","relpermalink":"/ja/post/union-find-tree/","section":"post","summary":"Union-Find木 「アイテムのグループ分け」を木を用いて管理する．具体的には，「同じグループに所属するアイテム同士は，根を同じとする木に","tags":[],"title":"Union Find Tree","type":"post"},{"authors":[],"categories":[],"content":"はじめに   再帰関数に対する「なんとなくわかる」を「書ける」にまで持っていきたいので，学び直し．\n  @drken さんの「再帰関数を学ぶと，どんな世界が広がるか」を参考に，写経しながら学習．\n ありがとうございます．    再帰関数  再帰関数：自分自身を呼び出す  戻り値の型 func(引数) { if (ベースケース) { return ベースケースに対する値; } func(次の引数); // ここで再帰呼び出し return 答え; }   再帰関数を書くときのポイント\n ベースケースに対して必ずreturnする 再帰呼び出しをするとき，もとの問題より小さい問題に対する呼び出しを行う．より小さい問題の系列が最終的にベースケースにたどり着くようにする    ベースケースに対する処理を必ず入れる．入れないと無限に自分を呼び出すことになって stack overflow\n  $n$以下の正の整数の総和を再帰で計算するプログラム\n  int sum(int n) { if (n == 0) return 0; // base case  return sum(n - 1) + n; }   ベースケースに対してのreturnを書くことで，再帰関数の有限停止性が得られる\n  フィボナッチ数列の第$n$項を再帰関数で求める\n  int fibo(int n) { if (n == 0) return 0; // base case  else if (n == 1) return 1; // base case  return fibo(n - 1) + fibo(n - 2); }   フィボナッチ数列の第$n$項を再帰関数で求める実装では，$n$が大きくなると再帰関数の呼び出しが爆発してしまう\n  なので，結果をメモしておくと不必要に再帰関数を呼び出す必要がなくなり大きな$n$に対しても計算可能になる -\u0026gt; メモ化再帰（動的計画法）\n  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { vector\u0026lt;long long\u0026gt; table(50); table[0] = 0; table[1] = 1; for (int n = 2; i \u0026lt; 50; i++) { table[n] = table[n-1] + table[n-2]; } return 0; } long long fibo(int n, vector\u0026lt;long long\u0026gt; \u0026amp;memo) { if (n == 0) return 0; // base case  else if (n == 1) return 1; // base case  if (memo[n] != -1) return memo[n]; // 計算済みなのでメモってあったのを返す  return memo[n-1] + memo[n-2]; }   再帰関数は以下のような問題で使える\n （$n$を変数として）$n$重のfor文を書きたいとき：数独ソルバ・部分和問題など グラフ上の探索：トポロジカルソート・サイクル検出・二部グラフ判定など 再帰的なアルゴリズム：ユークリッドの互除法・繰り返し自乗法 ・再帰下降構文解析など 分割統治法：マージソート・クイックソートなど メモ化再帰・動的計画法    $n$重のforループを書きたい：$a_i$（$i = 0, 1, \u0026hellip;, n-1$）円のコインがそれぞれ 1 枚ずつ手元にあるとき，合計が$X$円になるようなコインの選び方は何通りあるか\n 全部で$2^n$通りのコインの選び方がある 各コインについて「選ぶ選ばない」でforループを書こうとすると$n$重のforループになるが，実行時に$n$が決まるのでそのまま書けない $a_{n-1}$を選ぶか選ばないかは，$a_0$から$a_{n-2}$の組み合わせで$X-a_{n-1}$円を実現できるかにかかっている \u0026hellip; $a_1$を選ぶか選ばないかは，$a_0$から$a_0$の組み合わせで$X-a_{n-1}-a_{n-2}-\u0026hellip;-a_2-a_1$円を実現できるかにかかっている $a_0$を選ぶか選ばないかは，$a_0$から$a_{-1}$の組み合わせで$X-a_{n-1}-a_{n-2}-\u0026hellip;-a_2-a_1-a_0$円を実現できるかにかかっている -\u0026gt; $a_0$を選ぶか選ばないかは，$X$が$0$であるかどうかにかかっている    // a_0-a_iのコインで合計xを実現できるかを計算 bool solve(int i, int x, const vector\u0026lt;int\u0026gt; \u0026amp;a) { if (i == 0) { if (x == 0) return true; // 合計0を実現することは可能  else return false; } if (solve(i-1, x, a)) return true; if (solve(i-1, x-a[i-1], a)) return true; return false; }  メモ化による高速化：memo[i][x]にsolve(i, x)の結果を入れておく  bool solve(int i, int x, const vector\u0026lt;int\u0026gt; \u0026amp;a, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;memo) { if (i == 0) { if (x == 0) return true; else return false; } if (memo[i][x] != -1) return dp[i][x]; if (solve(i-1, x, a, memo)) return memo[i][x] = 1; if (solve(i-1, x-a[i-1], a, memo)) return memo[i][x] = 1; return memo[i][x] = 0; }  数独ソルバ  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Field = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; void solve(Field \u0026amp;field, vector\u0026lt;Field\u0026gt; \u0026amp;results) { int emptyi = -1, emptyj = -1; for (int i = 0; i \u0026lt; 9 \u0026amp;\u0026amp; emptyi == -1; i++) { for (int j = 0; j \u0026lt; 9 \u0026amp;\u0026amp; emptyj == -1; j++) { if (field[i][j] == -1) { emptyi = i; emptyj = j; break; } } } // ベースケース：すべてのマスを埋め終わった  if (emptyi == -1 || emptyj == -1) { results.push_back(field); return; } vector\u0026lt;bool\u0026gt; usable(10, true); for (int i = 0; i \u0026lt; 9; i++) { // 同じ列に同じ数字はだめ  if (field[emptyi][i] != -1) usable[field[emptyi][i]] = false; // 同じ行に同じ数字はだめ  if (field[i][emptyj] != -1) usable[field[i][emptyj]] = false; // 同じブロック内に同じ数字はだめ  int bi = emptyi / 3 * 3 + 1; int bj = emptyj / 3 * 3 + 1; for (int di = bi - 1; di \u0026lt;= bi + 1; di++) { for (int dj = bj - 1; dj \u0026lt;= bj + 1; dj++) { if (field[di][dj] != -1) { usable[field[di][dj]] = false; } } } } // 入れられる数字全部試す  for (int v = 1; v \u0026lt;= 9; v++) { if (!usable[v]) continue; field[emptyi][emptyj] = v; // 空きマスにおける数字を置いてみた  solve(field, results); // 再帰的に，空きマスの個数が一つ減った問題を解きに行く  } field[emptyi][emptyj] = -1; // 深さ優先探索なので戻ったときに状態を戻しておく } int main() { Field field(9, vector\u0026lt;int\u0026gt;(9, -1)); for (int i = 0; i \u0026lt; 9; i++) { string line; cin \u0026gt;\u0026gt; line; for (int j = 0; j \u0026lt; 9; j++) { if (line[j] == \u0026#39;*\u0026#39;) continue; int num = line[j] - \u0026#39;0\u0026#39;; field[i][j] = num; } } vector\u0026lt;Field\u0026gt; results; solve(field, results); if (results.size() == 0) cout \u0026lt;\u0026lt; \u0026#34;no solution...\u0026#34; \u0026lt;\u0026lt; endl; else if (1 \u0026lt; results.size()) cout \u0026lt;\u0026lt; \u0026#34;more than one solution\u0026#34; \u0026lt;\u0026lt; endl; else { Field ans = results[0]; for (int i = 0; i \u0026lt; 9; i++) { for (int j = 0; j \u0026lt; 9; j++) { cout \u0026lt;\u0026lt; ans[i][j] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; } } }  グラフ上の探索：深さ優先探索は再帰関数で書ける  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; void dfs(int v, const Graph \u0026amp;G, vector\u0026lt;bool\u0026gt; \u0026amp;seen) { seen[v] = true; // 頂点vを訪れたことを記録  for (auto next: G[v]) { if (seen[next]) continue; // vの隣接頂点のうち訪問済みのものはスキップ  dfs(next, G, seen); } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; G[a].push_back(b); } vector\u0026lt;bool\u0026gt; seen(N, false); for (int v = 0; v \u0026lt; N; v++) { if (seen[v]) continue; // 連結ではないグラフにも対応  dfs(v, G, seen); } return 0; }  グラフ上の探索：トポロジカルソート．再帰関数から抜けるタイミングでメモっておくことでトポロジカルソートになる  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; void rec(int v, const Graoh \u0026amp;G, vector\u0026lt;bool\u0026gt; \u0026amp;seen, vector\u0026lt;int\u0026gt; \u0026amp;order) { seen[v] = true; for (auto next: G[v]) { if (seen[next]) continue; rec(next, G, seen, order); } order.push_back(v); // 抜けるタイミングでメモ } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; G[a].push_back(b); } vector\u0026lt;bool\u0026gt; seen(N, false); vector\u0026lt;int\u0026gt; order; for (int v = 0; v \u0026lt; N; v++) { if (seen[v]) continue; // 連結ではないグラフにも対応  rec(v, G, seen, order); } reverse(order.begin(), order.end()); for (auto v: order) cout \u0026lt;\u0026lt; v \u0026lt;\u0026lt; \u0026#34; -\u0026gt; \u0026#34;; cout \u0026lt;\u0026lt; endl; return 0; }  ユークリッドの互除法：最大公約数を求める  long long gcd(long long a, long long b) { if (a \u0026lt; b) swap(a, b); if (b == 0) return a; else return gcd(b, a % b); } long long lcm(long long a, long long b) { if (a \u0026lt; b) swap(a, b); return a * b / gcd(a, b); }  繰り返し自乗法：効率的に$x^n mod m$を求める  long long modpow(long long x, long long n, long long m) { if (n == 0) return 1; // ベースケース  long long half = modpow(x, n/2, m); long long res = half * half % m; if (n \u0026amp; 1) // nが奇数のとき  res = res * x % m; return res; }  Union-Find tree  struct UnionFindTree { vector\u0026lt;int\u0026gt; parent, rank; UnionFindTree(int size): parent(size, -1), rank(size, -1) {} void init(int size) { parent.assign(size, -1); rank.assign(size, 0); } int root(int x) { if (parent[x] == -1) return x; else return parent[x] = root(parent[x]); } bool is_same(int x, int y) { return root(x) == root(y); } bool merge(int x, int y) { x = root(x); y = root(y); if (x == y) return false; if (rank[x] \u0026lt; rank[y]) swap(x, y); if (rank[x] == rank[y]) rank[x]++; parent[y] = x; return true; } }  再帰下降構文解析  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; // 再帰下降パーサ template\u0026lt;class T\u0026gt; struct Parser { // results  int root; // vals[root] is the answer  vector\u0026lt;T\u0026gt; vals; // value of each node  vector\u0026lt;char\u0026gt; ops; // operator of each node (\u0026#39;a\u0026#39; means leaf values)  vector\u0026lt;int\u0026gt; left, right; // the index of left-node, right-node  vector\u0026lt;int\u0026gt; ids; // the node-index of i-th value  int ind = 0; void init() { vals.clear(); ops.clear(); left.clear(); right.clear(); ids.clear(); ind = 0; } // generate nodes  int newnode(char op, int lp, int rp, T val = 0) { ops.push_back(op); left.push_back(lp); right.push_back(rp); if (op == \u0026#39;a\u0026#39;) { vals.push_back(val); ids.push_back(ind++); } else { if (op == \u0026#39;+\u0026#39;) vals.push_back(vals[lp] + vals[rp]); else if (op == \u0026#39;-\u0026#39;) vals.push_back(vals[lp] - vals[rp]); else if (op == \u0026#39;*\u0026#39;) vals.push_back(vals[lp] * vals[rp]); else if (op == \u0026#39;/\u0026#39;) vals.push_back(vals[lp] / vals[rp]); ids.push_back(-1); } return (int)vals.size() - 1; } // main solver  T solve(const string \u0026amp;S) { int p = 0; string nS = \u0026#34;\u0026#34;; for (auto c : S) if (c != \u0026#39; \u0026#39;) nS += c; root = expr(nS, p); return vals[root]; } // parser  int expr(const string \u0026amp;S, int \u0026amp;p) { int lp = factor(S, p); while (p \u0026lt; (int)S.size() \u0026amp;\u0026amp; (S[p] == \u0026#39;+\u0026#39; || S[p] == \u0026#39;-\u0026#39;)) { char op = S[p]; ++p; int rp = factor(S, p); lp = newnode(op, lp, rp); } return lp; } int factor(const string \u0026amp;S, int \u0026amp;p) { int lp = value(S, p); while (p \u0026lt; (int)S.size() \u0026amp;\u0026amp; (S[p]== \u0026#39;*\u0026#39; || S[p] == \u0026#39;/\u0026#39;)) { char op = S[p]; ++p; int rp = value(S, p); lp = newnode(op, lp, rp); } return lp; } int value(const string \u0026amp;S, int \u0026amp;p) { if (S[p] == \u0026#39;(\u0026#39;) { ++p; // skip \u0026#39;(\u0026#39;  int lp = expr(S, p); ++p; // skip \u0026#39;)\u0026#39;  return lp; } else { T val = 0; int sign = 1; if (p \u0026lt; (int)S.size() \u0026amp;\u0026amp; S[p] == \u0026#39;-\u0026#39;) sign = -1; while (p \u0026lt; (int)S.size() \u0026amp;\u0026amp; S[p] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; S[p] \u0026lt;= \u0026#39;9\u0026#39;) { val = val * 10 + (int)(S[p] - \u0026#39;0\u0026#39;); ++p; } return newnode(\u0026#39;a\u0026#39;, -1, -1, val); } } }; int main() { Parser\u0026lt;int\u0026gt; parse; cout \u0026lt;\u0026lt; parse.solve(\u0026#34;6 + 3\u0026#34;) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; parse.solve(\u0026#34;3 + (10 - 4) / 2\u0026#34;) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; parse.solve(\u0026#34;((6 - 3) * 2 + 10 / 5) * (-3)\u0026#34;) \u0026lt;\u0026lt; endl; }   末尾再帰による最適化\n 再帰関数内での自身の呼び出しが再帰関数内の末尾，正確にはreturnの直前なら，再帰関数のコールスタックの再利用が可能なので通常の繰り返しと同じ計算が可能 再帰関数を末尾再帰に書き換えることでより大きい問題を計算できることがある ref: https://qiita.com/pebblip/items/cf8d3230969b2f6b3132    末尾再帰ではない階乗の計算\n  function factorial(n) { if (n === 0) { return 1; } return n * factorial(n - 1); // この再帰呼び出しは，再帰呼び出しの結果を用いて計算をしているので末尾再帰ではない（再帰呼び出しがreturnの直前ではない） }  末尾再帰に書き換えた階乗の計算  function factorial(n) { function factorialTail(n, accum) { // accumに直前の結果をためておく  if (n === 0) { return accum; } return factorialTail(n - 1, n * accum); // このfactorialTailの呼び出しは末尾再帰  } return factorialTail(n, 1); }  Babel では末尾再帰な再帰関数は通常のwhileループで書き直す最適化が実装されている  function factorial(n) { // 再帰呼び出しが除去されている  function factorialTail(_x, _x2) { var _again = true; _function: while (_again) { var n = _x, accum = _x2; _again = false; if (n === 0) { return accum; } _x = n - 1; _x2 = n * accum; _again = true; continue _function; } } return factorialTail(n, 1); } ","date":1586509828,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1608174628,"objectID":"61ed7eb6e65e70a0cf66f1441c09b246","permalink":"/ja/post/recursion/","publishdate":"2020-04-10T18:10:28+09:00","relpermalink":"/ja/post/recursion/","section":"post","summary":"はじめに 再帰関数に対する「なんとなくわかる」を「書ける」にまで持っていきたいので，学び直し． @drken さんの「再帰関数を学ぶと，どんな世界が広がるか","tags":["再帰","recursion","AtCoder","競技プログラミング","競プロ"],"title":"「再帰」についての学び直し","type":"post"},{"authors":[],"categories":[],"content":"グラフを探索したい 計算機を「与えられた対象の中から，目的に合致するものを見つけ出したり，最良のものを見つけ出す」という「探索」目的で用いる場面は多くある．世の中にはびこっている問題たちは，考えられるすべての場合をくまなく調べつ尽くすことによって原理的に解決することができる．\n問題を「グラフ」としてモデル化・定式化することで高速な探索アルゴリズムを考えることができることが多い．例えば，首都圏の電車の乗換案内アプリケーションはほとんどそのままグラフ上の最短経路探索問題として定式化できるし，他にもオセロや将棋などのボードゲームも，ユーザの操作によって盤上の状態を頂点とするグラフ上を移動しているとすればグラフ上の探索問題とみなせる．\nグラフ グラフとは，対象物を構成する事物の集合とその集合を構成する対象物間の関係にのみ注目したデータ構造のことで，卑近な例で言えば，人間関係はグラフとして表現することができる．\nグラフ$G$はそれを構成する頂点の有限集合$V = \\{v_1, v_2, \u0026hellip;, v_n\\}$と頂点間に生える辺の有限集合$E = \\{e_1, e_2, \u0026hellip;, e_m\\}$の組として定義される．\n$$ G = (V, E) $$\n頂点$v_i$と$v_j$が辺$e$によって接続されているとき，頂点$v_i$と$v_j$は互いに隣接しているといい，$v_i$，$v_j$は$e$の端点であるという．\nグラフ$G$の各辺$e = (v_i, v_j)$について，$(v_i, v_j)$と$(v_j, v_i)$を区別しないとき，$G$を無向グラフと呼び，逆に区別するとき有向グラフと呼ぶ．\n   無向グラフ      有向グラフ   グラフ$G$上の 2 頂点$u$，$v$について，$u$を出発して隣接する頂点をたどることで$v$に到達できるとき，その経路を$u$-$v$路という．またこのとき$u$をその路の始点，$v$を終点という．さらに，路のうち，同じ頂点を 2 度以上通らないものをパスという．また，路のうち，始点と終点が等しいものを閉路（またはサイクル）と呼ぶ．\n   パス      閉路   グラフ$G$の任意の 2 頂点$u$，$v$ $\\in V$に対して，$u$-$v$パス・$v$-$u$パスが存在するとき，$G$は連結であるという．特に，有向グラフ$G$の任意の 2 頂点$u$，$v$ $\\in V$に対して，$u$-$v$パス・$v$-$u$パスが存在するとき，$G$は強連結であるという．\n   連結なグラフ      連結でないグラフ   計算機上でのグラフの実装 計算機上ではグラフは大きく分けて以下の二通りがある．\n 隣接リスト  グラフ$G$を構成する各頂点について，その頂点の隣接頂点をリストとして保持することでグラフを表現する．頂点数に対して辺の本数が比較的少ない疎なグラフの実装において（隣接行列表現と比較して）有利なことがある．\n 隣接行列  グラフ$G$を構成する$n$頂点について，$n \\times n$の大きさのテーブルを用意し，頂点$i$-$j$間に辺が生えているとき，そのテーブルの$(i, j)$に1を立てることで辺を表現する．頂点数に対して辺の本数が比較的多い密なグラフの実装において（隣接リスト表現と比較して）有利なことがある．\n以下では，グラフを隣接リストとして実装する．\nusing Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; Graph G; 例えば，入力が以下のように与えられたとき，グラフ$G$は次のように構築される．\n 【入力】：\n$$ N \\space M $$\n$$ u_1 \\space v_1 $$\n$$ u_2 \\space v_2 $$\n$$ u_3 \\space v_3 $$\n$$ \u0026hellip; $$\n$$ u_M \\space v_M $$\n #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); // G[v].push_back(u);  } return 0; } 辺に重みのあるグラフであれば，Edgeという辺を表す構造体を定義してやるとわかりやすい．\n 【入力】：\n$$ N \\space M $$\n$$ u_1 \\space v_1 \\space w_1 $$\n$$ u_2 \\space v_2 \\space w_2 $$\n$$ u_3 \\space v_3 \\space w_3 $$\n$$ \u0026hellip; $$\n$$ u_M \\space v_M \\space w_M $$\n #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct Edge { int to; int weight; Edge(int to, int weight): to(to), weight(weight) {} }; using Graph = vector\u0026lt;vector\u0026lt;Edge\u0026gt;\u0026gt;; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int from, to, weight; cin \u0026gt;\u0026gt; from \u0026gt;\u0026gt; to \u0026gt;\u0026gt; weight; G[from].push_back(Edge(to, weight)); // G[to].push_back(Edge(from, weight));  } return 0; } グラフの探索 一般にグラフ上の探索にはどのような方針が考えられるのだろうか．例えば以下のようなグラフに対する頂点 0 を始点とした探索を考える．\n   頂点$0$から探索を始める．   頂点$0$に訪問した後，次に訪問する頂点を探す．つまり頂点$0$の隣接頂点を調べると，頂点$1$と頂点$2$を発見し保留メモに追記する．とりあえず，次に訪問する頂点を頂点$1$に決め，探索を続ける．\n    頂点$0$に訪問した．      $次に訪問する頂点を決める．$   頂点$1$に訪問した後，次に訪問する頂点を探す．つまり，頂点$1$の隣接頂点を調べると，頂点$3$と頂点$4$を発見し保留メモに追記する．．そこで次に訪問する頂点の選び方が 2 通り考えられる．\n 「後に保留メモに追記した頂点$3$・頂点$4$を，頂点$2$より先に訪問する」 「先に保留メモに追記した頂点$2$を，頂点$3$・頂点$4$より先に訪問する」  「後に保留メモに追記した頂点$3$・頂点$4$を，頂点$2$より先に訪問する」という方針で続く探索を 深さ優先探索 Depth-First Search（DFS） と呼び，「先に保留メモに追記した頂点$2$を，頂点$3$・頂点$4$より先に訪問する」という方針で続く探索を 幅優先探索 Breadth-First Search（BFS） と呼ぶ．\nDFS では保留メモの挙動が，Last-In-First-Out なのでスタックや再帰関数で実装することができる．一方で，BFS では保留メモの挙動が，First-In-First-Out なのでキューで実装することができる．\n       どういう方針で保留メモから次に訪れる頂点を選択するかを一旦脇においておいて，グラフ上の探索を書き下すと\nhas_visited[i]: 頂点iが訪問済みならtrue，そうでないならfalseを格納する配列 suspended: 保留メモ（未訪問かつ存在を発見済みの頂点の集合） has_visited全体をfalseで初期化・suspendedを空に初期化; has_visited[始点頂点] = true; suspendedに始点頂点を追加; while (!suspendedが空) { u := suspendedから1つ頂点を取り出す（このときの取り出し方で探索の性格が決まる）; for (v: uの隣接頂点) { if (has_visited[v]) continue; // すでに訪問済みだったのでスルー else { has_visited[u] = true; // 訪問したので印をつける suspended.append(v); // 保留メモに追記する } } } また，閉路が存在しないかつ連結であるようなグラフは「木」と呼ばれる．木は，グラフの特殊型であるので，グラフでの探索と同様の議論が木での探索にも言える．\n深さ優先探索 Depth-Frist Seach（DFS) グラフ上を探索する手法として有名．「行けるところまで進んで，行き止まりになったら戻って別の道を試す」という方針でグラフ上を探索する．上の説明で言えば「保留メモから LIFO で頂点を取り出す」のが DFS．「保留メモから LIFO で頂点を取り出す」という方針がスタックや再帰関数の性質と一致し実装に用いられる．\nスタックによる DFS の実装 スタックを用いて DFS を実装すると以下のようになる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; stack\u0026lt;int\u0026gt; suspended; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.top(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[u] = true; suspended.push(w); } } } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } has_visited.assign(N, false); DFS(G, 0); return 0; } 再帰関数による DFS の実装 再帰関数を用いて DFS を実装すると以下のようになる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; for (auto u: G[v]) { if (has_visited[u]) continue; DFS(G, u); } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } has_visited.assign(N, false); DFS(G, 0); return 0; } 幅優先探索 Breadth-First Search（BFS） グラフ上を探索する手法として有名．「分かれ道に遭遇したら，全ての分かれ道についてちょっとずつ等しく訪問していく」という方針でグラフ上を探索する．上の説明で言えば「保留メモから FIFO で頂点を取り出す」のが BFS．「保留メモから FIFO で頂点を取り出す」という方針がキューの性質と一致し実装に用いられる．\nキューによる BFS の実装 キューを用いて BFS を実装すると以下のようになる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; queue\u0026lt;int\u0026gt; suspended; void BFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.front(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[w] = true; suspended.push(w); } } } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } has_visited.assign(N, false); BFS(G, 0); return 0; } BFS にあって DFS にないもの BFS は全頂点を始点からの辺の本数によってレベル分けすることになる．特に，全ての辺の重さが$1$であるような重み付きグラフで BFS を行うと，その始点からの各頂点の最短距離を求めるアルゴリズムとしても使うことができる．ただし，BFS が最短距離を求めるアルゴリズムとして使えるのは，全ての辺の重さが$1$であるグラフに限ることに注意しなければならない．そうでないグラフなら dijkstra 法など他のアルゴリズムを用いないと正しい答えが得られない．\nBFS ですべての辺の重さが$1$であるようなグラフを構成する各頂点の，頂点$0$からの最短距離を求める処理を実装すると次の通り．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;int\u0026gt; distance; // \u0026lt;-- vector\u0026lt;bool\u0026gt; has_visited; queue\u0026lt;int\u0026gt; suspended; void BFS(const Graph \u0026amp;G, int v) { distance[v] = 0; // 始点の距離は0  suspended.push(v); while (!suspended.empty()) { int u = suspended.front(); suspended.pop(); for (auto w: G[u]) { if (distance[w] != -1) continue; // 訪問済みなのでスルー  else { distance[w] = distance[u] + 1; // 頂点wは頂点uの隣接頂点  suspended.push(w); } } } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } for (int i = 0; i \u0026lt; N; i++) distance[i] = -1; // distance[i] == -1 --\u0026gt; 頂点iには未訪問  BFS(G, 0); for (int i = 0; i \u0026lt; N; i++) { cout \u0026lt;\u0026lt; \u0026#34;node[\u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34;]: \u0026#34; \u0026lt;\u0026lt; distance[i] \u0026lt;\u0026lt; endl; } return 0; } グラフ探索の例題 到達可能性判定 2 頂点$s$，$t$ $\\in V$が与えられ，$s$から$t$へ辺をたどって到達することが可能であるかを判定する問題．単純に，$s$を始点とした DFS または BFS を実行し，has_visited[s]を確かめれば良い．\n スタックを使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; stack\u0026lt;int\u0026gt; suspended; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.top(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[u] = true; suspended.push(w); } } } } int main() { int N, M, s, t; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M \u0026gt;\u0026gt; s \u0026gt;\u0026gt; t; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); } has_visited.assign(N, false); DFS(G, s); if (has_visited[t]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; }  再帰を使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; for (auto w: G[v]) { if (has_visited[w]) continue; DFS(G, w); } } int main() { int N, M, s, t; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M \u0026gt;\u0026gt; s \u0026gt;\u0026gt; t; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); } has_visited.assign(N, false); DFS(G, s); if (has_visited[t]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; }  BFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; queue\u0026lt;int\u0026gt; suspended; void BFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.front(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[u] = true; suspended.push(w); } } } } int main() { int N, M, s, t; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M \u0026gt;\u0026gt; s \u0026gt;\u0026gt; t; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); } has_visited.assign(N, false); BFS(G, s); if (has_visited[t]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } グリッドグラフ グラフが二次元グリッドとして与えられるような問題も頻出である．グリッド形式でのグラフの入力はたいてい以下のような形式である．\n 【入力】\n10 10 // 盤面サイズ（縦・横） s......... // s: スタート位置 #########. // g: ゴール位置 #.......#. // 「.」は通路 #..####.#. // 「#」は壁（進むことができない） ##....#.#. #####.#.#. g.#.#.#.#. #.#.#.#.#. #.#.#.#.#. #.....#...  与えられた迷路内を，上下左右に移動しながら通路マス.のみを通ってsからgまでたどり着けるかを判定する．\n スタックを使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int H, W; vector\u0026lt;string\u0026gt; maze; bool has_visited[510][510]; stack\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; suspended; void DFS(int h, int w) { suspended.push(make_pair(h, w)); has_visited[h][w] = true; while (!suspended.empty()) { int ch, cw; tie(ch, cw) = suspended.top(); suspended.pop(); for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = ch + dx[dir]; int nw = cw + dy[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; // 場外なので進めず  if (maze[nh][nw] == \u0026#39;#\u0026#39;) continue; // 壁なので進めず  if (has_visited[nh][nw]) continue; else { has_visited[ch][cw] = true; suspended.push(make_pair(nh, nw)); } } } } int main(){ cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; maze.resize(H); for (int h = 0; h \u0026lt; H; h++) cin \u0026gt;\u0026gt; maze[h]; int sh, sw, gh, gw; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (maze[h][w] == \u0026#39;s\u0026#39;) sh = h, sw = w; if (maze[h][w] == \u0026#39;g\u0026#39;) gh = h, gw = w; } } memset(has_visited, 0, sizeof(has_visited)); DFS(sh, sw); if (has_visited[gh][gw]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; }  再帰を使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int H, W; vector\u0026lt;string\u0026gt; maze; bool has_visited[510][510]; void DFS(int h, int w) { has_visited[h][w] = true; for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dx[dir]; int nw = w + dy[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; // 場外なので進めず  if (maze[nh][nw] == \u0026#39;#\u0026#39;) continue; // 壁なので進めず  if (has_visited[nh][nw]) continue; DFS(nh, nw); } } int main(){ cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; maze.resize(H); for (int h = 0; h \u0026lt; H; h++) cin \u0026gt;\u0026gt; maze[h]; int sh, sw, gh, gw; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (maze[h][w] == \u0026#39;s\u0026#39;) sh = h, sw = w; if (maze[h][w] == \u0026#39;g\u0026#39;) gh = h, gw = w; } } memset(has_visited, 0, sizeof(has_visited)); DFS(sh, sw); if (has_visited[gh][gw]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; }  BFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int H, W; vector\u0026lt;string\u0026gt; maze; bool has_visited[510][510]; queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; suspended; void BFS(int h, int w) { suspended.push(make_pair(h, w)); has_visited[h][w] = true; while (!suspended.empty()) { int ch, cw; tie(ch, cw) = suspended.front(); suspended.pop(); for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = ch + dx[dir]; int nw = cw + dy[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; // 場外なので進めず  if (maze[nh][nw] == \u0026#39;#\u0026#39;) continue; // 壁なので進めず  if (has_visited[nh][nw]) continue; else { has_visited[ch][cw] = true; suspended.push(make_pair(nh, nw)); } } } } int main(){ cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; maze.resize(H); for (int h = 0; h \u0026lt; H; h++) cin \u0026gt;\u0026gt; maze[h]; int sh, sw, gh, gw; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (maze[h][w] == \u0026#39;s\u0026#39;) sh = h, sw = w; if (maze[h][w] == \u0026#39;g\u0026#39;) gh = h, gw = w; } } memset(has_visited, 0, sizeof(has_visited)); BFS(sh, sw); if (has_visited[gh][gw]) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 連結成分のカウント 連結とは限らない（つまりぶった切れているかもしれない）グラフが与えられ，その連結成分の個数を数える．これも単純にまだ探索していない頂点を 1 つ選んで$v$とし，$v$を始点とする DFS または BFS を実行することを，全頂点が探索済みになるまで繰り返せば良い．\n スタックを使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; stack\u0026lt;int\u0026gt; suspended; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.top(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[u] = true; suspended.push(w); } } } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } int cnt = 0; has_visited.assign(N, false); for (int v = 0; v \u0026lt; N; v++) { if (has_visited[v]) continue; DFS(G, v); cnt++; } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; }  再帰を使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; for (auto w: G[v]) { if (has_visited[w]) continue; else DFS(G, w); } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } int cnt = 0; has_visited.assign(N, false); for (int v = 0; v \u0026lt; N; v++) { if (has_visited[v]) continue; DFS(G, v); cnt++; } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; }  BFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; queue\u0026lt;int\u0026gt; suspended; void BFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; suspended.push(v); while (!suspended.empty()) { int u = suspended.front(); suspended.pop(); for (auto w: G[u]) { if (has_visited[w]) continue; else { has_visited[u] = true; suspended.push(w); } } } } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } int cnt = 0; has_visited.assign(N, false); for (int v = 0; v \u0026lt; N; v++) { if (has_visited[v]) continue; BFS(G, v); cnt++; } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; } 二部グラフ判定 与えられたグラフが二部グラフであるかを判定する．二部グラフとは「全頂点を白または黒に塗っていくとき，白頂点同士が辺で結ばれることがなくかつ黒頂点同士が辺で結ばれることがないように頂点を塗り分けられるグラフ」のことである．\n判定方法は簡単である．適当な頂点を白もしくは黒に塗ったとき，その頂点を始点に自動的に隣接頂点たちの色が次々に決まる．塗りながら，隣接する頂点が同じ色になってしまうかを確認すれば判定できる．全頂点を塗ることができれば，そのグラフは二部グラフであると言える．\nまた，配列has_visitedは未訪問であることを表す色を導入することで，頂点の色を保持する配列にまとめさせることができる．\n 再帰を使った DFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;int\u0026gt; color; // color[i]: 0 = 黒, 1 = 白, -1 = 未訪問 bool DFS(const Graph \u0026amp;G, int v, int current_color = 0) { color[v] = current_color; for (auto w: G[v]) { if (color[w] != -1) { if (color[w] == current_color) return false; continue; } if (!DFS(G, w, 1 - current_color)) return false; } return true; } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } color.assign(N, -1); bool is_bipartite = true; for (int v = 0; v \u0026lt; N; v++) { if (color[v] != -1) continue; if (!DFS(G, v)) is_bipartite = false; } if (is_bipartite) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } BFS では「始点頂点からの距離によって頂点をレベル分けする」ことになり，与えられたグラフが二部グラフなら始点からの距離が偶数なら始点と同じ色，奇数なら異なる色となる．ここで，互いに隣接する頂点間では始点からの距離が 1 だけことなるので，「グラフが二部グラフである」と「BFS によって計算される各頂点の始点からの距離が等しい 2 頂点は隣接しない」は同値となる．\n BFS による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i =0 ; i \u0026lt; M; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } bool is_bipartite = true; vector\u0026lt;int\u0026gt; distance(N, -1); queue\u0026lt;int\u0026gt; suspended; for (int v = 0; v \u0026lt; N; v++) { if (distance[v] != -1) continue; distance[v] = 0; suspended.push(v); while (!suspended.epmty()) { int v = suspended.front(); suspended.pop(); for (auto w: G[v]) { if (dist[w] == -1) { dist[w] = dist[v] + 1; suspended.push(w); } else { if (dist[v] == dist[w]) is_bipartite = false; } } } } if (is_bipartite) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; MM endl; return 0; } 木に対する DFS 「木」は「閉路のない連結なグラフ」である．木に対する DFS では，次に訪問する頂点を探すときに，必ず「親がすでに訪問済みである」とマークされている．このことを利用することで，根のない木に対して，与えられた頂点を根としたときの根付き木を計算することができる．以下では，与えられたグラフ$G$を，頂点$0$を根とした根付き木と見たときの，各頂点の深さ（根からの距離）とその頂点を根とする部分木のサイズを計算する．頂点の深さは，根からの距離であり，行きがけ時に決まる．なぜなら，ある頂点の深さは，その頂点の親の深さに 1 を足したものである．一方で，部分木のサイズは，帰りがけ時に決まる．なぜなら，自身を根とする部分木のサイズは，自分の子供を根とする部分木のサイズの総和に 1 足したものである．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;int\u0026gt; depth; vector\u0026lt;int\u0026gt; subtree_size; void DFS(const Graph \u0026amp;G, int v, int p, int d) { // 行きがけ時  depth[v] = d; for (auto w: G[v]) { if (w == p) continue; DFS(G, w, v); } // 帰りがけ時  subtree_size[v] = 0; for (auto child: G[v]) { if (child == p) continue; // 隣接頂点が親しかいない．つまり木から見ると葉  subtree_size[v] += subtree_size[c]; } subtree_size[v] += 1; // 自分自身 } int main() { int N; cin \u0026gt;\u0026gt; N; // 木の辺数 = 頂点数 - 1  Graph G(N); for (int i = 0; i \u0026lt; N-1; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; G[u].push_back(v); G[v].push_back(u); } int root = 0; depth.assign(N, 0); subtree_size.assign(N, 0); DFS(G, root, -1); // グラフGを，頂点0を根とした根付き木としてDFS  for (int v = 0; v \u0026lt; N; v++) { cout \u0026lt;\u0026lt; \u0026#34;node[\u0026#34; \u0026lt;\u0026lt; v \u0026#34;]: depth = \u0026#34; \u0026lt;\u0026lt; depth[v] \u0026lt;\u0026lt; \u0026#34;, subtree_size = \u0026#34; \u0026lt;\u0026lt; subtree_size[v] \u0026lt;\u0026lt; endl; } return 0; } 一般に，子ノードの情報を用いて親ノードの情報を更新する処理を木 DPという．行きがけ時には「親ノードの情報を子ノードに配る」ような処理をし，帰りがけ時には「子ノードの情報を親ノードに集めて親ノードの情報を更新する」ような処理をすると良い．\nトポロジカルソート トポロジカルソートとは，閉路の存在しない有向グラフ（このようなグラフを DAG という）に対して，辺の向きが揃うように頂点を並べるようなソートのことを指し，ソフトウェアのモジュール間・ソースコード間の依存関係を解決するような場面で用いられる．また，DAG であることはトポロジカルソートが可能であることと同値であるらしい．\nトポロジカルソートでは，その頂点を始点とする辺が 0 本であるような頂点（シンクノード）が末尾に来る.シンクノードを取り除き，その頂点に向かっていた辺を削除すると，新たにシンクノードになる頂点が発生する．新たに発生したシンクノードから適当に一つ選び削除し同様のことを行う．これをすべての頂点が削除されるまで行い，頂点の削除された逆順を出力するとトポロジカルソートが実現できる．この方法だと逆向きの BFS っぽい挙動となる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); vector\u0026lt;int\u0026gt; out_degree(N); // out_degree[i]: 頂点iを始点とする辺の本数  for (int i = 0; i \u0026lt; M; i++) { int from, to; cin \u0026gt;\u0026gt; from \u0026gt;\u0026gt; to; G[to].push_back(from); // 辺を逆向きに保存する  out_degree[from]++; } queue\u0026lt;int\u0026gt; q; for (int i = 0;i \u0026lt; N; i++) if (out_degree == 0) q.push(i); // シンクノードをキューに突っ込む  vector\u0026lt;int\u0026gt; order; // order[i]: 頂点iのトポロジカルソートにおける順位の逆順  while (!q.empty()) { int v = q.front(); q.pop(); order.push_back(v); for (auto neighbor: G[v]) { out_degree[neighbor]--; // シンクノードに向かって生えていた辺を消す  if (out_degree[neighbor] == 0) q.push(neighbor); } } reverse(order.begin(), order.end()); for (auto v: order) cout \u0026lt;\u0026lt; v \u0026lt;\u0026lt; endl; return 0; } ここで，DFS の帰りがけ順を考えると，これはまさしくトポロジカルソートとなる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; void DFS(const Graph \u0026amp;G, int v, vector\u0026lt;bool\u0026gt; \u0026amp;has_visited, vector\u0026lt;int\u0026gt; \u0026amp;order) { has_visited[v] = true; for (auto w: G[v]) { if (has_visited[w]) continue; DFS(G, w, has_visited, order); } // 帰りがけ時  order.push_back(v); } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int from, to; cin \u0026gt;\u0026gt; from \u0026gt;\u0026gt; to; G[from].push_back(to); } vector\u0026lt;bool\u0026gt; has_visited(N, false); vector\u0026lt;int\u0026gt; order; for (int v = 0; v \u0026lt; N; v++) { if (has_visited[v]) continue; DFS(G, v, has_visited, order); } reverse(order.begin(), order.end()); for (auto v: order) cout \u0026lt;\u0026lt; v \u0026lt;\u0026lt; endl; return 0; } 閉路検出 グラフに閉路が存在するかを検出する問題．BFS っぽいトポロジカルソートの手法を考慮すると，サイクルに含まれる頂点はシンクノードになることがないので，トポロジカルソートできる範囲でトポロジカルソートした後に，キューに入ったことがない頂点が存在すれば，閉路が存在することがわかる．\n以下は，サイクルを 1 つ含むことが保証された無向グラフに対して，2 頂点$a$，$b$がともにそのサイクル上にあるときは2を，そうでないときは1を出力せよという問題の解答である．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; int main() { int N; cin \u0026gt;\u0026gt; N; // サイクルを1つ含むグラフなので辺数もN  Graph G(N); vector\u0026lt;int\u0026gt; degree(N, 0); for (int i = 0; i \u0026lt; N; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; u--; v--; G[u].push_back(v); G[v].push_back(u); degree[u]++; degree[v]++; } queue\u0026lt;int\u0026gt; q; for (int i = 0; i \u0026lt; N; i++) if (degree[i] == 1) q.push(i); vector\u0026lt;bool\u0026gt; has_enqueued(N, false); // has_enqueued[i]: 頂点iがキューに入ったことがあるか  while (!q.empty()) { int v = q.front(); q.pop(); has_enqueued[v] = true; for (auto w: G[v]) { degree[w]--; if (degree[w] == 1) q.push(w); } } int Q; cin \u0026gt;\u0026gt; Q; for (int _ = 0; _ \u0026lt; Q; _++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; a--; b--; if (!has_enqueued[a] \u0026amp;\u0026amp; !has_enqueued[b]) cout \u0026lt;\u0026lt; 2 \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; endl; } } また，与えられたグラフに閉路があるとき，ある頂点$v$に対して，$v$から到達することができる全頂点の探索の終了より前に（つまり帰りがけ時になる前に）$v$に戻って来ることができることと同値である．これを検知してやっても閉路検知になる．これを実現するためには，has_visited[i]: 頂点iを行きがけ順の意味で訪問済み，has_finished[i]: 頂点iを帰りがけ順の意味で訪問終了とする配列を用意れば良い．また，閉路を復元までしたい場合には，行きがけ時に積み，帰りがけ時に取り出すスタックを用意すると，閉路を検知した時点でのスタックの中身が閉路を構成する頂点になっている．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited, has_finished; int pos = -1; stack\u0026lt;int\u0026gt; history; void DFS(const Graph \u0026amp;G, int v, int p) { has_visited[v] = true; // 行きがけ順の意味で訪問済み  history.push(v); for (auto w: G[v]) { if (w == p) continue; if (has_finished[w]) continue; if (has_visited[w] \u0026amp;\u0026amp; !has_finished[w]) { // 行きがけ順の意味で訪問済みなのに帰りがけ順の意味で未訪問  pos = w; return; } DFS(G, w, v); if (pos != -1) return; } history.pop(); has_finished[v] = true; // 帰りがけ順の意味で訪問済み } int main() { int N; cin \u0026gt;\u0026gt; N; Graph G(N); for (int i = 0; i \u0026lt; N; i++) { int u, v; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; u--; v--; G[u].push_back(v); G[v].push_back(u); } has_visited.assign(N, false); has_finished.assign(N, false); pos = -1; DFS(G, 0, -1); set\u0026lt;int\u0026gt; cycle; while (!history.empty()) { int v = history.pop(); cycle.insert(v); history.pop(); if (v == pos) break; } int Q; cin \u0026gt;\u0026gt; Q; for (int _ = 0; _ \u0026lt; Q; _++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; a--; b--; if (cycle.count(a) \u0026amp;\u0026amp; cycle.count(b)) cout \u0026lt;\u0026lt; 2 \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; endl; } return 0; } グラフ探索の練習問題  ALDS 1-11 B AOJ 1160 ABC 138 D JOI2009 予選 4 ARC 31 B ABC 126 D CODE FSTIVAL2017 qualB C ALDS 1-11 C ABC 7 C JOI2011 予選 5 JOI2012 予選 5 AOJ 1166 ABC 88 D AOJ 2891  解説 ALDS 1-11 B 基本問題．再帰の DFS が書きやすい．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;bool\u0026gt; has_visited; vector\u0026lt;int\u0026gt; d; // 行きがけのタイムスタンプ vector\u0026lt;int\u0026gt; f; // 帰りがけのタイムスタンプ int tick = 0; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; tick++; d[v] = tick; for (auto w: G[v]) { if (has_visited[w]) continue; DFS(G, w); } tick++; f[v] = tick; } int main() { int N; cin \u0026gt;\u0026gt; N; Graph G(N); has_visited.resize(N); has_visited.assign(N, false); d.resize(N); d.assign(N, 0); f.resize(N); f.assign(N, 0); for (int i = 0; i \u0026lt; N; i++) { int u, k; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; k; u--; G[u].resize(0); int v; for (int i = 0; i \u0026lt; k; i++) { cin \u0026gt;\u0026gt; v; v--; G[u].push_back(v); } } for (int i = 0; i \u0026lt; N; i++) { if (!has_visited[i]) DFS(G, i); } for (int i = 0; i \u0026lt; N; i++) { cout \u0026lt;\u0026lt; i+1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; d[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; f[i] \u0026lt;\u0026lt; endl; } return 0; } AOJ 1160 グリッドグラフの連結成分をカウントする問題．深さ優先探索でカウントしていく．陸が1で海が0であるが，訪問済みのマス目を0で潰していくことで配列has_visitedを用意せずとも実装できる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int H, W; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; field; void DFS(int h, int w) { field[h][w] = 0; // 訪問した陸のマスを海にしてしまう  for (int dh = -1; dh \u0026lt;= 1; dh++) { for (int dw = -1; dw \u0026lt;= 1; dw++) { int nh = h + dh; int nw = w + dw; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (field[nh][nw] == 0) continue; DFS(nh, nw); } } } int main() { while (cin \u0026gt;\u0026gt; W \u0026gt;\u0026gt; H) { if (H == 0 || W == 0) break; field.assign(H, vector\u0026lt;int\u0026gt;(W, 0)); for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { cin \u0026gt;\u0026gt; field[h][w]; } } int cnt = 0; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (field[h][w] == 0) continue; DFS(h, w); cnt++; } } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; } return 0; } ABC 138 D 親ノードの情報を子ノードに配るので，DFS で行きがけにカウンタの値を更新する．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;long long\u0026gt; counters; vector\u0026lt;bool\u0026gt; has_visited; void DFS(const Graph \u0026amp;G, int v) { has_visited[v] = true; for (auto w: G[v]) { if (has_visited[w]) continue; else { counters[w] += counters[v]; DFS(G, w); } } } int main() { int N, Q; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; Q; Graph G(N); has_visited.resize(N); has_visited.assign(N, false); counters.resize(N); counters.assign(N, 0); for (int i = 0; i \u0026lt; N-1; i++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; a--; b--; G[a].push_back(b); G[b].push_back(a); } for (int i = 0; i \u0026lt; Q; i++) { int p; cin \u0026gt;\u0026gt; p; p--; long long x; cin \u0026gt;\u0026gt; x; counters[p] += x; } DFS(G, 0); for (int i = 0; i \u0026lt; N; i++) { if (i != N-1) cout \u0026lt;\u0026lt; counters[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; else cout \u0026lt;\u0026lt; counters[i] \u0026lt;\u0026lt; endl; } return 0; } JOI2009 予選 4 薄氷の地図をグリッドグラフとみなすと，割ることのできる薄氷の枚数はグラフの深さに対応する．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, -1, 0, 1}; int H, W, ans = -1; vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; has_broken; void DFS(const Graph \u0026amp;G, int h, int w, int d) { ans = max(ans, d); has_broken[h][w] = true; for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dx[dir]; int nw = w + dy[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (has_broken[nh][nw]) continue; if (!G[nh][nw]) continue; DFS(G, nh, nw, d+1); } has_broken[h][w] = false; } int main() { cin \u0026gt;\u0026gt; W; cin \u0026gt;\u0026gt; H; has_broken.resize(H); for (int i = 0; i \u0026lt; H; i++) has_broken[i].resize(W); Graph G(H); for (int i = 0; i \u0026lt; H; i++) { G[i].resize(W); } for (int i = 0; i \u0026lt; H; i++) { for (int j = 0; j \u0026lt; W; j++) { int x; cin \u0026gt;\u0026gt; x; G[i][j] = x; } } for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (!G[h][w]) continue; DFS(G, h, w, 1); } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ARC 31 B グリッドグラフの連結成分カウント問題．DFS で解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;string\u0026gt;; const int dh[4] = {1, 0, -1, 0}; const int dw[4] = {0, 1, 0, -1}; const int H = 10, W = 10; void DFS(Graph \u0026amp;G, int h, int w) { G[h][w] = \u0026#39;*\u0026#39;; // 訪問済み  for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (G[nh][nw] == \u0026#39;*\u0026#39;) continue; if (G[nh][nw] == \u0026#39;x\u0026#39;) continue; else { DFS(G, nh, nw); } } } int check(Graph \u0026amp;G) { int cnt = 0; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (G[h][w] == \u0026#39;o\u0026#39;) { DFS(G, h, w); cnt++; } } } return cnt; } int main() { Graph G(H); for (int h = 0; h \u0026lt; H; h++) cin \u0026gt;\u0026gt; G[h]; for (int h = 0; h \u0026lt; H; h++) { for (int w = 0; w \u0026lt; W; w++) { if (G[h][w] == \u0026#39;x\u0026#39;) { G[h][w] = \u0026#39;o\u0026#39;; if (check(G) == 1) { cout \u0026lt;\u0026lt; \u0026#34;YES\u0026#34; \u0026lt;\u0026lt; endl; return 0; } for (int h = 0; h \u0026lt; H; h++) for (int w = 0; w \u0026lt; W; w++) if (G[h][w] == \u0026#39;*\u0026#39;) G[h][w] = \u0026#39;o\u0026#39;; G[h][w] = \u0026#39;x\u0026#39;; } } } cout \u0026lt;\u0026lt; \u0026#34;NO\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ABC 126 D 二部グラフ判定問題に似ている．「同じ色に塗られた任意の 2 頂点についてその距離が偶数」という条件から，ある 1 つ頂点の色を決めてしまえば，他の頂点の色は自動的に決定してしまう．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; struct Edge { int to; int weight; Edge(int to, int weight): to(to), weight(weight) {} }; using Tree = vector\u0026lt;vector\u0026lt;Edge\u0026gt;\u0026gt;; // 1: 黒, 0: 白, -1:未訪問 vector\u0026lt;int\u0026gt; color; bool DFS(const Tree \u0026amp;T, int v, int current_color = 0) { color[v] = current_color; for (auto e: T[v]) { if (color[e.to] != -1) { if ((e.weight%2 == 1 \u0026amp;\u0026amp; color[e.to] == current_color) \u0026amp;\u0026amp; (e.weight%2 == 0 \u0026amp;\u0026amp; color[e.to] != current_color)) { return false; } else { continue; } } if (e.weight%2 == 0) { if (!DFS(T, e.to, current_color)) { return false; } } else { if (!DFS(T, e.to, 1 - current_color)) { return false; } } } return true; } int main(){ int N; cin \u0026gt;\u0026gt; N; Tree T(N); for (int i = 0; i \u0026lt; N-1; i++) { int u, v, w; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v \u0026gt;\u0026gt; w; u--; v--; T[u].push_back(Edge(v, w)); T[v].push_back(Edge(u, w)); } color.assign(N, -1); for (int v = 0; v \u0026lt; N; v++) { if (color[v] != -1) continue; if (DFS(T, v)) break; } for (int v = 0; v \u0026lt; N; v++) cout \u0026lt;\u0026lt; color[v] \u0026lt;\u0026lt; endl; return 0; } CODE FSTIVAL2017 qualB C 🍎さんが持っているのは，$N$頂点の連結な無向グラフ．操作によって頂点$u$-頂点$v$には長さ$3$のパスと長さ$1$のパスが存在することになる．奇数長のパスを持つ 2 頂点$u$，$v$ $\\in V$に対して，「操作」を繰り返すことで$u$，$v$を直接結ぶ辺が登場する．これは帰納的に証明できる．「グラフに奇数長のパスが存在するかどうか」はそのグラフが二部グラフであるかどうかによって変わる．\nまず，グラフ$G$が二部グラフであるときを考える．$G$は二部グラフなので頂点を黒・白で塗り分けることができる．異なる色で塗られた任意の頂点対を取ると，$G$は連結なグラフなので，その頂点対間にはパスが存在して，その長さは奇数である．ゆえに，「操作」を繰り返すことでいつかはその頂点対間には辺が張られる．よって，$G$が二部グラフであるとき，「操作」を繰り返すことで任意の黒色頂点-任意の白色頂点間に辺を張ることができる．追加できる辺の本数は，黒色頂点数と白色頂点数の積からすでに存在する辺数$M$を引いた値となる．\n次にグラフ$G$が二部グラフでないときを考える．$G$が二部グラフでないならば，同じ色で塗られた頂点を結ぶ辺が存在することになる．$G$は連結でもあるので$V$内の任意の 2 頂点間にはパスが存在する．よって，同じ色で塗られた頂点を結ぶ辺の端点を含む長さが奇数の閉路が$G$に存在することになる．この閉路を用いることで，$G$内の任意の 2 頂点間に長さが奇数のパスを見つけることができる．$G$は連結なので，$V$内の任意の 2 頂点間にはパスが存在し，たとえそれが偶数であっても，奇数長の閉路を余分に経ることでそのパスの長さを奇数にすることができる．奇数長のパスが存在するときその端点の頂点は「操作」を繰り返すことで直接結ぶ辺が張られるので，$G$は完全グラフになっていく．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;int\u0026gt; color; bool DFS(const Graph \u0026amp;G, int v, int current_color = 0) { color[v] = current_color; for (auto w: G[v]) { if (color[w] != -1) { if (color[w] == current_color) return false; else continue; } if (!DFS(G, w, 1 - current_color)) return false; } return true; } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; Graph G(N); for (int i = 0; i \u0026lt; M; i++) { int a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; a--; b--; G[a].push_back(b); G[b].push_back(a); } color.assign(N, -1); bool is_bipartite = true; for (int v = 0; v \u0026lt; N; v++) { if (color[v] != -1) continue; if (!DFS(G, v)) is_bipartite = false; } if (is_bipartite) { int B = 0, W = 0; for (int v = 0; v \u0026lt; N; v++) { if (color[v] == 0) W++; else if (color[v] == 1) B++; } cout \u0026lt;\u0026lt; W*B - M \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; N*(N-1)/2 - M \u0026lt;\u0026lt; endl; } return 0; } ALDS 1-11 C 幅優先探索の基本問題．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Graph = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;; vector\u0026lt;int\u0026gt; dist; void BFS(const Graph \u0026amp;G, int v) { queue\u0026lt;int\u0026gt; q; dist[v] = 0; q.push(v); while (!q.empty()) { int w = q.front(); q.pop(); for (auto nn: G[w]) { if (dist[nn] != -1) continue; dist[nn] = dist[w] + 1; q.push(nn); } } } int main() { int N; cin \u0026gt;\u0026gt; N; Graph G(N); for (int i = 0; i \u0026lt; N; i++) { int u, k; cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; k; u--; for (int j = 0; j \u0026lt; k; j++) { int v; cin \u0026gt;\u0026gt; v; v--; G[u].push_back(v); } } dist.assign(N, -1); BFS(G, 0); for (int i = 0; i \u0026lt; N; i++) { cout \u0026lt;\u0026lt; i+1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; dist[i] \u0026lt;\u0026lt; endl; } return 0; } ABC 7 C グリッド形式での迷路探索．「最小手数」がほしいので BFS が手軽．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dh[4] = {1, 0, -1, 0}; const int dw[4] = {0, 1, 0, -1}; using Graph = vector\u0026lt;string\u0026gt;; queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; suspended; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dist; // dist[i][j]: 位置(sx, sy)から位置(i, j)までの最小手数  int main() { int H, W; cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; int sh, sw, gh, gw; cin \u0026gt;\u0026gt; sh \u0026gt;\u0026gt; sw \u0026gt;\u0026gt; gh \u0026gt;\u0026gt; gw; sh--; sw--; gh--; gw--; Graph G(H); for (int i = 0; i \u0026lt; H; i++) cin \u0026gt;\u0026gt; G[i]; dist.resize(H); for (int i = 0; i \u0026lt; H; i++) { dist[i].resize(W); dist[i].assign(W, -1); } dist[sh][sw] = 0; suspended.push(make_pair(sh, sw)); while (!suspended.empty()) { int h, w; tie(h, w) = suspended.front(); suspended.pop(); for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (dist[nh][nw] != -1) continue; if (G[nh][nw] == \u0026#39;#\u0026#39;) continue; dist[nh][nw] = dist[h][w] + 1; suspended.push(make_pair(nh, nw)); } } cout \u0026lt;\u0026lt; dist[gh][gw] \u0026lt;\u0026lt; endl; return 0; } JOI2011 予選 5 ネズミの体力の初期値が$1$であり，チーズ$1$個ごとに体力が$1$増えるので，柔らかさ順にチーズを食べていくことになる．チーズ工場間の最短距離を求めていく．全対最短距離を求めるアルゴリズムを使っても良い．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using Field = vector\u0026lt;string\u0026gt;; Field F; int H, W, N; const int dh[4] = {1, 0, -1, 0}; const int dw[4] = {0, 1, 0, -1}; int BFS(pair\u0026lt;int, int\u0026gt; from, pair\u0026lt;int, int\u0026gt; to) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dist(H, vector\u0026lt;int\u0026gt;(W, 1e8)); queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; q; dist[from.first][from.second] = 0; q.push(from); while (!q.empty()) { auto p = q.front(); q.pop(); int h = p.first; int w = p.second; if (pair\u0026lt;int, int\u0026gt;(h, w) == to) { return dist[h][w]; } for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (F[nh][nw] == \u0026#39;X\u0026#39;) continue; if (dist[h][w] + 1 \u0026lt; dist[nh][nw]) { dist[nh][nw] = dist[h][w] + 1; q.push(pair\u0026lt;int, int\u0026gt;(nh, nw)); } } } return -1; // should not reach here } int main() { cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W \u0026gt;\u0026gt; N; F.resize(H); vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; factories(N+1); for (int i = 0; i \u0026lt; H; i++) cin \u0026gt;\u0026gt; F[i]; for (int i = 0; i \u0026lt; H; i++) { for (int j = 0; j \u0026lt; W; j++) { if (F[i][j] == \u0026#39;S\u0026#39;) F[i][j] = \u0026#39;0\u0026#39;; if (\u0026#39;0\u0026#39; \u0026lt;= F[i][j] \u0026amp;\u0026amp; F[i][j] \u0026lt;= \u0026#39;9\u0026#39;) { int idx = F[i][j] - \u0026#39;0\u0026#39;; factories[idx] = pair\u0026lt;int, int\u0026gt;(i, j); } } } int ans = 0; for (int i = 0; i \u0026lt; N; i++) { ans += BFS(factories[i], factories[i+1]); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } JOI2012 予選 5 チョット変な座標系に対する BFS．建物のない区画に印をつけ，建物のない区画の周囲に建物が立っている区画があればその境界は色を塗ることになる．座標によって周囲 6 区画の，マス目位置が変わってくることに注意．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int odx[6] = {-1, -1, 0, 1, 1, 0}; const int ody[6] = { 0, 1, 1, 1, 0, -1}; const int edx[6] = {-1, -1, 0, 1, 1, 0}; const int edy[6] = {-1, 0, 1, 0, -1, -1}; int w, h; int main() { cin \u0026gt;\u0026gt; w \u0026gt;\u0026gt; h; w += 2; h += 2; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; a(h, vector\u0026lt;int\u0026gt;(w, -1)); for (int i = 1; i \u0026lt; h-1; i++) { for (int j = 1; j \u0026lt; w-1; j++) { cin \u0026gt;\u0026gt; a[i][j]; } } auto paint_BFS = [\u0026amp;](int sx, int sy) { queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; q; q.push(make_pair(sx, sy)); while (!q.empty()) { auto p = q.front(); q.pop(); int x = p.first, y = p.second; for (int dir = 0; dir \u0026lt; 6; dir++) { int nx, ny; if (x%2 == 1) { nx = x + odx[dir]; ny = y + ody[dir]; } else { nx = x + edx[dir]; ny = y + edy[dir]; } if (nx \u0026lt; 0 || h \u0026lt;= nx || ny \u0026lt; 0 || w \u0026lt;= ny) continue; if (a[nx][ny] == 1) continue; if (a[nx][ny] == -1) continue; a[nx][ny] = -1; q.push(make_pair(nx, ny)); } } }; for (int i = 0; i \u0026lt; h; i++) { for (int j = 0; j \u0026lt; w; j++) { if (a[i][j] == -1) paint_BFS(i, j); } } int ans = 0; { queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; q; q.push(make_pair(0, 0)); while (!q.empty()) { auto p = q.front(); q.pop(); int x = p.first, y = p.second; if (a[x][y] == 0) continue; for (int dir = 0; dir \u0026lt; 6; dir++) { int nx, ny; if (x%2 == 1) { nx = x + odx[dir]; ny = y + ody[dir]; } else { nx = x + edx[dir]; ny = y + edy[dir]; } if (nx \u0026lt; 0 || h \u0026lt;= nx || ny \u0026lt; 0 || w \u0026lt;= ny) continue; if (a[nx][ny] == 0) continue; if (a[nx][ny] == 1) { ans++; continue; } q.push(make_pair(nx, ny)); } a[x][y] = 0; } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } AOJ 1166 ややトリッキーな形で迷路情報が与えられる．内容は基本的な BFS に過ぎない．BFS のどこで迷路の情報を使うかというと，「隣接マスに行けるのか」を知るタイミングである．よって，縦横の仕切りの情報をそれぞれ別の形で持っておいて，隣接マスへの移動を考えるタイミングでその情報にアクセスするように実装する．\nhorizontal_partition，vertical_partitionという 2 つの配列で迷路情報を保持する．\n   どの配列のどの要素がどこの壁のことを指すのかを整理する．   #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int INF = 1001001; const int dh[4] = {0, 1, 0, -1}; const int dw[4] = {1, 0, -1, 0}; int main() { while (1) { int W, H; cin \u0026gt;\u0026gt; W \u0026gt;\u0026gt; H; if (W == 0 \u0026amp;\u0026amp; H == 0) break; int vertical_partition[H][W-1]; int horizontal_partition[H-1][W]; for (int i = 0; i \u0026lt; 2*H - 1; i++) { if (i%2 == 0) { for (int j = 0; j \u0026lt; W-1; j++) cin \u0026gt;\u0026gt; vertical_partition[i/2][j]; } else { for (int j = 0; j \u0026lt; W; j++) cin \u0026gt;\u0026gt; horizontal_partition[i/2][j]; } } int dist[H][W]; for (int i = 0; i \u0026lt; H; i++) for (int j = 0; j \u0026lt; W; j++) dist[i][j] = INF; queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; q; dist[0][0] = 0; q.push(make_pair(0, 0)); while (!q.empty()) { auto p = q.front(); q.pop(); int h = p.first; int w = p.second; for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (nh == h+1 \u0026amp;\u0026amp; nw == w \u0026amp;\u0026amp; horizontal_partition[h][w] == 1) continue; if (nh == h \u0026amp;\u0026amp; nw == w+1 \u0026amp;\u0026amp; vertical_partition[h][w] == 1) continue; if (nh == h-1 \u0026amp;\u0026amp; nw == w \u0026amp;\u0026amp; horizontal_partition[h-1][w] == 1) continue; if (nh == h \u0026amp;\u0026amp; nw == w-1 \u0026amp;\u0026amp; vertical_partition[h][w-1] == 1) continue; if (dist[nh][nw] != INF) continue; dist[nh][nw] = dist[h][w] + 1; q.push(make_pair(nh, nw)); } } cout \u0026lt;\u0026lt; (dist[H-1][W-1] == INF ? 0 : dist[H-1][W-1] + 1) \u0026lt;\u0026lt; endl; } return 0; } ABC 88 D 要するに，$(1, 1)$から$(H, W)$まで最短経路で（＝通る白いマスの数が最小な経路で）いけば，それ以外のマスは黒に塗ることができ得点を最大化できる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int dh[4] = {1, 0, -1, 0}; const int dw[4] = {0, 1, 0, -1}; using Graph = vector\u0026lt;string\u0026gt;; queue\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; suspended; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dist; // dist[i][j]: 位置(sx, sy)から位置(i, j)までの最小手数  int main() { int H, W; cin \u0026gt;\u0026gt; H \u0026gt;\u0026gt; W; Graph G(H); for (int i = 0; i \u0026lt; H; i++) cin \u0026gt;\u0026gt; G[i]; dist.resize(H); for (int i = 0; i \u0026lt; H; i++) { dist[i].resize(W); dist[i].assign(W, -1); } dist[0][0] = 0; suspended.push(make_pair(0, 0)); while (!suspended.empty()) { int h, w; tie(h, w) = suspended.front(); suspended.pop(); for (int dir = 0; dir \u0026lt; 4; dir++) { int nh = h + dh[dir]; int nw = w + dw[dir]; if (nh \u0026lt; 0 || H \u0026lt;= nh || nw \u0026lt; 0 || W \u0026lt;= nw) continue; if (dist[nh][nw] != -1) continue; if (G[nh][nw] == \u0026#39;#\u0026#39;) continue; dist[nh][nw] = dist[h][w] + 1; suspended.push(make_pair(nh, nw)); } } int white = 0; int ans = 0; for (int i = 0; i \u0026lt; H; i++) { for (int j = 0; j \u0026lt; W; j++) { if (G[i][j] == \u0026#39;.\u0026#39;) white++; } } if (dist[H-1][W-1] == -1) cout \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; white - dist[H-1][W-1] - 1 \u0026lt;\u0026lt; endl; return 0; } ","date":1586222823,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1586222823,"objectID":"2e781d5d912aa842a25d1d360ff085c5","permalink":"/ja/post/graph-traversal/","publishdate":"2020-04-07T10:27:03+09:00","relpermalink":"/ja/post/graph-traversal/","section":"post","summary":"グラフを探索したい 計算機を「与えられた対象の中から，目的に合致するものを見つけ出したり，最良のものを見つけ出す」という「探索」目的で用いる場","tags":["AtCoder","Competitive Programming","C++","cpp","競技プログラミング","競プロ","ABC","グラフ","グラフ理論","Graph","Graph Theory","グラフ探索","Graph Traversal","深さ優先探索","Depth-First Search","DFS","幅優先探索","Breadth-First Search","BFS"],"title":"グラフ探索","type":"post"},{"authors":[],"categories":[],"content":"二分探索 二分探索というと「ソート済み配列の中から目的の値を効率よく（具体的には$O(\\log n)$）で探し出す手法」として説明されることが圧倒的で，ともすると，「二分探索はソート済み配列から値を探すためだけのアルゴリズム」と勘違いしてしまう．実際，僕もそう思っていた．\n二分探索の「半分にしてサイズの小さい問題を解く」というエッセンスは実に多くの問題に適用することができる．一般化された二分探索とも言うべきか．\n「ソート済み配列から目的のアイテムを探す」二分探索 まずは，「ソート済み配列から目的のアイテムを探す」という，よくある二分探索を実装してみる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; vector\u0026lt;int\u0026gt; a = {1, 14, 32, 51, 51, 51, 243, 419, 750, 910}; int binary_search(int key) { int left = 0, right = (int)a.size() - 1; while (left \u0026lt;= right) { int mid = left + (right - left) / 2; if (a[mid] == key) return mid; else if (key \u0026lt; a[mid]) right = mid - 1; else if (a[mid] \u0026lt; key) left = mid + 1; } return -1; } int main() { cout \u0026lt;\u0026lt; binary_search(51) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; binary_search(0) \u0026lt;\u0026lt; endl; return 0; } 探索範囲を半分ずつ小さくしてくことで目的のものを見つけ出す．探索範囲が指数の速度で小さくなっていくので，探索対象がソートされていれば，$O(\\log n)$で目的のアイテムを見つけ出すことができる．\n二分探索の実装はちょっとややこしい．ループの終了条件とか，left・rightの更新ってどうしてたっけとか考えると直感的にスラスラ書ける感じではない．\n「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」二分探索 二分探索を「ソート済み配列から目的のアイテムを探す」ではなくて， 「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」 とするだけで，二分探索をいろんな問題に適用することができるようになる．\n「ソート済み配列に対する，目的のアイテム以上となる最小のインデックス」からは\n 目的のアイテムが，探索範囲内で何番目に小さいのかがわかる 目的のアイテムが探索範囲内に複数存在するなら，それらのうち最小のインデックスを取れる 「目的のアイテムより大きくなる最小のインデックス」を取れれば，探索範囲内にいくつ同じアイテムが存在するかを知ることができる  と，より多くの情報を計算することができるようになる．\nこのような探索の汎化の有用性は，例えばstd::lower_bound()関数・std::upper_bound()関数が標準テンプレートライブラリ内で提供されていることからもうかがい知ることができる．関数がどんな返り値を返すか次第で，その関数の便利度合いも変わってくる．\nstd::lower_bound()関数は，ソート済み配列aと目的のアイテムkeyを与えることで，key \u0026lt;= a[index]となる最小のindexを返す．\nstd::upper_bound()関数は，ソート済み配列aと目的のアイテムkeyを与えることで，key \u0026lt; a[index]となる最小のindexを返す．\n   std::lower_bound()とstd:upper_bound()   一般化された二分探索 「ソート済み配列に対して，目的のアイテム以上となる最小のインデックス」が得られたほうが便利ということがわかったところで，一般化された二分探索を考えると，二分探索は，「ある条件について，探索範囲において，その条件を満たすかどうかについて単調性が認められる（つまり，あるインデックスより小さいアイテムはその条件を満たさないけど，あるインデックス以上のアイテムはその条件を満たす）とき，その条件を満たす最小のアイテムを見つける」アルゴリズムとして一般化させることができる．二分探索をこのように捉えておくと，直感的な実装ができるようになる．\n「ソート済み配列に対して，目的のアイテム以上となる最小のインデックスを求める」二分探索は次のように実装できる．このとき，「ある条件」とは「key以上」に相当し，配列に格納されているアイテムはソートされているので，条件を満たすか否かについての単調性が認められる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; vector\u0026lt;int\u0026gt; a = {1, 14, 32, 51, 51, 51, 243, 419, 750, 910}; bool is_ok(int index, int key) { if (key \u0026lt;= a[index]) return true; else return false; } int binary_search(int key) { int left = -1; int right = (int)a.size(); while (1 \u0026lt; right - left) { int mid = left + (right - left) / 2; if (is_ok(mid, key)) right = mid; else left = mid; } return right; } int main() { cout \u0026lt;\u0026lt; binary_search(51) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; binary_search(0) \u0026lt;\u0026lt; endl; return 0; } この実装では，\n leftは「常に条件を満たさない要素のインデックス」 rightは「常に条件を満たす要素のインデックス」  とし，\n right - left == 1となるまで，つまりleftとrightが隣り合うまで，条件を満たす・満たさないの境界を動かしていく  ことを繰り返している．最終的に，rightが「条件を満たす最小のインデックス」となる．\n条件を満たすか否かの単調性が認められるとき，このように境界を移動させていくことで，条件を満たす最小のインデックスを求めることができる．一方で，単調性がない探索範囲においてこれを実行すると，条件を満たす・満たさないの境界の1つを見つけることができ，これは方程式の解の1つを求めるような場面で使える．\nめぐる式二分探索 上の実装では，left/rightの性質を考慮する必要があったが，それすら考慮することなく実装に落とし込むことができる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; vector\u0026lt;int\u0026gt; a = {1, 14, 32, 51, 51, 51, 243, 419, 750, 910}; bool is_ok(int index, int key) { if (key \u0026lt;= a[index]) return true; else return false; } int binary_search(int key) { int ng = -1; int ok = (int)a.size(); while (1 \u0026lt; abs(ok - ng)) { int mid = (ok + ng) / 2; if (is_ok(mid, key)) ok = mid; else ng = mid; } return ok; } int main() { cout \u0026lt;\u0026lt; binary_search(51) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; binary_search(0) \u0026lt;\u0026lt; endl; return 0; } 二分探索の練習問題  ALDS 1-4 B JOI2009本選 2 ABC 77 C ABC 34 D JOI2008 本選3  解説 ALDS 1-4 B mapを使えば解決するけれども，二分探索でも解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int n, q; vector\u0026lt;int\u0026gt; S(n), T(q); bool is_ok(int index, int key) { if (key \u0026lt;= S[index]) return true; else return false; } int binary_search(int key) { int ng = -1; int ok = (int)S.size(); while (1 \u0026lt; abs(ok - ng)) { int mid = (ok + ng) / 2; if (is_ok(mid, key)) ok = mid; else ng = mid; } return ok; } int main() { cin \u0026gt;\u0026gt; n; S.resize(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; S[i]; cin \u0026gt;\u0026gt; q; T.resize(q); for (int i = 0; i \u0026lt; q; i++) cin \u0026gt;\u0026gt; T[i]; int cnt = 0; for (auto k : T) { if (0 \u0026lt;= binary_search(k) \u0026amp;\u0026amp; binary_search(k) \u0026lt; n) cnt++; } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; } JOI2009本選 2 ピザ屋さんと宅配先の位置関係（つまり，宅配先のすぐ両脇にあるピザ屋）がわかれば，宅配先の両隣のうちの近い方から宅配することで無駄なコストを掛けずにピザを運び届けることができる．両隣以外の店から宅配しようとしたら，その道中で両隣の店の一方に遭遇するはずだ．そりゃそうだ．なので，調べるべきは，宅配先のすぐ両隣にあるピザ屋がどれなのか．ピザ屋を，本店からの距離でソートしておいて，宅配先がどの位置に入るのかを二分探索で求める．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { long long d; int n, m; cin \u0026gt;\u0026gt; d \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; vector\u0026lt;int\u0026gt; pizza_stores(n+1); for (int i = 1; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; pizza_stores[i]; pizza_stores[0] = 0; pizza_stores[n] = d; sort(pizza_stores.begin(), pizza_stores.end()); vector\u0026lt;int\u0026gt; houses(m); for (int i = 0; i \u0026lt; m; i++) cin \u0026gt;\u0026gt; houses[i]; long long ans = 0; for (int i = 0; i \u0026lt; m; i++) { auto iter = lower_bound(pizza_stores.begin(), pizza_stores.end(), houses[i]); ans += min(abs(*iter - houses[i]), abs(*(iter - 1) - houses[i])); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 77 C 中部のパーツのサイズを$B_i$に固定すると，上部に使えるパーツのサイズは$B_i$より小さいもので，下部に使えるパーツのサイズは$B_i$より大きいものである．上部・下部に使えるパーツをそれぞれ大きさ順にソートしておいて二分探索によって，$B_i$より小さい・大きいパーツがいくつあるかを数えて掛け合わせれば，中部にサイズ$B_i$のパーツを使った祭壇の種類が得られるので，これを$i$について前通り試せば答えが求まる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;long long\u0026gt; a(n), b(n), c(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; b[i]; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; c[i]; sort(a.begin(), a.end()); sort(b.begin(), b.end()); sort(c.begin(), c.end()); long long ans = 0; for (int i = 0; i \u0026lt; n; i++) { long long bi = b[i]; auto aiter = lower_bound(a.begin(), a.end(), bi); auto citer = upper_bound(c.begin(), c.end(), bi); ans += distance(a.begin(), aiter) * distance(citer, c.end()); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 34 D 風船の割り方の総数は$N!$通りだが，$1 \\leq N \\leq 100000$であることからぜんぶ探索するのでは間に合わない．\n問題を「ペナルティの最小化問題」と捉えるのではなく，「全ての風船を高度$X$を超える前に割ることができるか」という判定問題として捉え，全ての風船を割ることができる高度$X$の最小値が求める答えとなる．\n「$X$を固定したとき，全ての風船を割ることができるか」は高度$X$に到達するまでの猶予が短い風船から割る貪欲法で調べることができる．\n一方で$X$の値は，「高度$X$以下で，全ての風船を割ることができるか」という条件を満たす最小のものとして二分探索によって決定することができる．「高度$X$以下で，全ての風船を割ることができるか」という条件は，ある値$H$未満の$X$に対しては偽となり，$H$以上の$X$に対して真となる単調性がある．「高度10cmまでにぜんぶの風船を割れ」と言われても無理だけど，「高度1000kmまでにぜんぶの風船を割れ」と言われても余裕ということ．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using ll = long long; ll N; ll H[100010], S[100010]; int main() { cin \u0026gt;\u0026gt; N; for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; H[i] \u0026gt;\u0026gt; S[i]; ll ng = 0; ll ok = 1e15; vector\u0026lt;ll\u0026gt; hist(N); // hist[i]: 時刻iまでに割らなければならない風船の個数  while (1 \u0026lt; abs(ok - ng)) { ll mid = (ok + ng) / 2; bool flag = true; // 以下でbool is_ok(mid){...}を計算  for (int i = 0; i \u0026lt; N; i++) hist[i] = 0; for (int i = 0; i \u0026lt; N; i++) { if (mid \u0026lt; H[i]) flag = false; // 時刻0ですでに高度midより上に風船がある  ll remind_time = (mid - H[i]) / S[i]; // 高度midに到達するまでの時間的猶予  if (remind_time \u0026lt; 0) { flag = false; break; } hist[min(remind_time, N-1)]++; } for (int i = 1; i \u0026lt; N; i++) hist[i] += hist[i-1]; for (int i = 0; i \u0026lt; N; i++) { if (i+1 \u0026lt; hist[i]) flag = false; // 時刻iまでに割れる最大の風船の個数はi+1個（時刻0のときに1つ割ることに注意）  } if (flag) ok = mid; else ng = mid; } cout \u0026lt;\u0026lt; ok \u0026lt;\u0026lt; endl; return 0; } JOI2008 本選3 矢のあたり方の総数は，（「矢を投げない」を「$0$点の的に当たる」と考えて，）$(N+1)^4$通りあるので，ぜんぶを調べ上げれば原理的に解ける．しかし$N$の制約からこれでは満点は取れない．この解法の無駄なところは，4本全ての矢を投げないと得点を計算できないとしている点である．例えば，2本投げた時点ですでに当たった的の合計が$M$を超えてしまえば最終得点は（残り2本の矢を投げるまでもなく）$0$に決定する．そこで，矢を2本ごとに投げることを一つの単位として最大得点を調べ上げることにする．具体的には，まず最初の2本の矢を投げたときに得られる合計得点$Q_1$（最大で$(N+1)^2$通りの値）を計算し昇順にソートしておく．続く2本の矢を投げたときの得点$Q_2$を，条件「$Q_1 + Q_2 \\leq M$」を満たす最大の値として二分探索する．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N; long long M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; vector\u0026lt;long long\u0026gt; P(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; P[i]; P.push_back(0LL); N += 1; vector\u0026lt;long long\u0026gt; Q; set\u0026lt;long long\u0026gt; tmp; for (int i = 0; i \u0026lt; N+1; i++) { for (int j = i; j \u0026lt; N+1; j++) { tmp.insert(P[i] + P[j]); } } for (auto iter = tmp.begin(); iter != tmp.end(); iter++) Q.push_back(*iter); sort(Q.begin(), Q.end()); long long ans = -1; for (int i = 0; i \u0026lt; (int)Q.size(); i++) { long long total = Q[i]; if (M \u0026lt; total) break; int ok = -1; int ng = (int)Q.size(); while (1 \u0026lt; abs(ok - ng)) { int mid = (ok + ng) / 2; bool is_ok = true; if (M \u0026lt; total + Q[mid]) is_ok = false; if (is_ok) ok = mid; else ng = mid; } total += Q[ok]; ans = max(ans, total); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } 最後に 二分探索：ソート済みの配列に対して，条件$X$を満たす最小のアイテムを探し当てる\n","date":1586152521,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1586152521,"objectID":"9af09b54f422c3f5f92fef55079928b5","permalink":"/ja/post/binary-search/","publishdate":"2020-04-06T14:55:21+09:00","relpermalink":"/ja/post/binary-search/","section":"post","summary":"二分探索 二分探索というと「ソート済み配列の中から目的の値を効率よく（具体的には$O(\\log n)$）で探し出す手法」として説明されることが圧","tags":["AtCoder","Competitive Programming","C++","cpp","競技プログラミング","競プロ","二分探索","ABC"],"title":"二分探索","type":"post"},{"authors":[],"categories":[],"content":"全探索 競技プログラミングの「キホン」の「キ」．論理的に考えることになれすぎてると，当たり前過ぎて「なんかずるい」って思うけど，競技プログラムでは当たり前に使う．計算機が高速に計算できるんだから，それを使って問題を解決して何が悪いってか．\n全探索とは 「ありうるパターンを全部調べ上げる」 こと．\n百聞は一見にしかずということで例題を見てみる．\n例題  【問題】数字が書かれている$N$枚の紙切れが入った袋がある．この袋から紙切れを取り出し，その紙切れに書いてある数字を確認して袋に戻すことを4回行い，4回の数字の和が$M$になればあなたの勝ちである．紙切れに書かれている数字が${K_1, K_2, \u0026hellip;, K_N}$であるとき，あなたはこのゲームに勝つことができるだろうか．判定せよ．\n【制約】$N \\leq 50$，$M \\leq 10^8$，$N \\leq 10^8$\n 難しいことを考えずに，「1回目に$K_a$，2回目に$K_b$，2回目に$K_c$，1回目に$K_d$を引く」として，起こりうるすべての数字の組$(a, b, c, d)$を全部調べれば判定できる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n, m; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; vector\u0026lt;int\u0026gt; k; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; k[i]; for (int a = 0; a \u0026lt; n; a++) { for (int b = 0; b \u0026lt; n; b++) { for (int c = 0; c \u0026lt; n; c++) { for (int d = 0; d \u0026lt; n; d++) { if (k[a] + k[b] + k[c] + k[d] == m) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } } } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 4種類の全探索 全探索には4種類ある．\n1つ目は，純粋に全通り調べ上げる全探索．めちゃめちゃforループ書くタイプ．制約次第で有効．\n2つ目は，工夫して探索の数を減らす全探索．これもめちゃめちゃforループ書くタイプ．問題の性質やちょっとした考察を加えることで，やらなくていい探索をやらずに済ませる．純粋に全探索するのでは制約的に間に合わないような問題でも答えが得られるようになる．　3つ目は，ビット全探索．forループで書きにくい問題はこれで解くことができる．\n4つ目は，順列全探索．これもforループで書きにくい問題を解くときに使う．\n純粋な全探索 純粋な全探索は上で上げた例題のように，多重ループで全通りを調べ上げる．ループがネストしていくので問題の制約に注意を払う必要がある．上の例題だと4重のforループになっているが，問題の制約として$N \\leq 50$とあるので，最大でも$50^4 = 6.25 \\times 10^6$回のループなので，現代的な計算機の性能を考慮すると余裕を持って問題を解くことができる．\n工夫して探索数を減らした全探索 問題の性質やちょっとした考察を加えることで，やらなくていいループを見つけることができる．これによって1つ目の全探索よりもサイズの大きい問題を解くことができる．\n例えば，先程の例題だと，$(a, b, c)$が決まってしまえば，$X = M - K_a - K_b - K_c$として，$X$が書かれた紙切れを引くことができるのかを調べれば問題を解くことができる．そのためには予め長さが$10^8$のbool配列を定義しておいて，$1$以上$10^8$以下の整数について，紙切れに書かれているのかを最初に記録しておけば，O(1)で「$X$を引くことができるか」は判定することができる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n, m; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; vector\u0026lt;int\u0026gt; k; vector\u0026lt;bool\u0026gt; exist(100000005, false); for (int i = 0; i \u0026lt; n; i++) { cin \u0026gt;\u0026gt; k[i]; exist[k[i]] = true; } for (int a = 0; a \u0026lt; n; a++) { for (int b = 0; b \u0026lt; n; b++) { for (int c = 0; c \u0026lt; n; c++) { int x = m - k[a] - k[b] - k[c]; if (exist[x]) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ビット全探索 ビット全探索とは，$n$個の要素からなる集合${0, 1, 2, \u0026hellip;, n-1}$の部分集合をすべて数え上げる手法のことで，$N$個のものから，いくつか選ぶ方法を全列挙して調べ上げる手法である．\n$N$個のものからいくつか選ぶ場合の数は，それぞれについて「選ぶ」「選ばない」の2通りがあるので，ぜんぶで$2^N$通りある．ビット全探索では，それぞれのものの選び方をビット列に対応付けることで全通りを調べ上げる．\n「$N$個のものからいくつか選ぶ」系の問題は例えば次のようなものがある．\n 【問題】$N$個の正整数$a_1, a_2, \u0026hellip; a_{N-1}$からいくつか選んでその総和を$W$にすることができるかを判定せよ．\n【制約】$1 \\leq N \\leq 20$\n こういう問題は，forループで調べ上げにくい．そこで登場するのがビット全探索．\nビット全探索では，「$N$個のものからいくつか選ぶ方法」を整数値に一対一に対応付ける ．ものの選び方を，$i$個目のものを選ぶなら$1$，選ばないなら$0$として2進数の整数にしてあげることでこの対応付けを設ける．\nこの対応付けから，$N$個のものの選び方の全探索は\nfor (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); bit++) { ; } と書ける．このループを回るときbitは000...000から111...111を1つずつ巡っていくことになる．\n数字から「ものの選び方」を復元する際にはビット演算を利用する．bitにエンコードされた「ものの選び方」をしたときに，$i$番目のものは選ばれているのかどうかは\nif (bit \u0026amp; (1 \u0026lt;\u0026lt; i)) { ; } で判定できる．1 \u0026lt;\u0026lt; iは「1をiビットだけ左シフトした値」なので，それとのANDを取ることで，bitの$i$番目のビットだけを取り出すことができる．\nものの選び方を表す整数bitから，そのときの選ばれたアイテムの番号を記録した配列を返す関数は次のように書ける．\nvector\u0026lt;int\u0026gt; Bit2Vec(int bit, int N) { vector\u0026lt;int\u0026gt; items; for (int i = 0; i \u0026lt; N; i++) { if (bit \u0026amp; (1 \u0026lt;\u0026lt; i)) { items.push_back(i); } } return items; } しかし実際には，上のように「ものの選び方」を表す配列を用意することなく，各アイテム番号i = 0, 1, ...に対して，アイテムiがbitで表現されるアイテムの集合に含まれていることがわかったら，それに応じた処理をその場で行ってしまうような実装をしている人が多い．\nまた，$i$ビット目を取り出す演算は，\nif ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { ; } とも書けて，こっちのほうが安全だったりすることがあるようなことを聞いたことがある（要出典）．\nビット全探索の例  【問題】$N$個の正整数$a_1, a_2, \u0026hellip; a_{N-1}$と正整数$W$が与えられる．$a_1, a_2, \u0026hellip; a_{N-1}$からいくつか選んでその総和を$W$にすることができるかを判定せよ．\n【制約】$1 \\leq N \\leq 20$\n この問題は， 「$N$個の正整数からいくつか選ぶ方法は$2^N$通りあり，それを1つづつ試しながら，総和が$W$になるかを確認する」 ことで解くことができる．正整数の選び方それぞれに対して，$O(N)$かけて総和を取ることになるので，全体の計算量は$O(2^N \\times N)$．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; vector\u0026lt;int\u0026gt; Bit2Vec(int bit, int N) { vector\u0026lt;int\u0026gt; items; for (int i = 0; i \u0026lt; N; i++) { if ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { items.push_back(i); } } return items; } int main() { int N, W; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; vector\u0026lt;int\u0026gt; a(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); i++) { vector\u0026lt;int\u0026gt; items = Bit2Vec(bit, N); int sum = 0; for (int i : items) sum += a[i]; if (sum == W) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 上の実装でも正しいが，bitに対応するものの選び方において，アイテムiが選ばれるのかの判定と，選ばれるならその際の処理（ここでは総和の計算に用いる）をその場でやってしまうような実装にすることもできて，そうすることでBit2Vec関数を書かなくて済むようになる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N, W; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; W; vector\u0026lt;int\u0026gt; a(N); for (int i = 0; i \u0026lt; N; i++) cin \u0026gt;\u0026gt; a[i]; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); i++) { int sum = 0; for (int i = 0; i \u0026lt; N; i++) { if ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { sum += a[i]; } } if (sum == W) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 順列全探索 順列全探索は，順序付きのものの選び方として考えられるものを全て調べ上げる全探索．例えば「$N$個の都市を，好きな都市から出発して，全ての都市をちょうど1回ずつ訪れる方法のうち，最短の所要時間を求める」という巡回セールスマン問題を考えるとき，都市のめぐり方の総数は$N!$通りなので，その全てを試せば原理的に解ける．\nC++ではstd::next_permutation()という便利関数があり，順列全探索をかんたんに書くことができる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int INF = 100000000; int main() { int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; g(n, vector\u0026lt;int\u0026gt;(n)); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { cin \u0026gt;\u0026gt; g[i][j]; } } vector\u0026lt;int\u0026gt; order(n); for (int i =0 ; i \u0026lt; n; i++) order[i] = i; // 都市番号順に訪れる方法で初期化  int res = INF; // 順列全探索の典型的な書き方  do { int tmp = 0; for (int i = 1; i \u0026lt; n; i++) { tmp += g[order[i-1]][order[i]]; } if (tmp \u0026lt; res) { res = tmp; } } while (next_permutation(order.begin(), order.end())); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; end; return 0; } do {...} while (next_permutation(...));で$n!$回ループして，それぞれについて，$O(n)$かけてコストの総和を取るので全体としては$O(n! \\times n)$\n全探索の練習問題 単純な全探索・ちょっと工夫する全探索  ITP 1-7 B ABC 144 B ABC 150 B ABC 122 B ABC 136 B ABC 106 B ABC 120 B ABC 57 C ABC 95 C 住銀2019 D パ研杯2019 C JOI2017 本選3 Square869120Contest #6 B JOI2008 予選4  ビット全探索  ABC 128 C ABC 147 C ABC 2 D JOI2008 予選5 Square869120Contest #4 B  順列全探索  ABC 145 C ABC 150 C ABC 54 C ALDS 1-13 A  解説 単純な全探索・ちょっと工夫する全探索 ITP 1-7 B 「$1$から$n$までの整数の中から，重複無しで3つの数を選ぶ」ときの数の選び方は${}_n\\mathrm{P}_3$通りあり，全通り試してみれば原理的に解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n, x; while (cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; x) { int cnt = 0; if (n == 0 \u0026amp;\u0026amp; x == 0) break; for (int i = 1; i \u0026lt;= n-2; i++) { for (int j = i+1; j \u0026lt;= n-1; j++) { for (int k = j+1; k \u0026lt;= n; k++) { if (i + j + k == x) cnt++; } } } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; } return 0; } ABC 144 B 与えられた整数$N$が$1$以上$9$以下の2整数の積と等しいかを，$1$以上$9$以下の2整数の積をぜんぶ試しながら調べることで原理的に解ける．制約を考慮しても，特に工夫することなく解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; for (int i = 1; i \u0026lt;= 9; i++) { for (int j = 1; j \u0026lt;= 9; j++) { if (i * j == n) { cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; return 0; } } } cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ABC 150 B 入力文字列Sの$i$文字目から$i+3$文字目までがABCと一致するかを全ての$i$に対して調べる．入力文字列の大きさがそこまで大きくないので特に工夫せず解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; string s; cin \u0026gt;\u0026gt; s; int ans = 0; for (int i = 0; i \u0026lt;= n-3; i++) { if (s[i] == \u0026#39;A\u0026#39; \u0026amp;\u0026amp; s[i+1] == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; s[i+2] == \u0026#39;C\u0026#39;) { ans++; } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 122 B 入力文字列を先頭から一文字づつ舐めていって，その文字がA/C/G/Tなら文字列の長さに1を加えて，そうでないならそこで一旦リセット．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { string s; cin \u0026gt;\u0026gt; s; int len = 0; int ans = 0; for (int i = 0; i \u0026lt; s.size(); i++) { if (s[i] == \u0026#39;A\u0026#39; || s[i] == \u0026#39;C\u0026#39; || s[i] == \u0026#39;G\u0026#39; || s[i] == \u0026#39;T\u0026#39;) { len += 1; ans = max(ans, len); } else { len = 0; } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 136 B $N$以下の正整数に対して，桁数が奇数になるのかを調べてやるだけ．整数を文字列に変換する関数は大体の言語でもできる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { string ns; cin \u0026gt;\u0026gt; ns; int n = stoi(ns); int ans = 0; for (int i = 1; i \u0026lt;= n; i++) { string s = to_string(i); if (s.size() % 2 == 1) ans++; } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 106 B $N$以下の各正奇数に対して，正の約数が8個であるかを調べてあげる．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; bool check(int n) { int cnt = 0; for (int i = 1; i \u0026lt;= n; i++) { if (n%i == 0) cnt++; } if (cnt == 8) return true; else return false; } int main() { int n; cin \u0026gt;\u0026gt; n; int ans = 0; for (int i = 1; i \u0026lt;= n; i += 2) { if (check(i)) ans++; } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } ABC 120 B 与えられた2整数$A$，$B$の約数をぜんぶ調べ上げれば良い．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int a, b, k; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; k; if (b \u0026lt; a) swap(a, b); int cnt = 0; for (int i = a; 1 \u0026lt;= i; i--) { if (a%i == 0 \u0026amp;\u0026amp; b%i == 0) { cnt++; if (cnt == k) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; return 0; } } } return 0; } ABC 57 C $A \u0026lt; B$としても一般性は失われないので，$1 \\leq A \\leq \\sqrt N$まで調べればいい．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using ll = long long; int main() { ll N; cin \u0026gt;\u0026gt; N; ll digit = 1; for (ll i = 2; i \u0026lt;= sqrt(N); i++) { if (N%i == 0) { digit = i; } } cout \u0026lt;\u0026lt; to_string(N/digit).length() \u0026lt;\u0026lt; endl; return 0; } ABC 95 C ABピザを奇数枚買って一枚余らせることしてもただの無駄でしかないので，ABピザは2枚1組のABセットとして考える．ここで問題の制約から，AピザでもBピザでもABセットでも，買う個数を$0$から$10^5$までぜんぶ試せば，買い方の場合の数は全て網羅するので原理的に解けることになる．\nというか，ぜんぶABセットで買って余らせるか，Aピザ or Bピザが足りる分までABセットで買って不足分を単品で買い足すか，ABセットを使わずに単品で買い揃えるか，のいずれのパターンで最も安上がりのものを調べれば良いので，探索はいらない．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int a, b, c, x, y; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; int res = a * x + b * y; res = min(res, (c * 2) * max(x, y)); res = min(res, min(x, y) * 2 * c + a * (x - min(x, y)) + b * (y - min(x, y))); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl; return 0; } 住銀2019 D まじめに，入力されたラッキーナンバーから3桁取ってきて\u0026hellip;とやると，ラッキーナンバーの桁数が最大30000もあるので制限時間内に終わらない．ここで，3桁の暗証番号は000から999のどれかにしかならないので，暗証番号を決め打ちしてから，その暗証番号を与えられたラッキーナンバーから作れるかを調べたほうが良い．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N, cnt = 0; string S; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; S; for (int i = 0; i \u0026lt; 1000; i++) { vector\u0026lt;int\u0026gt; c = {i/100, (i/10)%10, i%10}; int f = 0; for (int j = 0; j \u0026lt; N; j++) { if (S.at(j) == (\u0026#39;0\u0026#39; + c.at(f))) { f++; } if (f == 3) { break; } } if (f == 3) { cnt++; } } cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; } パ研杯2019 C コンテストで実際に歌う歌の組み合わせはぜんぶで${}_M\\mathrm{C}_2$通りあり，$2 \\leq M \\leq 100$という制約を考慮して，全通り試せば原理的に解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n, m; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; a(n+1, vector\u0026lt;long long\u0026gt;(m+1, -1)); for (int i = 1; i \u0026lt;= n; i++) { for (int j = 1; j \u0026lt;= m; j++) { cin \u0026gt;\u0026gt; a[i][j]; } } vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; done(m+1, vector\u0026lt;bool\u0026gt;(m+1, false)); long long ans = -1; for (int i = 1; i \u0026lt;= m-1; i++) { for (int j = i+1; j \u0026lt;= m; j++) { if (done[j][i]) continue; done[i][j] = done[j][i] = true; long long s = 0; for (int k = 1; k \u0026lt;= n; k++) { s += max(a[k][i], a[k][j]); } ans = max(ans, s); } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } JOI2017 本選3 入力された$n$個の点から$2$点選び，その$2$点を結ぶ線分を1辺とする正方形を構成する他の2点を計算し，その頂点が存在するかを調べれば正方形を構成することができるかを判定することができ，$n$の大きさに対する制約を考えると，全部試しても間に合う．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; set\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; points; for (int i = 0; i \u0026lt; n; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; points.insert(pair\u0026lt;int, int\u0026gt;(x, y)); } long long sum, ans = 0; for (auto c: points) { for (auto v: points) { if (c == v) continue; int dx = v.first - c.first; int dy = v.second - c.second; int nx1 = v.first - dy; int ny1 = v.second + dx; int nx2 = c.first - dy; int ny2 = c.second + dx; if (points.count(pair\u0026lt;int, int\u0026gt;(nx1, ny1)) \u0026amp;\u0026amp; points.count(pair\u0026lt;int, int\u0026gt;(nx2, ny2))) { sum = dy * dy + dx * dx; ans = max(ans ,sum); } } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } Square869120Contest #6 B 出入り口を，わざわざ買い物しない店に設けるのは無駄でしかないので，出入り口の候補は$a_1, a_2, \u0026hellip;, a_N$，$b_1, b_2, \u0026hellip;, b_N$．出入り口の候補は$O(n^2)$通りあり，買い物客それぞれに対して移動時間を$O(n)$で計算し，その合計を調べ上げれば原理的に解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using ll = long long; int main() { int n;cin \u0026gt;\u0026gt; n; vector\u0026lt;ll\u0026gt; a(n), b(n); set\u0026lt;ll\u0026gt; ab; for (int i = 0; i \u0026lt; n; i++) { ll _a, _b; cin \u0026gt;\u0026gt; _a \u0026gt;\u0026gt; _b; ab.insert(_a); ab.insert(_b); a[i] = _a; b[i] = _b; } ll s, t; ll ans = 9223372036854775807; for (auto s : ab) { for (auto t : ab) { ll elapsed = 0; for (int k = 0; k \u0026lt; n; k++) { elapsed += abs(s - a[k]) + abs(a[k] - b[k]) + abs(t - b[k]); } ans = min(ans, elapsed); } } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } JOI2008 予選4 $n$個の与えられた星の位置から1つずつ取り出して，それを星座を構成する$m$個の星の位置の1つと仮定して，星座を構成する星を移動し，移動した先の位置が星の位置として妥当かどうかを全ての場合について調べ上げれば原理的に解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int m; cin \u0026gt;\u0026gt; m; set\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; sign; for (int i = 0; i \u0026lt; m; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; sign.insert(pair\u0026lt;int, int\u0026gt;(x, y)); } int n; cin \u0026gt;\u0026gt; n; set\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; night_sky; for (int i = 0; i \u0026lt; n; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; night_sky.insert(pair\u0026lt;int, int\u0026gt;(x, y)); } for (auto star: night_sky) { pair\u0026lt;int, int\u0026gt; ss = *begin(sign); int dx = star.first - ss.first; int dy = star.second - ss.second; bool flag = true; for (auto sstar: sign) { int nx = sstar.first + dx; int ny = sstar.second + dy; if (!(night_sky.count(pair\u0026lt;int, int\u0026gt;(nx, ny)))) flag = false; } if (flag) { cout \u0026lt;\u0026lt; dx \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; dy \u0026lt;\u0026lt; endl; return 0; } } return 0; } ビット全探索 ABC 128 C $N$個のスイッチの状態はぜんぶで$2^N$通りで，それを全部試して，$M$個ある電球が全部点灯するかを調べれば原理的には解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; vec(M); for (int i = 0; i \u0026lt; M; i++) { int k; cin \u0026gt;\u0026gt; k; vec[i].resize(k); for (int j = 0; j \u0026lt; k; j++) { cin \u0026gt;\u0026gt; vec[i][j]; vec[i][j] -= 1; } } vector\u0026lt;int\u0026gt; p(M); for (int i = 0; i \u0026lt; M; i++) { cin \u0026gt;\u0026gt; p[i]; } int ans = 0; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); bit++) { bool ok = true; for (int j = 0; j \u0026lt; M; j++) { int c = 0; // 電球jにつながっていて，かつonになっているスイッチの個数  for (auto id : vec[j]) { if ((bit \u0026gt;\u0026gt; id) \u0026amp; 1) { c++; } } c %= 2; if (c != p[j]) { ok = false; } } if (ok) ans++; } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; } ABC 147 C 「だれが正直者で，だれが不親切なのか」を先に決め打ちしてしまい，それに対して与えられた情報が矛盾しないかを考えてやることで解くことができる．数学パズルが好きな人には「それはずるい」って言われる気がするがまあいいや．「だれが正直者で，だれが不親切なのか」のパターンはぜんぶで$2^N$通りで，ビット全探索が使える．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; using testimony = pair\u0026lt;int, int\u0026gt;; // first: 人, second: 正直者か不親切か  int N; vector\u0026lt;vector\u0026lt;testimony\u0026gt;\u0026gt; testimonies; bool check(int bit) { // N人それぞれについて  for (int i = 0; i \u0026lt; N; i++) { // その人が「不親切な人」ならその人の証言は調べなくて良い  if (!((bit \u0026gt;\u0026gt; i) \u0026amp; 1)) continue; // 各証言の整合性を取る  for (auto test : testimonies[i]) { int x = test.first; int y = test.second; if (y == 0 \u0026amp;\u0026amp; ((bit \u0026gt;\u0026gt; x) \u0026amp; 1)) return false; if (y == 1 \u0026amp;\u0026amp; !((bit \u0026gt;\u0026gt; x) \u0026amp; 1)) return false; } } return true; } int main() { cin \u0026gt;\u0026gt; N; testimonies.resize(N); for (int i = 0; i \u0026lt; N; i++) { int A; cin \u0026gt;\u0026gt; A; testimonies[i].resize(A); for (int j = 0; j \u0026lt; A; j++) { cin \u0026gt;\u0026gt; testimonies[i][j].first \u0026gt;\u0026gt; testimonies[i][j].second; testimonies[i][j].first -= 1; } } int res = 0; // 全通りを調べ上げる  for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; N); bit++) { // 決め打ちした「正直者-不親切な人分布」与えられた証言と整合性があるか  if (check(bit)) { int cnt = 0; // 正直者をカウント  for (int i = 0; i \u0026lt; N; i++) { if ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { cnt++; } } res = max(res, cnt); } } cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl; return 0; } ABC 2 D $N$人いる国会議員について，最大派閥に所属するか否かの場合の数の総数は$2^N$通りであり，$1 \\leq N \\leq 12$という$N$の制約を考えると全パターンを調べ上げることで原理的に解ける．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n, m; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; friends(n, vector\u0026lt;bool\u0026gt;(n, false)); for (int i = 0; i \u0026lt; m; i++) { int x, y; cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; x--; y--; friends[x][y] = friends[y][x] = true; } int ans = 0; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; n); bit++) { bool flag = true; for (int i = 0; i \u0026lt; n; i++) { if ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { for (int j = 0; j \u0026lt; i; j++) { if ((bit \u0026gt;\u0026gt; j) \u0026amp; 1) { if (!friends[i][j]) flag = false; } } } } if (flag) ans = max(ans, __builtin_popcount(bit)); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } JOI2008 予選5 行のひっくり返し方を固定したとき，ある列をひっくり返すか否かは他の列をひっくり返すか否かの判断に影響を与えない．よって，各列において出荷可能なせんべいの枚数を最大化するしたとき，全体として出荷できるせんべいの枚数を（その行のひっくり返し方において）最大化できるといえる．各列のひっくり返すか中の判断は，「列を上から舐めていき，表になっているせんべいの枚数のほうが裏になっているせんべいより多ければひっくり返す．そうでなければひっくり返さない」とすればその列で焼いているせんべいのうち，出荷可能なせんべいの枚数を最大にすることができる．\nまとめると，行のひっくり返し方（総数$2^C$通り）のそれぞれに対して，各列の状態を見ていき，「表になっているせんべいの枚数のほうが裏になっているせんべいより多ければひっくり返す．そうでなければひっくり返さない」という操作を行って，全体として出荷できるせんべいの枚数を調べ，その最大値を計算する．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int table[10][10000]; int main() { int row, col; cin \u0026gt;\u0026gt; row \u0026gt;\u0026gt; col; for (int i = 0; i \u0026lt; row; i++) { for (int j = 0; j \u0026lt; col; j++) { cin \u0026gt;\u0026gt; table[i][j]; } } int ans = 0; for (int bit = 0; bit \u0026lt; (1 \u0026lt;\u0026lt; row); bit++) { int cnt = 0; for (int j = 0; j \u0026lt; col; j++) { int omote = 0, ura = 0, state; for (int r = 0; r \u0026lt; row; r++) { state = table[r][j]; if ((bit \u0026gt;\u0026gt; r) \u0026amp; 1) { state = !state; } if (state) omote++; else ura++; } cnt += max(omote, ura); } ans = max(ans, cnt); } cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; return 0; } Square869120Contest #4 B $N$個ある建物について，どの建物が見えて，どの建物が見えないかはぜんぶで$2^N$通りであるが，$K$色見えてほしいので，$N$桁のビット列から$K$桁だけ1が立っているようなビット列を計算できたら，ビット全探索と同様に考えることができる．建物の見え方を固定したとき，建物を左から順番に見ていって，見えてほしい建物はその建物より左側にある最も背の高い建物より1だけ高く，見えなくてもいい建物はそのままにしておく．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int next_combination(int bit) { int x = bit \u0026amp; -bit; int y = bit + x; return (((bit \u0026amp; ~y) / x) \u0026gt;\u0026gt; 1) | y; } int main() { int n, k; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k; k--; vector\u0026lt;long long\u0026gt; a(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; a[i]; if (k == 0) { cout \u0026lt;\u0026lt; 0 \u0026lt;\u0026lt; endl; return 0; } n--; long long res = 1001001001001; int bit = (1 \u0026lt;\u0026lt; k) - 1; for (; bit \u0026lt; (1 \u0026lt;\u0026lt; n); bit = next_combination(bit)) { long long highest = a[0]; long long tmp = 0; for (int i = 0; i \u0026lt; n; i++) { if ((bit \u0026gt;\u0026gt; i) \u0026amp; 1) { if (a[i+1] \u0026lt;= highest) { tmp += (highest - a[i+1] + 1); highest += 1; } else { highest = a[i+1]; } } else { if (highest \u0026lt; a[i+1]) { highest = a[i+1]; } } } res = min(res, tmp); } cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt;endl; return 0; } 順列全探索 ABC 145 C 順列全探索を使えっていう意図が丸裸って感じの問題．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int N; double x[10], y[10]; double dist(int i, int j) { double dx = x[i] - x[j]; double dy = y[i] - y[j]; return pow(dx*dx + dy*dy, 0.5); } int main() { cin \u0026gt;\u0026gt; N; for (int i = 1; i \u0026lt;= N; i++) cin \u0026gt;\u0026gt; x[i] \u0026gt;\u0026gt; y[i]; double sum = 0.0; vector\u0026lt;int\u0026gt; towns(N); for (int i = 0; i \u0026lt; N; i++) towns[i] = i+1; do { for (int i = 0; i \u0026lt; N-1; i++) { sum += dist(towns[i], towns[i+1]); } } while (next_permutation(towns.begin(), towns.end())); int fact = 1; for (int i = 2; i \u0026lt;= N; i++) fact *= i; cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(12) \u0026lt;\u0026lt; sum/fact \u0026lt;\u0026lt; endl; return 0; } ABC 150 C do {...} while (next_permutation());の練習問題．ソートし直すのを忘れないように．\n#include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { int n; cin \u0026gt;\u0026gt; n; vector\u0026lt;int\u0026gt; p(n), q(n); for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; p[i]; for (int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; q[i]; vector\u0026lt;int\u0026gt; s(n); for (int i = 0; i \u0026lt; n; i++) s[i] = i+1; int i = 0; int pidx = 0; int qidx = 0; do { bool pflag = true; for (int i = 0; i \u0026lt; n; i++) { if (s[i] != p[i]) pflag = false; } if (pflag) { pidx = i; break; } else i++; } while (next_permutation(s.begin(), s.end())); sort(s.begin(), s.end()); i = 0; do { bool qflag = true; for (int i = 0; i \u0026lt; n; i++) { if (s[i] != q[i]) qflag = false; } if (qflag) { qidx = i; break; } else i++; } while (next_permutation(s.begin(), s.end())); cout \u0026lt;\u0026lt; abs(pidx - qidx) \u0026lt;\u0026lt; endl; return 0; } ABC 54 C 1を始点とするDFSで条件を満たすパスを数え上げる方法が一番素直だけれども，制約に注目すると，与えられるグラフの頂点数が最大でも8ということを考慮すると，頂点の訪問順序を，生えている辺を無視して順列全探索をして，編の生え方に矛盾しないものをカウントするとしても解ける．まあ教育的な観点からはDFSの練習として思った方が良さそうだけれど．\n DFSによる解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; // 1を始点としてDFSでグラフ上を探索し条件を満たすパスを数え上げる  const int nmax = 8; bool graph[nmax][nmax]; int dfs(int v, int N, bool has_visited[nmax]) { bool has_visited_all = true; for (int i = 0; i \u0026lt; N; i++) { if (has_visited[i] == false) { has_visited_all = false; } } if (has_visited_all) { return 1; } int ret = 0; for (int i = 0; i \u0026lt; N; i++) { if (graph[v][i] == false) continue; if (has_visited[i]) continue; has_visited[i] = true; ret += dfs(i, N, has_visited); has_visited[i] = false; } return ret; } int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; for (int i = 0; i \u0026lt; M; i++) { int A, B; cin \u0026gt;\u0026gt; A \u0026gt;\u0026gt; B; graph[A-1][B-1] = graph[B-1][A-1] = true; } bool has_visited[nmax]; for (int i = 0; i \u0026lt; N; i++) { has_visited[i] = false; } has_visited[0] = true; cout \u0026lt;\u0026lt; dfs(0, N, has_visited) \u0026lt;\u0026lt; endl; return 0; }  順列全探索による解答  #include \u0026lt;bits/stdc++.h\u0026gt;using namespace std; const int nmax = 8; bool graph[nmax][nmax]; int main() { int N, M; cin \u0026gt;\u0026gt; N \u0026gt;\u0026gt; M; for (int i = 0; i \u0026lt; M; i++) { int A, B; cin \u0026gt;\u0026gt; A \u0026gt;\u0026gt; B; graph[A-1][B-1] = graph[B-1][A-1] = true; } vector\u0026lt;int\u0026gt; nodes(N); for (int i = 0; i \u0026lt; N; i++) nodes[i] = i; int cnt = 0; do { bool flag = true; if (nodes[0] != 0) continue; for (int i = 0; i \u0026lt; N-1; i++) { if (graph[nodes[i]][nodes[i+1]] == false) flag = false; continue; } if (flag) cnt++; } while (next_permutation(nodes.begin(), nodes.end())); cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; return 0; } おわりに 😄 これでぼくも全探索マスター！\n","date":1586086353,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1586086353,"objectID":"fd690ac4ec57b7488c94b4772e3fbd7e","permalink":"/ja/post/check-all-cases/","publishdate":"2020-04-05T20:32:33+09:00","relpermalink":"/ja/post/check-all-cases/","section":"post","summary":"全探索 競技プログラミングの「キホン」の「キ」．論理的に考えることになれすぎてると，当たり前過ぎて「なんかずるい」って思うけど，競技プログラム","tags":["AtCoder","Competitive Programming","C++","cpp","競技プログラミング","競プロ","全探索","ビット全探索","順列全探索","ABC"],"title":"全探索","type":"post"},{"authors":[],"categories":[],"content":"良さげな実装テクを発見したので忘れないようにメモ．\nfunctional optionsとは 何かを「設定」したいときにきれいに書けるAPIのお作法．何かを設定したいだけなら，色んな方法があるけど，このお作法に則ってると読みやすいし書きやすい． 読みやすくて書きやすいことは大事なので，知っておくと良い．\n何かを設定する他の方法だと，例えば設定情報を表現する構造体を定義してそれをコンストラクタに渡すとか，設定のsetterを設けるとか．これらの方法だと，たくさん設定事項があるときに困ったりする．\n何らかのオブジェクトを生成するとき，大抵の場合こんな感じで書く．\nobj := New(arg0, arg1) functional optionsのお作法に則って書くと\nobj := New(arg0, arg1) とも書けるし，オブジェクトの生成時に設定も一緒に仕込むなら\nobj := New(arg0, arg1, option0, option1) とも書ける．\nfunctional optionsのお作法は，そのプログラミング言語がサポートする「任意個の引数を取る」記法を使う．この記法がサポートされてないとできないかも．英語だと，「任意個の引数を取る」という様をvariadicと言うらしい．\n具体的なコードでないと意味がよくわからないので具体的にしてみる．なんらかのサーバを想定するとわかりやすい．\ntype Server struct { addr string } func NewServer(addr string) *Server { return \u0026amp;Server { addr: addr, } } これはまあ普通によくある書き方．では，タイムアウトの設定をしたサーバを生成するコンストラクタを書いてみよう．functional optionsのお作法に従って書くとこんな感じ．\ntype Server struct { addr string timeout time.Duration } func Timeout(timeout time.Duration) func(*Server) { return func(s *Server) { s.timeout = timeout } } func NewServer(addr string, opts ...func(*Server)) *Server { server := \u0026amp;Server { addr: addr, } for _, opt := range opts { opts(server) } return server } こうやって書いてあると，このコードの利用者側はこんな感じのコードを書くことになる．\n// no options, use defaults server := NewServer(\u0026#34;:8080\u0026#34;) // configured to timeout after 10 seconds with address server := NewServer(\u0026#34;:8080\u0026#34;, Timeout(10 * time.Second)) // configured to timeout after 10 seconds and use TLS for connection with address server := NewServer(\u0026#34;8080\u0026#34;, Timeout(10 * time.Second), TLS(\u0026amp;TLSConfig{})) なるほど，わかりやすい．これを例えばコンストラクタにたくさん引数を渡して設定するやり方でやるとこんな感じになる．\nserver := NewServer(\u0026#34;:8080\u0026#34;) server := NewServerWithTimeout(\u0026#34;:8080\u0026#34;, 10 * time.Second) server := NewServerWithTimeoutAndTLS(\u0026#34;:8080\u0026#34;, 10 * time.Second, \u0026amp;TLSConfig{}) 渡す設定によって引数が変わっちゃうのでそれに合わせたコンストラクタが必要になってしまう．これは大変．\nじゃあそれらをまとめてConfig構造体を作るぞってやると\nserver := NewServer(\u0026#34;:8080\u0026#34;, Config{}) server := NewServer(\u0026#34;:8080\u0026#34;, Config{ Timeout: 10 * time.Second }) server := NewServer(\u0026#34;:8080\u0026#34;, Config{ Timeout: 10 * time.Second, TLS: \u0026amp;TLSConfig{} }) となる．まあこれでもいいんだけど，何も設定しないときに空のConfig{}を渡さないといけないのはチョット不格好だし，何より設定事項が増えたときに読みづらくなりそう．\nというわけで，設定したいものを引数に取って，設定を「適用」していくような関数を用意するとかっこよく書ける．\nさらに読みやすくする工夫 func (s *Server)に名前をつけてしまえばもっとわかりやすくなる．\ntype Option func(s *Server) こうすれば\nfunc Timeout(timeout time.Duration) Option { /*...*/ } func NewServer(addr string, opts ...Option) *Server { /*...*/ } となって，より「あ，オプション取るんだな」ってのがわかる．うれしい😄\nこうなると複数オプションもいい感じにまとめることができそう．\ndefaultOptions := []Option{Timeout(5 * time.Second)} server1 := NewServer(\u0026#34;:8080\u0026#34;, append(defaultOptions, MaxConnections(10))...) server2 := NewServer(\u0026#34;:8080\u0026#34;, append(defaultOptions, RateLimit(10, time.Minute))...) server3 := NewServer(\u0026#34;:8080\u0026#34;, append(defaultOptions, Timeout(10 * time.Second))...) []Optionをもっと賢くしたいので，\nfunc Options(opts ...Option) Option { return func(s *Server) { for _, opt := range opts { opt(s) } } } を用意すれば，\ndefaultOptions := Options(Timeout(5 * time.Second)) server1 := NewServer(\u0026#34;:8080\u0026#34;, defaultOptions, MaxConnections(10)) server2 := NewServer(\u0026#34;:8080\u0026#34;, defaultOptions, RateLimit(10, time.Minute)) server3 := NewServer(\u0026#34;:8080\u0026#34;, defaultOptions, Timeout(10 * time.Second)) とできて，イイ感じ！\nWith/Set Loggerとかも設定したいものとしてはよくある．\ntype Logger interface { Info(msg string) Error(msg string) } とかを用意しておいて，\nfunc WithLogger(logger Logger) Option { return func(s *Server) { s.logger = logger } } NewServer(\u0026#34;:8080\u0026#34;, WithLogger(logger)) とすると，なるほどわかりやすい．\n更に他の例だと，\ntype Server struct { // ...  whitelistIPs []string } func WithWhitelistedIP(ip string) Option { return func(s *Server) { s.whitelistIPs = append(s.whitelistIPs, ip) } } func SetWhitelistedIP(ip string) Option { return func(s *Server) { s.whitelistIPs = []string{ip} } } NewServer( \u0026#34;:8080\u0026#34;, WithWhitelistedIP(\u0026#34;10.0.0.0/8\u0026#34;), WithWhitelistedIP(\u0026#34;172.16.0.0/12\u0026#34;), SetWhitelistedIP(\u0026#34;192.168.0.0/16\u0026#34;), // overwrites any previous values ) Withは「追加」で，Setは「上書き」という雰囲気．\nOption型の関数を返す関数を用意することで，特定の設定のプリセットみたいなものを定義できてこれまた便利．\nConfig構造体との掛け合わせ Config構造体を用意して，Config構造体を引数に取るOption型の関数としてもいい．たくさんある設定をConfigという一つの場所に閉じ込められるので，設定事項がめちゃめちゃある場合には便利．\ntype Config struct { Timeout time.Duration } type Option func(c *Config) type Server struct { // ...  config Config } config := Config{ Timeout: 10 * time.Second // ...  // lots of other options } NewServer(\u0026#34;:8080\u0026#34;, WithConfig(config), WithTimeout(20 * time.Second)) Optionを関数型ではなくてinterfaceとしてさらに柔軟に設定を受け入れる Optionをinterfaceにしてしまえば，もっといろんな設定を受け入れられるようになる．\n// Option configures a Server. type Option interface { // apply is unexported,  // so only the current package can implement this interface.  apply(s *Server) } // Timeout configures a maximum length of idle connection in Server. type Timeout time.Duration func (t Timeout) apply(s *Server) { s.timeout = time.Duration(t) } // Options turns a list of Option instances into an Option. type Options []Option func (o Options) apply(s *Server) { for _, opt := range o { o.apply(s) } } type Config struct { Timeout time.Duration } func (c Config) apply(s *Server) { s.config = c } Futher readings   https://sagikazarmark.hu/blog/functional-options-on-steroids/\n  https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis\n  https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html\n  https://www.sohamkamani.com/blog/golang/options-pattern/\n  https://www.calhoun.io/using-functional-options-instead-of-method-chaining-in-go/\n  ","date":1585827806,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1585827806,"objectID":"ffef49b047ff2408e373841e5647c10a","permalink":"/ja/post/functional-options/","publishdate":"2020-04-02T20:43:26+09:00","relpermalink":"/ja/post/functional-options/","section":"post","summary":"良さげな実装テクを発見したので忘れないようにメモ． functional optionsとは 何かを「設定」したいときにきれいに書けるAPIのお作法．何かを設定した","tags":["Golang","Functional","Functional Options","Configuration"],"title":"Functional Options","type":"post"},{"authors":[],"categories":[],"content":"\u0026ldquo;-oriented\u0026quot;ってどういう意味なんだろう？ プログラミングをお勉強しているので，いろんなカタカナ用語に遭遇する．カタカナ用語ってその言葉の指す意味が字面に現れてこなくて，「それってどういう意味？」となりがちだ．\n最近気になったのは「XXX-oriented」という言葉だ．Object-orientedとかservice-orientedとかで目にする．日本語に訳されるときは「XXX指向」って訳されている．が，日本語に訳されたところで意味は判然としない．「オブジェクト指向 とは」でググるとめちゃめちゃたくさんのブログ記事が出てくる．だいたい「オブジェクト指向ってよくわかんねぇよな！俺が解説してやる！」っていう趣旨の記事で，世界一わかりやすいと謳っている．\n僕もそれらの類の記事はいくつか呼んだことがあるし，オブジェクト指向なプログラミングを文法からサポートするいろんな言語でプログラミングをしたことがあるので，オブジェクト指向とはなんなのか，みたいなところの「手触り感」はなんとなく分かっているけど，もうちょっとメタな視点から「XXX-oriented」の意味を考えてみたくなった．\n「XXX-oriented」の中でも一番有名なのかも知れないのが「Object-oriented」だと思うので，そこから考えてみる．オブジェクト指向でプログラムすると，記述したい事柄を「データとデータに対する操作を一括にまとめたオブジェクト」なるものをたくさん定義して，それらの相互作用でプログラムを記述していくことになる．オブジェクト指向ではプログラムにおける主役は「オブジェクト」であり，プログラマはそれらオブジェクト同士の動きを，あたかも演劇における脚本を書いているかのように操って1つのプログラムに仕立て上げる．僕が思うに，オブジェクト指向で大事なのは「プログラムにおける主役がオブジェクトである」という点がオブジェクト指向の本当のところなのだと思う．「Object-oriented」が「オブジェクトが主役」の意味なら「XXX-oriented」は「XXXが主役」ってことなのだろうか？\n「oriented」を適当に英語辞典で引いてみると，「特定の方向に向く，位置を定める」という意味の「orient」の過去分詞が転じた形容詞と書いてあった．ということは，字面で言えば「オブジェクトの方を向いた」って意味なのか？「オブジェクト指向」という漢字はそういう雰囲気が確かに感じられる．\nObject-orientedって言うときはおそらく「オブジェクトを主役とする（という方向を向いた）思想に基づく技術」って意味なんだろうなぁ．となるとObject-oriented programmingっていうのは「オブジェクトを主役とする（という方向を向いた）思想に基づいて確立されたプログラミング手法」的な意味合いになりそうだし，僕の肌感ともあってくる．\nなるほど，Service-Oriented Architectureもそう考えると，「サービス」が主役として振る舞うアーキテクチャってことなんだろうな\u0026hellip;じゃあ最近話題のマイクロサービスアーキテクチャと何が違うんだろう\u0026hellip;同じような名前だけど\u0026hellip;暇なときにでも調べてみるか．\n 「XXX-oriented」とは「XXXという方向性に基づく（技術）」ぐらいの意味\n ","date":1583642839,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1583642839,"objectID":"7cdba072803c0050e5c4198525e26daf","permalink":"/ja/post/what-is-object-oriented/","publishdate":"2020-03-08T13:47:19+09:00","relpermalink":"/ja/post/what-is-object-oriented/","section":"post","summary":"\u0026ldquo;-oriented\u0026quot;ってどういう意味なんだろう？ プログラミングをお勉強しているので，いろんなカタカナ用語に遭遇する．","tags":["Terminology","Object-Oriented Programming","OOP"],"title":"「オブジェクト指向」について考える","type":"post"},{"authors":[],"categories":[],"content":"読みたい  ［改訂新版］プログラマのための文字コード技術入門 みんなのデータ構造 プログラマの数学 第2版 純粋関数型データ構造 Understanding Compression 型システム入門 ― プログラミング言語と型の理論 その数式、プログラムできますか？ 計算機プログラムの構造と解釈 正規表現技術入門 ― 最新エンジン実装と理論的背景 アンダースタンディング コンピュテーション ― 単純な機械から不可能なプログラムまで ガベージコレクション ― 自動的メモリ管理を構成する理論と実装 アルゴリズムを学ぼう ガベージコレクションのアルゴリズムと実装 アルゴリズムイントロダクション第三巻 ― 精選トピックス アルゴリズムイントロダクション第二巻（改訂 2 版） ― 高度な設計と解析手法・高度なデータ構造・グラフアルゴリズム アルゴリズムイントロダクション第一巻（改訂 2 版） ― 基礎・ソート・データ構造・数学 オートマトン言語理論　計算論 I（第二版） アルゴリズムとデータ構造（岩波講座 ソフトウェア科学 3） 基礎情報理論 江添亮の C++ 入門 Modern C++ チャレンジ ― C++17 プログラミング力を鍛える 100 問 More Effective C# 6.0/7.0 低レベルプログラミング Optimized C++ C++ のための API デザイン C++ テンプレートテクニック（第二版） The Architecture of Open Source Applications - Volume II: Structure, Scale, and a Few More Fearless Hacks The Architecture of Open Source Applications - Elegance, Evolution, and a Few Fearless Hacks コンパイラの構成と最適化 最新コンパイラ構成技法（タイガーブック） Linkers and Loaders コンパイラ 作りながら学ぶ 7 つの言語 7 つの世界 江添亮の詳説 C++17 Effective Modern C++ ― C++11/14 プログラムを進化させる 42 項目 コーディングを支える技術 ls を読まずにプログラマを名乗るな！ Effective STL ― STL を効果的に使いこなす 50 の鉄則 More Effective C++ ― プログラムとデザインを改良するための新 35 項目 Effective C++ ― プログラムとデザインを改良するための 55 項目 ゲームプログラマのための C++ 言語実装パターン ― コンパイラ技術によるテキスト処理から言語実装まで パーフェクト JavaScript Effective Java（第二版） Binary Hacks ― ハッカー秘伝のテクニック 100 選 リンカ・ローダ実践開発テクニック ― 実行ファイルを作成するために必須の技術 省メモリプログラミング ― メモリ制限のあるシステムのためのソフトウェアパターン集 エキスパート Objective-C プログラミング iPhone プログラミング UIKit 詳解リファレンス スクリプトエンジン プログラミング プログラミングテクニックアドバンス ― 実践的 UNIX プログラミングソースコードにみる珠玉の手法 プログラミングテクニック ― UNIX コマンドのソースコードにみる実践プログラミング手法 エキスパート Python プログラミング GNU Make（第三版） ふつうのコンパイラをつくろう ― 言語処理系をつくりながら学ぶコンパイルと実行環境の仕組み 明快入門　コンパイラ・インタプリタ処理系を作りながら学ぶ エキスパート C プログラミング 知られざる C の深層 メタプログラミング Ruby Ruby ソースコード完全解説 プログラミング言語 Ruby Boost C++ Libraries プログラミング（第二版） Java の地図帳　図解・実例・リンクで学ぶ Java プログラミング コア Java 2 基礎編 基礎からの PHP コンパイラ ― 原理・技法・ツール（ドラゴンブック） Raspberry Pi で学ぶコンピュータアーキテクチャ 動かしてわかる CPU の作り方 10 講 FPGA の原理と構成 ディジタル回路設計とコンピュータアーキテクチャ [ARM版] 熱血！アセンブラ入門 自作エミュレータで学ぶ x86 アーキテクチャ コンピュータアーキテクチャ　定量的アプローチ（ヘネパタ） 量子コンピュータが人工知能を加速する GPU を支える技術 ― 超並列ハードウェアの快進撃［技術基礎］ ディジタル回路設計とコンピュータアーキテクチャ はじめて読む486 - 32ビットコンピュータをやさしく語る 構造化コンピュータ構成（第四版） プロセッサを支える技術 コンピュータの構成と設計（パタヘネ） 作りながら学ぶコンピュータアーキテクチャ 作って理解する OS ― x86 系コンピュータを動かす理論と実装 Android を支える技術 II ― 新のマルチタスクに挑んだモバイル OS の心臓部 詳解 システム・パフォーマンス インサイド Windows 新装改訂版 Linux のブートプロセスをみる Linux デバイスドライバ Unix 考古学 Truth of the Legend インサイド Windows [試して理解] Linux のしくみ ― 実験と図解で学ぶ OS とハードウェアの基礎知識 Android を支える技術 I - 60 fps を達成するモダンな GUI システム Linux プログラミングインタフェース はじめての OS コードリーディング ― UNIX V6 で学ぶカーネルのしくみ 作りながら学ぶ OS カーネル ― 保護モードプログラミングの基本と実践 30 日でできる！OS 自作入門 Write Portable Code ― 複数プラットフォームに移植可能なソフトウェアの開発技法 Linux システムプログラミング 例解 UNIX プログラミング教室 ― システムコールを使いこなすための 12 講 オペレーティングシステムの仕組み 詳解 Linux カーネル 構造化並列プログラミング ― 効率良い計算を行うためのパターン SRE サイトリライアビリティエンジニアリング ― Google の信頼性を支えるエンジニアリングチーム ビッグデータを支える技術 ― 刻々とデータが脈打つ自動化の世界 Shared Memory Application Programming 並行コンピューティング技法 ― 実践マルチコア/マルチスレッドプログラミング (The Art of Concurrency) The Art of Multiprocessor Programming ― 並行プログラミングの原理から実践まで Pthreads プログラミング Google を支える技術 TCP 技術入門 ― 進化を続ける基本プロトコル ソースコードで体感するネットワークの仕組み ― 手を動かしながら基礎から TCP/IP の実装までがわかる アカマイ ― 知られざるインターネットの巨人 UNIX ネットワークプログラミング (Vol.2) IPC: プロセス間通信 UNIX ネットワークプログラミング (Vol.1) ネットワーク API: ソケットと XTI 体系的に学ぶ 安全な Web アプリケーションの作り方 (第 2 版) ― 脆弱性が生まれる原理と対策の実践 ブラウザハック 超速! Web ページ速度改善ガイド ― 使いやすさは「速さ」から始まる Web フロントエンドハイパフォーマンスチューニング ハイパフォーマンスブラウザネットワーキング ― ネットワークアプリケーションのためのパフォーマンス最適化 めんどうくさい Web セキュリティ Ruby on Rails 3 アプリケーションプログラミング Web 開発者のための大規模サービス技術入門 ― データ構造、メモリ、OS、DB、サーバ/インフラ 24 時間 365 日 サーバ/インフラを支える技術 ― スケーラビリティ、ハイパフォーマンス、省力運用 仕事ではじめる機械学習 これならわかる深層学習入門 ゼロから作る Deep Learning 2/3 作って動かす ALife TensorFlow ではじめる DeepLearning 実装入門 はじめてのパターン認識 進化的アーキテクチャ ― 絶え間ない変化を支える Clean Architecture 達人に学ぶソフトウェアの構造と設計 エリック・エヴァンスのドメイン駆動設計 マイクロサービスアーキテクチャ API デザインケーススタディ Rubyの実例から学ぶ。問題に即したデザインと普遍の考え方 エンジニアのためのマネジメントキャリアパス ― テックリードから CTO までマネジメントスキル向上ガイド サイバー攻撃 ― ネット世界の裏側で起きていること エンジニアリング組織論への招待 ― 不確実性に向き合う思考と組織のリファクタリング プリンシプル オブ プログラミング ― 3 年目までに身につけたい 一生役立つ 101 の原理原則 Joel on Software OSS ライセンスの教科書 エンジニアの知的生産術 ― 効率的に学び、整理し、アウトプットする セキュリティコンテストのための CTF 問題集 セキュリティコンテストチャレンジブック ― CTF で学ぼう! 情報を守るための戦い方 プログラミングコンテストチャレンジブック 目指せ！プログラミング世界一 ― 大学対抗プログラミングコンテスト ICPC への挑戦  読んだ  クラウドを支えるこれからの暗号技術 リーダブルコード　より良いコードを書くためのシンプルで実践的なテクニック GitHub 実践入門 ― Pull Request による開発の変革 人工知能は人間を超えるか ゼロから作る Deep Learning Real World HTTP ― 歴史とコードに学ぶインターネットとウェブ技術 Writing An Interpreter In Go Writing A Compiler In Go 実践 Rust 入門 ― 言語仕様から開発手法まで Programming Rust すごい Haskell たのしく学ぼう！ プログラミング言語 Go Go ならわかるシステムプログラミング コンピュータシステムの理論と実装 Go 言語による並行処理 Distributed Systems: Principles and Paradigms (2nd Edition) Computer Networking: A Top-Down Approach (4th Edition) ふつうの Linux プログラミング (第 2 版) ― Linux の仕組みから学べる gcc プログラミングの王道 Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems Cracking the Coding Interview: 189 Programming Questions and Solutions  ","date":1574693821,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1574693821,"objectID":"745e7f09618fcaaee4cd2fca60ef29e7","permalink":"/ja/post/book-shelf/","publishdate":"2019-11-25T23:57:01+09:00","relpermalink":"/ja/post/book-shelf/","section":"post","summary":"読みたい ［改訂新版］プログラマのための文字コード技術入門 みんなのデータ構造 プログラマの数学 第2版 純粋関数型データ構造 Understanding Compression 型システム入門 ― プロ","tags":["book shelf"],"title":"Book Shelf","type":"post"},{"authors":[],"categories":[],"content":"Golangでよく見かける構造体実装パターン よく見かけるパターンをまとめてみた．\nコンストラクタとしてのNewXXXX() 構造体の初期化と生成に使うパターン\n  👍 構造体の生成と初期化の内部実装を利用者に見せない 👍 構造体そのものの構造を利用者に見せない  エクスポートして外部パッケージからのアクセス許可を利用したシングルトン 「構造体名の先頭を大文字にすることで外部パッケージからのアクセスを許可する」というGolangの特徴を生かしてシングルトンを生成できる．\npackage singleton // 構造体自体を外部に公開しない type singleton struct { } // 構造体のインスタンスを保持する変数も外部に公開しない var instance *singleton // シングルトンなインスタンスを取得する関数のみを外部に公開 func GetInstance() *singleton { if instance == nil { instance = \u0026amp;singleton{} } return instance } interfaceでポリモーフィズム Golangには「型の継承」がない．一方で，interfaceを用いることでポリモーフィズムを実現できる．interfaceによって振る舞いを定義することで，「同じような振る舞いをするもの」をまとめて扱えるようになる．\n 構造体の埋め込みによるポリモーフィズム ある構造体に対して，特定の振る舞いを実装している構造体を埋め込むことで，その構造体も「埋め込まれた構造体と同様な振る舞いをするもの」として扱うことができる．ただ，これをやると構造体の初期化時に構造体の内部を意識する必要があるため，初期化のためのNewXXXX()を用意してあげると良い．\n 埋め込まれた構造体が上位の構造体の関数を使う オブジェクト指向では「子クラスが親クラスのメソッドを用いること」ができるが，Golangでもできないことはない．\n 構造体による処理の移譲 構造体のメンバーとして，特定の処理に対して責任を持つ構造体を持つことで，処理の移譲を実現できる．\n 関数による処理の移譲 Golangでは関数は第1級市民なので値として扱うことができる．処理を定義した関数をやりとりすることで処理を移譲させることができる．\n ","date":1573711075,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1573711075,"objectID":"fa774c736aab16ca1698d6384c703d4a","permalink":"/ja/post/golang-structure-implementation-patterns/","publishdate":"2019-11-14T14:57:55+09:00","relpermalink":"/ja/post/golang-structure-implementation-patterns/","section":"post","summary":"Golangでよく見かける構造体実装パターン よく見かけるパターンをまとめてみた． コンストラクタとしてのNewXXXX() 構造体の初期化と生成","tags":["Golang","Implementation Pattern"],"title":"Golangでよく見かける構造体実装パターン","type":"post"},{"authors":[],"categories":[],"content":"データのserialization/deserialization イマドキのソフトウェアは，機能ごとにプログラムを整理整頓して，それらが情報をやりとりしながらサービスを提供します．システムを構成するコンポーネント間でメッセージングをしなければならず，その際にやりとりするデータについて「どういう表現であるのか」について共有しておかないといけません．人間の会話で言うならば「何語を喋るか」に近いのかな．\n「どんな形式でデータを表現するか」についてはいくつかの形式が提案されていて，それぞれについて一長一短がある．代表的なのはXML，JSON，BSON，Protocol Buffers，FlatBuffers．他にもいろいろあります．\nXML XMLとは「eXtended Markdown Language」の略で，文章の電子化に源流があるデータ形式．前提に「文章のデジタル化」があるので，XMLの仕様にはデータの「型」が定義されていません．\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;breakfast_menu\u0026gt; \u0026lt;food\u0026gt; \u0026lt;name\u0026gt;Belgian Waffles\u0026lt;/name\u0026gt; \u0026lt;price\u0026gt;$5.95\u0026lt;/price\u0026gt; \u0026lt;description\u0026gt; Two of our famous Belgian Waffles with plenty of real maple syrup \u0026lt;/description\u0026gt; \u0026lt;calories\u0026gt;650\u0026lt;/calories\u0026gt; \u0026lt;/food\u0026gt; \u0026lt;food\u0026gt; \u0026lt;name\u0026gt;Strawberry Belgian Waffles\u0026lt;/name\u0026gt; \u0026lt;price\u0026gt;$7.95\u0026lt;/price\u0026gt; \u0026lt;description\u0026gt; Light Belgian waffles covered with strawberries and whipped cream \u0026lt;/description\u0026gt; \u0026lt;calories\u0026gt;900\u0026lt;/calories\u0026gt; \u0026lt;/food\u0026gt; \u0026lt;/breakfast_menu\u0026gt; XMLは文章のデジタル化が前提にあるので，HTMLみたいな見た目になっています．\nXMLの特徴として「XMLはself-describingである」と評されることが多くあります．これは「データ自体の構造がデータそのものに表現されている」ということです．つまり事前に通信の両端でやり取りするデータの方についての合意をとっていなくても（やり取りするデータを眺めれば）データの齟齬のない解釈が可能であるということです．JSONだとこれはできません．XMLはタグだけをみることで，そのデータの構造を即座に読み取ることができます．JSONでは，タグに相当するものをハッシュのキーとして表現すればできないわけではないが，それはデータの型を表現したわけではなくて，ハッシュを用いて似たようなデータ型を表現しただけです．\nXMLで記述されたデータはそれ自身のメタな構造をも表現しているという点が分散システムにおけるデータのやり取りで非常に有用なので，古くからよく使われています．\nJSON JSONとは「JavaScript Object Notation」の略．JSONをシステム間のデータの表現形式として用いると「JavaScriptでのデータのリテラルな表現をそのままシステム間のデータ表現形式」として用いることになって，webな世界だとJavaScriptのインタプリタでそのまま処理できるので扱いやすくてよく用いられがち．しかも，JSONは人間にとってもパッと見でデータの構造が把握しやすくて人気が出ました．それなりに古参なデータ形式ですが，現在もバリバリの現役です．視認性が良いのがやっぱり人気の理由なんですかね．デバッグしやすいし．\nJSONは「プログラミング言語におけるデータのリテラル表現」が出所なので，仕様として「型」が含まれていて，扱いやすいです．「型」が仕様として存在しているので「空の値」を型ごとに区別することができます．\n{ \u0026#34;null\u0026#34;: null, \u0026#34;string\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;array\u0026#34;: [], \u0026#34;dict\u0026#34;: {} } JSONは，こんなにシステム間で情報をやりとりする際のデータ形式として用いられるようになることを全然想定していなかったので，扱いづらさがあったりするらしい．僕は具体的に表現することができないが「古臭い」なんて言われることもあります．\n「どういうフィールドを持ったJSONデータを扱うのか」について通信の両端点で合意しておく必要があるのはもちろんですが，JSONのデータ形式はスキーマを直接的に表現しているわけではない（つまりインタフェースをJSONが規定しているわけではない）という認識も大事だと思います．そのままのJSONはただのデータ形式に過ぎなくて，スキーマ言語としての「データ型を定義する」というメタな機能はないということです．\nJSONなどでも「JSONでJSONのスキーマを書いてしまおう」というJSON Schemaなるものが存在しているそうですが，やっぱりだいぶ書きにくそうです．\n{ \u0026#34;productId\u0026#34;: 1, \u0026#34;productName\u0026#34;: \u0026#34;An ice sculpture\u0026#34;, \u0026#34;price\u0026#34;: 12.50, \u0026#34;tags\u0026#34;: [ \u0026#34;cold\u0026#34;, \u0026#34;ice\u0026#34; ], \u0026#34;dimensions\u0026#34;: { \u0026#34;length\u0026#34;: 7.0, \u0026#34;width\u0026#34;: 12.0, \u0026#34;height\u0026#34;: 9.5 }, \u0026#34;warehouseLocation\u0026#34;: { \u0026#34;latitude\u0026#34;: -78.75, \u0026#34;longitude\u0026#34;: 20.4 } } というスキーマをJSONで書くと\n{ \u0026#34;$schema\u0026#34;: \u0026#34;http://json-schema.org/draft-07/schema#\u0026#34;, \u0026#34;$id\u0026#34;: \u0026#34;http://example.com/product.schema.json\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Product\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A product from Acme\u0026#39;s catalog\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;productId\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;The unique identifier for a product\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;productName\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Name of the product\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;price\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;The price of the product\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34;, \u0026#34;exclusiveMinimum\u0026#34;: 0 }, \u0026#34;tags\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Tags for the product\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;items\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;minItems\u0026#34;: 1, \u0026#34;uniqueItems\u0026#34;: true }, \u0026#34;dimensions\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;length\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }, \u0026#34;width\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }, \u0026#34;height\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; } }, \u0026#34;required\u0026#34;: [ \u0026#34;length\u0026#34;, \u0026#34;width\u0026#34;, \u0026#34;height\u0026#34; ] }, \u0026#34;warehouseLocation\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Coordinates of the warehouse where the product is located.\u0026#34;, \u0026#34;$ref\u0026#34;: \u0026#34;https://example.com/geographical-location.schema.json\u0026#34; } }, \u0026#34;required\u0026#34;: [ \u0026#34;productId\u0026#34;, \u0026#34;productName\u0026#34;, \u0026#34;price\u0026#34; ] } 🤔 ﾁｮｯﾄﾐﾆｸｲ\u0026hellip;\nBSON JSONはテキストベース（つまりシリアライズ・デシリアライズの際に扱われるデータの単位がbitじゃなくてbyte）でしたが，それを改めたBSON = Binary JSONというのも存在します．つまりBSONではデータがバイナリベース（つまりシリアライズ・デシリアライズの際に扱われるデータの大きさの単位がbit）になっています．BSONは後述するProtocol Buffersとよく似ていて，度々比較されています．公式によると，\n Lightweight\n Keep­ing spa­tial over­head to a min­im­um is im­port­ant for any data rep­res­ent­a­tion format, es­pe­cially when used over the net­work.  Traversable\n BSON is de­signed to be tra­versed eas­ily. This is a vi­tal prop­erty in its role as the primary data rep­res­ent­a­tion for Mon­goDB.  Efficient\n En­cod­ing data to BSON and de­cod­ing from BSON can be per­formed very quickly in most lan­guages due to the use of C data types.   という特徴があります．\nBSONは，Protocol Buffersと比較して\n more \u0026ldquo;schema-less\u0026rdquo;\n であるとされています．つまり，サービス間のインタフェースの仕様そのものとやりとりするデータ形式の関係性が（Protocol Buffersと比較して）疎で，より柔軟性があるということです．一方で，BSONはProtocol Buffersと比べてメッセージのフィールド名のエンコードに関してやや冗長であるとされています．\nMongoDBがBSONをデータの表現方式として採用しているのが興味深いですね．多くの主要言語でBSONのエンコード・デコードをサポートするライブラリが実装されていて手軽に使えそうな印象です．ただ，バイナリベースということもあって，BSONをそのまま眺めても人間には意味がわからないので，デバッグはちょっと大変なのかもしれませんね．\n例えば{\u0026quot;hello\u0026quot;: \u0026quot;world\u0026quot;}をBSONでエンコードすると以下のようになります．\n \\x16\\x00\\x00\\x00 // total document size \\x02 // 0x02 = type String hello\\x00 // field name \\x06\\x00\\x00\\x00world\\x00 // field value \\x00 // 0x00 = type EOO ('end of object') Protocol Buffers Protocol BuffersはGoogleが社内のシステム間で情報をやりとりする際に用いていたデータ形式で2008年にオープンソース化されました．Googleが出している公式のドキュメントによれば\n Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler.\n ということらしいです．Protocol Buffersはシステム間で情報をやりとりする際に用いるデータ形式の一種なんですが，それは嘘じゃないんですけど，Protocol Buffersの指す意味範囲はそれだけにとどまらず，サービス間のインタフェースを定義するスキーマ言語としての顔もあるのが特徴です．もっというと，このスキーマ言語が優秀であるというのがProtocol Buffersの人気を大きく支えている理由なのだと思います．「Protocol Buffersがスキーマ言語である」というのはどういうことかというと，Protocol Buffersでは「システムのインタフェース（つまり，どんな型のデータをやりとりするのか）を定義する独自言語」であるということです．\nsyntax = \u0026#34;proto3\u0026#34;;package example.protobuf;message SimpleMessage {\tmessage HeaderItem {\tstring name = 1;\tstring value = 2;\t}\tenum Type {\tSTART = 0;\tBLOB = 1;\tEND = 2;\t}\tuint64 id = 1;\tType message_type = 2;\trepeated HeaderItem headers = 3;\tbytes blob = 4; }Protocol Buffersは，サービス間でやりとりするデータの型を表現する独自言語とともに，その独自言語で記述されたインタフェースを特定の言語にコンパイルするツールまでもが同梱されています．\nスキーマ言語が存在すると，非常に便利です．モダンなソフトウェアシステムでは，いろんなところにデータが保存されているかもしれないし，バックエンドで動いているサーバーもいくつかあるかもしれないし，もはやそれが普通になってきています．となると，システムの中のありとあらゆる場所でデータのシリアライズ・デシリアライズをしなければならないし，通信している両者でデータの解釈に矛盾が発生しないように整える必要があります．スキーマ言語があると，この「整える作業」がとてもやりやすくなります．自然言語と違って，スキーマ言語では解釈に差異が発生しないからです．「管理者が一人」みたいなシステムでは，スキーマ言語なんてたいそうなものを持ち出してくる必要はないと思うんですけど，webみたいな自律分散的な系だと，ますますスキーマ言語としてのProtocol Buffersの良さが際立ってくるわけです．\nProtocol Buffersのスキーマ言語としての良さは，その簡潔さではないでしょうか．プログラムを書く人間にとっては，特に難しいことを考えずに意図が汲み取れる程度の決まりごとしかないし，スキーマ言語としてプログラミング言語から独立している点も，ツールの作りやすさとかに影響していて，Protocol Buffersが人気な理由なんだと思います．\nProtocol Buffersでは，.protoファイルとしてサービスインタフェースを記述します．\nmessage Person {\trequired string name = 1;\trequired int32 id = 2;\toptional string email = 3;\tenum PhoneType {\tMOBILE = 0;\tHOME = 1;\tWORK = 2;\t}\tmessage PhoneNumber {\trequired string number = 1;\toptional PhoneType type = 2 [default = HOME];\t}\trepeated PhoneNumber phone = 4;}明確なサービスインタフェースをコンパイラによって適切に所望の言語のプログラムに変換してくれるので，開発を進めやすくなります．\nProtocol Buffersではサービスのインタフェースの変更に対して後方互換性を維持した形でメッセージのやり取りをできるように「未知なフィールドに遭遇したら無視する」ということになっています．こうすれば，サービスのインタフェースが更新されたとしても，既存のプログラムは動くことには動くことになります．\nProtocol Buffersの公式のドキュメントでは，XMLと比較して\n Protocol buffers\n are simpler are 3 to 10 times smaller are 20 to 100 times faster are less ambiguous generate data access classes that are easier to use programmatically   と主張しています．確かにXMLはいちいちタグで括らなきゃいけないしProtocol Buffersは効率が良さそうです．\nProtocol Buffersのデフォルトのシリアライズはバイナリベースです．人間が眺めて構造が取れるような見た目にはなっていません．しかしProtocol Buffersはシリアライズのフォーマットとして様々な形式（例えばJSONなど）も扱えるように周辺ツールが充実しているので，「スキーマ言語としてのProtocol Buffersでサービスのインフェースを記述して，実際にやり取りするデータはJSON」ということも可能になっています．\nFlat Buffers これもGoogleによってオープンソース化されたデータのシリアライズ・デシリアライズ方式．公式によれば，\n  Access to serialized data without parsing/unpacking Memory efficiency and speed Flexible Tiny code footprint Strongly typed Convenient to use Cross platform code with no dependencies   という特徴があります．面白いのが「Access to serialized data without parsing/unpacking」ってところですね．FlatBuffersでは階層構造を持つデータを，パースすることなく直接扱うことができるらしいです．\nProtocol Buffersの進化系として自らを位置づけていて，Flat Buffersではデータをパースする必要がないのでProtocol Buffersと比較してコード量が桁違いで削減できて，さらにFlat BuffersではProtocol Buffersより強力に型をサポートしているところが進化ポイントですね．white paperのmotivationの章には\n In particular, FlatBuffers focus is on mobile hardware (where memory size and memory bandwidth is even more constrained than on desktop hardware), and applications that have the highest performance needs: games.\n とあり，シリアライズの効率について高水準なものが求められる状況で用いられることが想定されているそうです．\nFacebookで用いられているらしいですが，Protocol Buffersの人気に押されて，あまり流行っている感じはしないんですがどうなんでしょうか．\nRef XML  hoge hoge  JSON  What is JSON - W3Schools JSON Introduction - W3Schools JSON Schema  BSON  BSON  Protocol Buffers  Protocol Buffers  Flat Buffers  Flat Buffers  ","date":1572796985,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572796985,"objectID":"5151db0bcc6ba8833835903e97cc00dd","permalink":"/ja/post/json-vs-protobuf-vs-flatbuf/","publishdate":"2019-11-04T01:03:05+09:00","relpermalink":"/ja/post/json-vs-protobuf-vs-flatbuf/","section":"post","summary":"聞いたことのあるシリアライゼーション形式について調べてみました","tags":["XML","JSON","ProtoBuf","FlatBuf","Data Serializing"],"title":"Data Serializationのさまざま","type":"post"},{"authors":[],"categories":[],"content":"Identity is\u0026hellip;  The fact of being who or what a person or thing is.\n Self-Sovereign Identity - 自己主権型アイデンティティとは Self-Sovereign Identityとは，一言で言えば「物理世界における身分証明書と同じレベルの正当性と携帯性と情報の制御可能性を備えたデジタルな身分証明書」です．Self-Sovereign Identityが実現すれば，公的に有効な身分証明書として機能するだけでなく，物理世界における「運転免許証」のように手軽に携帯できて，第二者に対して証明したい事柄に関連する必要十分な情報のみを開示する（例えば，年齢確認する際には誕生年だけ提示して住所は見せない）といった個人情報の制御も可能となります．\n現状のDigital Identityの問題点・Self-Sovereign Identityが必要とされる背景 そもそもなぜSelf-Sovereign Identityなるものが必要なのでしょうか．それはインターネットという計算機のネットワークが「接続において，通信の両端点のアイデンティティーを全く考慮しない」という系だからです．\nインターネットでは「誰が繋がっているのか」について全く関知しません．だからこそ自律分散な系として成立することができます．中央で接続を管理する者が存在する必要がないわけですね．\nしかし，SNSの登場によってインターネット上でのアイデンティティーのようなものが確立されてきました．SNSのアカウント情報です．SNSは「物理世界における人間のネットワーク」を計算機上に実現したものであるから，SNSという系に登場するアカウントは物理世界の人間と非常に密に関連している情報だし，その側面を持ってアイデンティティー的なものと見ることもできなくもないです．しかしSNSアカウントは物理世界におけるアイデンティティー（パスポートや運転免許証）と等価なものとしては扱えません．\n物理世界のアイデンティティーは「国家のような信頼できる第三者によって発行される証明書」として存在しています．パスポート，運転免許証はまさしくそれです．国家が「この人はこういう人で\u0026hellip;」という保証をしてくれているのです．だから（少なくともその証明書を発行している第三者を信頼できる者という共通認識のある範囲内では）証明書を見せつけることで第二者に対して自分の身分を証明することが可能なのです．\nパスポートや運転免許証はポケットに入れて持ち運ぶことができます．さらに第二者に対して開示する個人情報を，自分の手で制御することができます．相手に年齢確認を求められたなら，生年月日だけで十分（住所まで教える必要はない）ですから，運転免許証の該当部分だけ見せてあとは黒塗りとかでも主張の正当性は証明できるわけですね．この携帯性と情報開示に対する制御性が物理世界におけるアイデンティティーの持つ重要な性質です．\nSNSアカウントは実はこの「携帯性」と「情報開示に対する制御性」を兼ね備えていません．FacebookアカウントでTwitterにはログインできないし，Facebookは僕の持っているFacebookアカウントの情報の完全なコピーを持っていますし，Facebookがそれを外部に公開してしまえば，僕にはそれを止める手段がありません．\nSelf-Sovereign Identityはデジタルなアイデンティティーにサービスを跨いだ携帯性とアイデンティティー情報に対する制御性をユーザーに取り戻すことを目指して考案された概念です．\nSelf-Sovereign Identityに至るまでのデジタルアイデンティティーの変遷 デジタルアイデンティティーの類型はだいたい以下の4個です．どれも現役で用いられているアイデンティティーで，後半のものほど新し目な考え方で，グラデーションがついていると思うとわかりやすいです．\n Centralized Identity - 中央集権型アイデンティティー Federated Identity - 連合型アイデンティティー User-Centric Identity - ユーザー中心型アイデンティティー Self-Sovereign Identity - 自己主権型アイデンティティ  Centralized Identity - 中央集権型アイデンティティー ここのサービスごとに，サービス運営者がIDを発行・管理するタイプのIDです．メールアドレスとパスワードでアカウントを作成するタイプのIDはこれです．IDの管理権限が発行主体にあるというのが特徴で，現在世の中で運営されているほとんどのインターネットサービスがこの方式を採用していますね．\nサービスのビジネスモデルがユーザーの囲い込みによって成立しているという側面を考慮すると，発行とともに管理できる方が，サービス運営者としてはやりやすいし，実装も容易であるからだと思います．\nこのタイプのIDは，発行されたIDをそのサービスの外に持ち出すことが難しいことから，ユーザーのサービスに対するロックインや，サービスごとのアイデンティティーの分断，ユーザーによるIDの管理が不可能（サービス運営者が悪意を働いてもそれを止める手段をユーザーは持ち合わせていない）という問題点があります．\nFederated Identity - 連合型アイデンティティー 複数のサービス間でIDについて合意を取ることで，連合内ではIDの持ち運びが可能となるようなIDのことです．Single Sign-Onと呼ばれることもあります．1つのIDで複数サービスにログインできるサービス間での相互運用性Interoperabilityを実現します．\n連合型アイデンティティーは中央集権型のそれよりもユーザーの利便性は向上する一方で，連合型アイデンティティーであっても，IDそのものの管理は連合を組んでいるサービス提供者側にあります．\n実は連合型アイデンティティーに対する取り組みは，これまで一部で実際に行われてきた歴史があります．1999年にはMicrosoftがPassportという連合型アイデンティティーサービスに取り組もうとしていました．\nこれは，その当時に増加してきていたEコマース事業に対してその利便性を高めることを狙ってMicrosoftが取り組んでいたもので，Windows XPへのPassportでのサインインが可能だったりと結構新し目なことに取り組もうとしたのだと思います．Eコマースサイトに手元のパソコンのアカウントでログインできるということですから，覚えなきゃいけない情報が減るので助かりますね．\n一方で，Microsoftが一社でIDを管理するという色合いが強かったのも事実で，それを嫌ってか，広く利用されるには至らなかったようです．\n実はMicrosoftのPassportに対抗してSun Microsystemsを中心とした企業連合によってLiberty Allianceという同じく連合型アイデンティティーの実現を目指した団体があったようなんですが，これも道半ばで頓挫してしまいました．\nUser-Centric Identity - ユーザー中心型アイデンティティー 「ユーザーは自身のIDを自らの手で制御すべきだ」という考えに基づいて考案されたのがユーザー中心型アイデンティティーです．ユーザー中心型アイデンティティーでは「ユーザーの同意Consent」と「相互運用性Interoperability」に特に重きがおかれました．ユーザー中心型アイデンティティーはThe Identity Commonsという団体がリードしていたプロジェクトで，The Identity CommonsはInternet Identity Workshopを設立し，ユーザー中心型アイデンティティーの仕様策定を推進してきました．Internet Identity WorkshopはOpenID，OpenID Connect，OAuthといった現在多くSingle Sign-Onで利用されている仕様を誕生させています．\n一方でユーザー中心型アイデンティティーでも，IDの管理はIDの発行元によって行われ，もし発行元がIDの削除をしてしまえばそのIDは存在しなくなってしまうわけで，完全なユーザー中心（管理までユーザーの手で行う）というわけではないようです．\nSelf-Sovereign Identity - 自己主権型アイデンティティ 「物理世界におけるアイデンティティーの持つ携帯性と情報に対する制御性をデジタルなアイデンティティーに持ち込もう」というのが自己主権型アイデンティティーです．アイデンティティーに管理を自分の手で行おうとするのが自己主権に指す意味です．\nSelf-Sovereign Identityの仕組み  信頼できる第三者がユーザーの身分を証明する証明書を発行し，その証明書に電子署名を施す．この際に信頼できる第三者に対する識別子と署名情報を情報を耐改竄性のある公共アクセスが可能なストレージに保存する ユーザーは信頼できる第三者によって電子署名の施された証明書に対して自分の電子署名を施して，手元に保管する．この際，ユーザーに対する識別子と署名情報を耐改竄性のある公共アクセスが可能なストレージに保存する 身分証明を要求する検証者はユーザーから提示された証明書（もしくはその一部）に対して，その証明書が正当であることを公共アクセス可能なストレージに保存されている情報をもとに判断する  この「耐改竄性のある公共アクセスが可能なストレージ」がブロックチェーンを用いることで実現できるかもしれないということで，Self-Sovereign Identityの実現可能性が見えてきているのです．\nRef  https://medium.com/@AlexPreukschat/self-sovereign-identity-a-guide-to-privacy-for-your-digital-identity-5b9e95677778 https://www.windley.com/archives/2018/09/multi-source_and_self-sovereign_identity.shtml https://www.w3.org/TR/2019/WD-did-core-20191107/ https://www.jnsa.org/seminar/2018/0126/data/2-3.pdf https://www.icr.co.jp/newsletter/wtr346-20180126-ogawa.html https://www.dappsway.com/entry/what-is-ssi https://www.windley.com/archives/2017/10/fixing_the_five_problems_of_internet_identity.shtml https://www.ibm.com/blogs/blockchain/category/trusted-identity/self-sovereign-identity/ http://www.lifewithalacrity.com/2016/04/the-path-to-self-soverereign-identity.html  ","date":1572792488,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572792488,"objectID":"26eab1e50b15942fff1beb2275ae6825","permalink":"/ja/post/what-is-self-sovereign-identity/","publishdate":"2019-11-03T23:48:08+09:00","relpermalink":"/ja/post/what-is-self-sovereign-identity/","section":"post","summary":"Self-Sovereign Identityについてのメモです","tags":["Self Sovereign Identity","Distributed Identity","Blockchain","Identity"],"title":"Self-Sovereign Identity - 自己主権型アイデンティティー","type":"post"},{"authors":[],"categories":[],"content":"並行処理？並列処理？ 並行処理とか並列処理って一体なんなのでしょう．\n黎明期の計算機では，並行処理だの並列処理だのなんてことは，一切考えていませんでした．入力された命令を1つずつ，真面目に実行していくことで計算を実行していたのです．黎明期の計算機は，人間が紙と鉛筆でちんたら計算をするよりも，何倍も高速にかつ正確に計算をすることができたので，とても人気になりました．ただ，その当時の計算機は物理的にサイズもデカくて高価なものでした．なので，計算機を導入・設置できるのは大学などのお金と部屋が余っている組織ぐらいしかなかったわけです．\n大学に計算機が設置されると，大学の研究者たちは喜びました．これで面倒な手計算から解放されるわけですからそりゃそうでしょう．みんなでこぞって計算機を使いたくなります．でも「計算機を利用したい研究者の人数」が「設置してある計算機の台数」と比較して圧倒的に多いので，計算機の使用を巡って争奪戦が起こります．だって，当時の計算機は「入力された命令を1つずつ，真面目に実行していく」タイプの計算機なので，他の誰かが計算機に計算をさせている間は，他の研究者はその計算機を使うことができないからです．そんなの不便すぎます．せっかく便利でしかもめちゃんこ高価な計算機が設置してあるのに，しかも使いたい人はたくさんいるのに使わせてあげられないなんて，もう不満タラタラです．そこで研究者たちは考えました．\n「どうやって1台の計算機を複数人で共有して使うことができるだろうか？」\n「1台の計算機で複数のタスクを処理するためにはどんな仕組みが必要なんだろうか？」\nここからoperating systemとかprocessとかいろんな概念が確立されていくわけです．\n「並行」というのは，英語ではconcurrentに相当し，「1台のマシンで複数のタスクを同時に実行している（ように見える）様」を意味します．concurrentな処理は「限られたリソースを有効活用すること」を目的としていて，現在の計算機では「同時に処理しているように見せるために，複数のタスクを時間的に細切れにして全部のタスクをちょっとずつ進める」ことでconcurrentな処理を実現しています．\n一方で，似たような概念として「並列」というものもあります．英語ではparallelに相当し，「複数台のマシンで1つのタスクを実行している様」を意味します．parallelな処理は「（複数のマシンという）豊富なリソースを利用して1つのタスクを高速に実行すること」を目的としていて，concurrentとは目的が違います．\nconcurrentなプログラム ここまで計算機の進化の歴史を本当にざっくり見てみましたが，じゃあconcurrentという概念がプログラムとどう絡んでいくのでしょうか．\nプログラムというのは大体「CPUでの演算」「データのI/O」「ネットワーキング」を部品として構成されています．それぞれの部品には特徴があって，「CPUでの演算」はとても高速に実行できるけれども，「データのI/O」と「ネットーワーキング」は（「CPUでの演算」と比較して）桁違いに，本当に桁違いに時間がかかります．もし計算機が「入力された命令を1つずつ，真面目に実行していく」方式で動いていたとすると，「データのI/O」と「ネットーワーキング」に取り組んでいる間，計算機はうんともすんとも言わずに黙り込んでしまうことになります．これは明らかに無駄です．CPUは何も計算を進めないでただ存在しているだけになるわけです．\nconcurrentという概念の背景には「どうやって1台の計算機を複数人で共有して使うことができるだろうか？」という問題があったわけです．この問題意識が一歩進むと，「1台の計算機で複数のタスクを処理するためにはどんな仕組みが必要なんだろうか？」となり，さらに一歩進んで「（複数のタスクで構成される）1つのプログラムを1台のCPUで効率的に処理するためにはどういう仕組みが必要なんだろう？\u0026hellip;そうだ！CPUが暇な時間帯には別の仕事をさせよう！」となるわけです．\n「時間がかかってしまう処理をやっている間に，他にできる計算をCPUにやらせよう」というのがconcurrentなプログラムを書きたい理由です．だってそうした方がやりたいこと早く終わるでしょう．しかもPersonalな計算機が世の中に普及して「計算機はより高速にユーザーの動作に応答しなきゃいけない（うんともすんとも言わない計算機は嫌われてる）」し「ユーザーは大抵の場合音楽聴きながらメールチェックしつつYoutubeで動画も見たいワガママな存在」なので，CPUに暇な時間なんてものはないわけですよ．\n「プログラムはconcurrentに実行されるべき」となるとconcurrentなプログラムを記述して，それを実際にconcurrentに実行する機構が必要になります．\n「実際にconcurrentに実行する機構」についてはOperating Systemが頑張って，プログラムがconcurrentに実行されるように実行環境を提供します．Operating Systemは結構頑張るのですが，やっぱり頑固なハードウェアさんとやりとりしないといけないので，相当大変そうです．提供してくれる実行環境の効率にも限度がありそうです．\n「concurrentなプログラムを記述」するところについては，プログラミング言語の守備範囲なわけですが，いろんな言語がいろんなアプローチを取って，concurrentなプログラムをより簡単に書けるように，プログラム開発者に部品primitiveを提供してくれます．\nでも古参のプログラミング言語たちは，そのデザインの根幹に「プログラムがconcurrentに実行される」とか想定していないわけで，いざやろうとすると不自然なところとかがやっぱりでてきてしまいます．なのでgolangは，言語のデザインの段階でconcurrencyを考慮した言語として誕生しました．そうすれば，concurrentなプログラムがより直感的にわかりやすく書けるようになるわけです．\ngoroutineとchannel golangはconcurrentなプログラムを書くためのprimitiveとしてgoroutineとchannelを提供しています．というのもgolangでは，concurrentなプログラムを「goroutineたちがメッセージをやりとりしながら進行する計算」としてモデル化しているのです．ここで注意しておきたいのが，concurrentなプログラムを表現する別のモデルも考えられるという点です．モデル化にはバリエーションがあるので「goroutineたちがmessage passing」だけが唯一のモデルというわけではないです．\ngoroutineというのは，概念的にはOSの提供するプロセスとかスレッドみたいなもので，実行中の処理を抽象化したものです．直感的にはOSのスレッドと思っていてもいいかもしれません．実態はちょっと違うんですけどね．この「抽象化された処理」同士がmessage passingによって情報を共有することでconcurrentな処理が実現できることになります．\nchannelというのは，goroutine間でのコミュニケーションをサポートするためにメッセージキューです．\ngolangは言語設計の根底にある思想として\n Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n を，掲げています．要するに「goroutineたちは共有メモリを設けるのではなくてmessage passingでコミュニケーションをとる」ように設計しようということです．\ngoroutineとchannelの設計と実装を眺める goroutine goroutineは「実行中の処理を抽象化したもの」と書きましたが，これは具体的には「計算に用いるstackと実行状態を保持している構造体」として実装されています．\ntype g struct { // Stack parameters. \t// stack describes the actual stack memory: [stack.lo, stack.hi). \t// stackguard0 is the stack pointer compared in the Go stack growth prologue. \t// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption. \t// stackguard1 is the stack pointer compared in the C stack growth prologue. \t// It is stack.lo+StackGuard on g0 and gsignal stacks. \t// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash). \tstack stack // offset known to runtime/cgo \tstackguard0 uintptr // offset known to liblink \tstackguard1 uintptr // offset known to liblink  // ,,, } 「それってOSの提供するプロセスとかスレッドと同じじゃないの？」\nそれは確かにそうなんですが，goroutineはOSの提供するプロセスとかスレッドと同レベルの存在ではなくて，goroutineは，OSの提供するスレッドに対してM:Nでマッピングされる「golangのruntimeが提供する，ユーザー空間で定義されたスレッド」として存在しています．golangのruntimeはgoroutineを管理していて「いつ，どのgoroutineを実行するか」を決定するschedulerとしての役割も担っています．つまりgolangのruntimeはユーザー空間で動く「ミニOS」のようなものな訳です．とは言いつつも，実際に実行されるためにはOSの提供するスレッドとして実行されなければいけないわけですから，goroutineはスレッドにマッピングされることになります．golangのschedulerはgoroutineとOSのスレッドを，M:Nでマッピングします．つまり複数のgoroutineが複数のOSスレッドとして実行されるわけです．1つのgoroutineが複数のOSスレッドとして実行されるし，1つのOSスレッドでは複数のgoroutineを実行することになります．\n   OS Process v.s. OS Thread v.s. Goroutine   となると，重要なのは「golangのruntimeがどのようなルールでgoroutineの実行計画を立てるのか」です．\ngolangのruntimeによるgoroutineのスケジューリング 登場するのはM，G，Pの三人．\n M  machineのM OSスレッドに相当する   G  goroutineのG   P  processorのP スケジューリングのコンテキスト（次どのGを実行するのか）を管理している 具体的に言えば，runnableなgoroutineのキューを管理しているのがP       G，M，P   まず，環境変数GOMAXPROCSの数だけM，Pがセットされます．以下では，GOMAXPROCS = 2とします．\n  runnableなGがPにenqueueされ，MはPからrunnableなGを1個取り出して実行します．\n  もし，queueにrunnableなGが0個になってしまったら，他のqueueから半分盗みます．\n  「自分のqueueが空になったら他のMの持つPから半分奪う」というスケジューリングアルゴリズムはwork stealingアルゴリズムと呼ばれています．golangのruntimeのスケジューラーはこのwork stealingアルゴリズムに従ってgoroutineのスケジューリングを行います．このアルゴリズムはCPUをたくさん使うような処理にスケジューリングには効率的である一方でI/O待ちを伴う処理（syscallの実行やネットワーク処理）とは相性が悪いです．そのため，いくつかの工夫がされています．\nまず，golangのruntimeに存在しているものを整理します．上で登場したM，G，Pの他にruntimeには\n グローバルキュー  各M-Pに対応するqueueとは別に存在するキュー 通常GがrunnableになるとPの持つキューに入るが，いくつかの状況ではこちらに入ります   sysmon  GOMAXPROCSの数だけのMとPの他に，sysmonという関数を実行し続ける特別なMが存在しています sysmonの実態は無限ループで，そのループの中でnetpollのチェックなどを行っています   P Idle List  暇なPのリスト   M Idle List  暇なMのリスト    syscallを実行した場合 時間のかかるsyscallを実行した場合，sysmonがそれを検知し，syscallを発行したGを実行しているMからPを切り離し，別のMにそのPをアタッチして処理を継続させます． syscall終了後は，まずP Idle Listを確認して暇そうにしているPを自身（M）にアタッチして処理を進めます．P Idle Listがからの場合はsyscallを発行したGをグローバルキューに突っ込み（このGはいずれGCされる），自身（M）はM Idle Listに入ります．\n  ネットワーク処理をした場合 ネットワーク処理の発生時にはnetpollerという仕組みに，ネットワーク処理を実行しているgoroutineが登録され，sysmonがnetpollerにポーリングします．ネットワーク処理が終了したらnetpollerからグローバルキューに追加されて，Mで続きを実行されるのを待つことになります．\ngolangの標準ライブラリが提供するネットワーキングのAPIはブロッキングな処理となっていますが，goroutineはOSスレッドに対してM:Nでマッピングされるため，netpollerをによってノンブロッキングな処理として実行されることになります．\n  channel channelはgoroutine間でのメッセージングをサポートするキューです．channelにはいくつかの面白い特徴があります．\n channelはgoroutine-safe  複数のgoroutineがあるchannelに同時にアクセスしても問題が発生しないようにロック機構が組み込まれています   channelはgoroutine間でFIFOなデータの受け渡しが可能です channelはその状況次第ではgoroutineをブロックしたりアンブロックしたりできます  バッファ0のchannelはgoroutineを同期させることができます．つまりあるgorotuineがchannelに書き込むと，相手のgoroutineがそれを読み込むまで書き込んだgoroutineの実行はブロックされるし，channelから読み込みたいgoroutineの実行は，相手のgoroutineが何かを書き込むまでブロックされます．    channelはhchanという名前の構造体で実装されています．\ntype hchan struct { qcount uint // total data in the queue \tdataqsiz uint // size of the circular queue \tbuf unsafe.Pointer // points to an array of dataqsiz elements \telemsize uint16 closed uint32 elemtype *_type // element type \tsendx uint // send index \trecvx uint // receive index \trecvq waitq // list of recv waiters \tsendq waitq // list of send waiters  // lock protects all fields in hchan, as well as several \t// fields in sudogs blocked on this channel. \t// \t// Do not change another G\u0026#39;s status while holding this lock \t// (in particular, do not ready a G), as this can deadlock \t// with stack shrinking. \tlock mutex } まず，構造体hchanのメンバーとしてlock mutexが見えるので，channelはgoroutine-safeです．複数のgoroutineが同時にアクセスしても問題が発生しないようになっています．goroutineがchannelに対して読み書きをしたくなったらロックを取ってから行うようになっているということです．\n上に示した通り，channelの実体は「circular queue（へのポインタ）」です．組み込みのmake()でchannelを作ると，実体はheap領域に確保され，それへのポインタが返されます．bufがバッファ先頭へのポインタで，sendx・recvxがそれぞれキューの先頭とお尻の番号になっています．\n   構造体hchan   なので，channelにメッセージが送り込まれたら，buf[0]にメッセージが入り，sendxがインクリメントされて1になります．続けてメッセージが2個送り込まれるとbuf[1]，buf[2]にメッセージが書き込まれ，sendxが0に戻ります．ここでメッセージが1個読まれるとbuf[0]の内容がdequeueてrecvxが1になります．特に難しいことはなく，一般のcircular queueの動作ですね．\nchannel間のメッセージングはとても直感的に実現することができます．channelにメッセージを書き込む時は，まずhchanのロックを取って，次にbufのお尻に送りたいデータをメモリコピーして，アンロック．channelからメッセージを読み込む時は，同様にまずhchanのロックを取って，bufの先頭をメモリコピーして，アンロック．とてもシンプルな動作です．\n実はこの挙動こそが，golangの\n Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n を実装している箇所と言えます．\ngoroutine間で共有しているのは構造体hchanだけです．しかもhchanはロックによって排他処理が施されるため，goroutine-safeです．hchanのbufに値を書き込む（つまりchannelに値を送る）・値を読み込む（つまりchannelから値を取り出す）動作は全てメモリコピーで行われます．goroutine間でやり取りする情報は（メモリを共有するのではなくて）メモリコピーして渡しましょうというのが，上の標語の実装と言えます．\nchannelはgoroutineの挙動をブロックしたりアンブロックしたりすることができます．バッファに空きが無いchannel（バッファ0のchannelや容量一杯データが書き込まれているchannel）に対してデータを送り込もうとすると，gopark()が実行されます．この関数は，golangのruntimeのスケジューラを呼び出して，バッファに空きが無いchannelにデータを送り込もうとしたgoroutineの状態をwaitにして別のgoroutineの実行を始めます．channelに対してデータを送り込むロジックの中に，goroutineをブロックするロジックが組み込まれているということになります．では，どうやってブロックされたgoroutineの実行を再開するのでしょうか．\nここで興味深いのが，gopark()の実行の直前に「どのgoroutineがどんな値を送り込もうとしていたのかをchannelの中に記録しておく」というところです．構造体hchanにはsendq，recvqというメンバがあり，そこに「このchannelにどのgoroutineがどんなデータを送り込もうとしているのか，取り出すのはどのgoroutineでどこに読み込もうとしているのか」という情報を保持しています．「このchannelにどのgoroutineがどんなデータを送り込もうとしているのか，取り出すのはどのgoroutineでどこに読み込もうとしているのか」を保持する構造体はsudogという名前になっています．なぜこの名前なのかはここのメーリスの一連の流れを読むとわかるかもしれませんよ．\n// sudog represents a g in a wait list, such as for sending/receiving // on a channel. // // sudog is necessary because the g ↔ synchronization object relation // is many-to-many. A g can be on many wait lists, so there may be // many sudogs for one g; and many gs may be waiting on the same // synchronization object, so there may be many sudogs for one object. // // sudogs are allocated from a special pool. Use acquireSudog and // releaseSudog to allocate and free them. type sudog struct { // The following fields are protected by the hchan.lock of the \t// channel this sudog is blocking on. shrinkstack depends on \t// this for sudogs involved in channel ops.  g *g // isSelect indicates g is participating in a select, so \t// g.selectDone must be CAS\u0026#39;d to win the wake-up race. \tisSelect bool next *sudog prev *sudog elem unsafe.Pointer // data element (may point to stack)  // The following fields are never accessed concurrently. \t// For channels, waitlink is only accessed by g. \t// For semaphores, all fields (including the ones above) \t// are only accessed when holding a semaRoot lock.  acquiretime int64 releasetime int64 ticket uint32 parent *sudog // semaRoot binary tree \twaitlink *sudog // g.waiting list or semaRoot \twaittail *sudog // semaRoot \tc *hchan // channel } gopark()によって受け取り手のgoroutineの実行が開始されると，受け取り手のgoroutineが，channelのsendqの中身を確認して，実行をブロックされてしまった送り手のgoroutineが最後にchannelに送り込もうとした値を（送り手側に代わって）受け取り手側がchannelのbufにコピーします．これはある種の最適化です．真面目に，送り手側の実行が再開されてからchannelにデータを送り込むことにするとchannelに対するロックを取る必要があり，排他処理をする回数が1回増えてしまいます．「誰がどんな値を送ろうとしていたのか」が自明であるならば，先にやってしまえという考えのようです．\nchannelから値を1個受け取ると，goready()が実行されて，スケジューラーが起動し，バッファに空きが無いchannelにメッセージを送ろうとしたgoroutineの状態をrunnableにセットして実行待ちのキューに入ります．\ngoroutineが空のchannelに対して読み込みを行おうとすると，そのgoroutineの動作はブロックされます．この挙動はchannelからデータを受け取るロジックであるrecv()関数内に記述されています．さらに面白いのが，「どのgoroutineが，どこに値を受け取ろうとしていたのか」をrecvqに保存していることです．これによって，channelにデータを送り込むgoroutineが，受け取り先のgoroutineのスタック領域を直接いじってデータを送り切ってしまうことが可能となります．goroutineの実体は（雑に言えば）stackを持つ構造体で，OSプロセスのスタック領域に置かれています．つまり別のgoroutineの持つstackを直接いじることが，channelでのデータのやり取りの限られた状況においてのみ許されているというのが興味深いです．\ngolangのchannel周りの実装を見て，\n 「排他処理を含む簡潔な実装の方が，排他処理なしの複雑な実装よりマシ．いくらパフォーマンスが良くても，それが複雑なコードでも良いことの理由にはならない」 「パフォーマンスの観点から，goroutineというユーザーレベルのスレッドを実装し（OSスレッドをブロックさせない），異なるgoroutineを跨いだメモリコピーを許す（その分実装がやや複雑になるがそれは許容する）」  という相反する考えが感じられます．つまり\n simplicityとperformaceには明確なtrade-offが存在する\n ということですね．\nおわりに 今回初めてruntimeをじっくり読みました．今まで概念として理解していたものの実体をコードとして掴めたので，とても楽しかったです．今回はgoroutineとchannel周りが中心だったので，次はスケジューラー周辺をもっとつぶさに見ていきたいと思います．\n","date":1572584876,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572584876,"objectID":"b23a273aaf77fc1dcb8ae6fefc8b2a15","permalink":"/ja/post/internal-of-golang-concurrency-primitives/","publishdate":"2019-11-01T14:07:56+09:00","relpermalink":"/ja/post/internal-of-golang-concurrency-primitives/","section":"post","summary":"goroutineとchannelの実装について眺めてみました","tags":["Golang","Goroutine","Channel","Concurrency","Parallelism"],"title":"Internal of Golang Concurrency Primitives","type":"post"},{"authors":[],"categories":[],"content":"golangとconcurrentなプログラミング 「concurrentな処理をどのように実現するか」はざっくり分けて2アプローチがある．\n1つは「shared-memory communication」．つまり処理を実行しているworker同士は，メモリを共有して，その共有しているメモリを用いてコミュニケーションを取るというもの．この場合，データ競合が発生しないようにロックを取ったりなどの排他処理を伴うことになって，大抵の場合実装が難しくなるとされている．\nもう1つは「message-passing communication」．つまり処理を実行しているworker同士は，メッセージをやり取りし合うことでコミュニケーションを取るというもの．\nそれぞれのアプローチでいろんな実装が世の中にはすでに存在していて，例えばCでconcurrentなプログラムを書こうとするとshared-memory communicationな形で書くことになる．一方でErlangは言語としてconcurrentなプログラミングをサポートしていて，Actorモデルを実装してる．\ngolangは，設計の時点でconcurrentなプログラミングは\n Do not communicate by sharing memory; instead, share memory by communicating\n という思想で実装することとしている．golangのconcurrentなプログラミングの実装は「Communicating Sequential Processes」と「$\\pi$-caluculus」を参考にしている．\ngolangは「concurrentなプログラミングを簡潔にわかりやすく記述すること」を言語の設計レベルからサポートしているので，concurrentな処理がとても書きやすくなっている．じゃあgolangではどうやってconcurrentなプログラミングをサポートしているのかというと，concurrentなプログラミングのプリミティブとしてgoroutine，channelを提供している．\n「golangはconcurrentな処理が書きやすいんだよね」という話をすると混乱しがちなのが， 「golangはconcurrentな処理を書くための道具を提供してくれるが，その実行がparallelであるかどうかはハードウェアに依存する」 という点．concurrentな処理は，parallelに実行することができるかもしれない（し大抵parallelに実行できるならそうしたほうがいい）が，それはハードウェアがparallelな実行をサポートしているか（例えばCPUが複数コア搭載しているか）によって決まってくる話であって，「プログラムがconcurrentであること」と「プログラムの実行がparallelであること」は関連はしているけれども，全く別の話．Rob Pike先生も\n Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. Not the same, but related. Concurrency is about structure, parallelism is about execution. Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.\n って仰っている．\nHello, goroutine!  「golangではconcurrentなプログラムを書きやすい」ということだったので，実際にconcurrentなプログラムを書いてみると上の例みたいになる．concurrentに処理を実行するworkerは，golangの世界ではgorutineと呼ばれていて，goという魔法の言葉に続けてworkerで実行してほしい関数を呼び出せば，それでconcurrentな処理を書き下したことになる．なんて簡単なんだ...！\n上の例を実行すると，Hello! I'm mainって印字されて，もしかしたらHi! I'm goroutine!も一緒に印字される かもしれない．「かもしれない」っていうのは，goroutineは「あるgoroutineの親は自分の子供の処理が終わるのを待たない」ことになっている．この場合だとmainが親でgo fmt.Println(\u0026quot;Hi! I'm goroutine!\u0026quot;)が子供の関係になっていて，mainのfmt.Println(\u0026quot;Hello! I'm main\u0026quot;)の終了したら，その時点で子供の実行も終了させられてしまう．もし，子供のgoroutineが自己紹介し終わる前に親が自己紹介しきっちゃえば子供の自己紹介は印字されないし，親の自己紹介が終わる前に子供が自己紹介しきっちゃえば，親子両方の自己紹介が聞けることになる．\n「なるほど．でも親が先に終わっちゃうと子供も強制終了って，それどうにかならないの？」って思った方は賢くて，どうにかするためにgoroutine間でおしゃべりできるchannelというデータ構造が実装してある．\nNice to meet you, channel! channelはgoroutineたちが同期しながらconcurrentな処理を実行していくためのmessage-passingのメカニズムを提供してくれる．channelは「そのchannelを通じてやり取りするデータの型・バッファサイズ・メッセージのやり取りの方向」で定義されて，組み込み関数のmake()で簡単に作ることができる．\ngolangでは「channelはfirst-class value」として扱われる．つまりchannelは，他の値（例えばなんらかの構造体とかint型の変数とか関数とか）と同じレベルで扱われる．だから関数がchannelを返すなんてこともできるし，関数の引数にchannelを与えることもできるし，channelのchannelも定義できる．\nchannelの入出力の方向は\u0026lt;-という演算子で表現することになっている．\u0026lt;- cって書けばchannel cからデータを読み込むことになるし，c \u0026lt;- 1って書けばchannel cに1を書き込んだことになる．\nということで，channelを使った簡単ばプログラムを書いてみるとこんな感じになる．\n channel done を使って「僕は自己紹介終わったよママ」って子供のgoroutineが親mainに連絡することで，実行が同期されて両方の自己紹介が聞けるようになった．\nchannel doneは「bool値を通す，バッファが0の，読み書きができるchannel」として定義されている．golangでは「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」ことになっている．なので，この例だと，確実に子供goroutineの自己紹介を聞くことができることになる．「バッファが0のchannelに対する読み書きは，情報の送受信両者がコミュニケーションの準備ができるようになるまでブロックされる」という挙動からバッファが0のchannelは「synchronous」と言える．\n下の例を実行すると，channel messageに1を送り終わってから，mainが1秒寝てしまうので，子供はchannel messageに続く2，3を送れなくて，止められてしまう．この挙動はsynchronousということになる．\n 一方で，バッファのあるchannelに対する読み書きは「バッファが空でないなら読み込みはブロックされない」「バッファが一杯でないなら書き込みはブロックされない」という挙動になっている．なので，バッファのあるchannelは「asynchronous」と言える．\n下の例を実行すると，channel messageはバッファを持っているので子供は1，2，3，4と（mainが眠りから覚める前に）立て続けに送ることができる．この挙動はまさしくasynchronousだ．\nOh, poor deadlock... 「goroutineもchannelもわかったので」ということで下みたいなプログラムを書くとdeadlockと言われてgolangのruntimeから叱られる．\n これはつまりどういうことかというと，golangのruntimeが「お前のプログラム実行したけど7行目でバッファのないchannelに42って送ってる（c \u0026lt;- 42）けど，それしたら受信者がいないし，受信者がいないと送信者も実行を進められないので，どうすることもできなくなっちゃったぞ」と怒っているのだ．\n「バッファのないchannelはgoroutine間の挙動をsynchronousにするもの」なので「受信者となるgoroutineのいない，バッファ0のchannelに値を送るとdeadlockする」のだ．\n今回の場合だと，受信者が存在しないことが問題なので，受信者となるgoroutineを作ればうまくいく．\n Let's range channels and close them. channelはrange構文を使って1つずつ値を取り出すということも記述できる．でも，rangeを使ってchannelから値を次々取り出すときはchannelを明示的にclose()しないといけない．\n チャンネルは組み込み関数のclose()で「閉じる」ことができて，閉じられたchannelに対して書き込みを行おうとするとgolangのruntimeはpanicして，閉じられたchannelに対して読み込みを行おうとするとそのchannelの扱う型のゼロ値が得られることになっている．\n「閉じられたchannelに対する読み込み」の特徴は「goroutineに処理の終了を通知させる機構」として応用することができる．大抵，こういう処理終了通知を行う場合は空の構造体struct{}のchannelを使う．なんてったって空の構造体は0byteだからね．\n あと，閉じられたchannelに対する読み込みはブロックされないので，そのまま処理は進む．\nMultiple channels and select. goroutineとchannelを使って実際になんらかの意味のあるプログラムを書こうとすると，たくさんのgoroutineとたくさんのchannelを扱うことになるのが普通である．大抵の場合「複数のchannelを同時に待ち受けたい」状況に出くわす．golangでは複数のchannelを同時に待ち受けるselect構文を用意している．\n select { case ...: ...}という構文で，複数のchannelを同時に待ち受け，値が書き込まれたchannelだけに対応するという，イベント駆動みたいな処理も簡単に書くことができるようになっている．\nchannel，お前最高かよ！ channelはマジで便利！でも使いこなすにはchannelの挙動をよく理解していないといけない．\n","date":1572528748,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572528748,"objectID":"d1a9aaedba5cb2d487581db7040bf32b","permalink":"/ja/post/golang-channels-tutorial/","publishdate":"2019-10-31T22:32:28+09:00","relpermalink":"/ja/post/golang-channels-tutorial/","section":"post","summary":"Golangの根っこに組み込まれているconcurrencyを実現する重要な部品であるchannelについて解説します！","tags":["Goalg","Channel","Tutorial"],"title":"Golang channels tutorial","type":"post"},{"authors":[],"categories":[],"content":"日本語にすると\u0026hellip; 調べてみると，**「Concurrentは並行」「Parallelは並列」**と訳されるのが一般的らしいですが，日本語にしたところで違いが判然としないので，自分なりの解釈を書いてはっきりさせておきます．\nっと，その前に広辞苑によれば\u0026hellip;  【並行】並びゆくこと．また，並び行なわれること．「両案を並行して審議する」\n  【並列】並び連なること．直列の対義語\n ダメだった．\nじゃあ，英英辞典（Oxford Dictionary）で引くと\u0026hellip;  concurrent\nExisting, happening, or done at the same time. ‘there are three concurrent art fairs around the city’\n  parallel\n[Computing] Involving the simultaneous performance of operations. ‘highly parallel multiprocessor systems’\n これでもダメだった．\n僕の理解 Concurrent 並行とは「複数のタスクが，論理的に，同時に処理されているように見えること」\n具体的には，CPUが1コアの時代に，「一つのパソコンでブラウジングしながらメールが読める理由」を説明するのが「CPUがタスクをConcurrentに処理しているから」で，これが僕の「並行」の理解．\n細切れにたくさんの仕事をちょっとずつ進めて，全体として複数のタスクが同時に処理されているように見えるってだけで，実際に複数のタスクが同時に処理されているわけではない．\n**「一人でいろんな仕事を同時に進めている様」**が並行．\nParallel 並列とは「複数のタスクが，物理的に，同時に処理されていること」\n具体的にはマルチコアのプロセッサが，搭載している複数のプロセッサをちゃんと使い切って演算をしている様は，並列という言葉で形容できる．\n**「複数人が同時に，それぞれの仕事を進めている様」**が並列．\nちなみに，「並列であれば常に並行である」という主張もあるらしい．「複数人が同時に，それぞれの仕事を進めている様」は側から見ると「いろんな仕事を同時に進めている」ように見えるから，確かにそうかもしれない．\nRob Pike先生によれば\u0026hellip;  Concurrency is about dealing with lots of things at once.\n  Parallelism is about doing lots of things at once.\n  Not the same, but related.\n  Concurrency is about structure, parallelism is about execution.\n  Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.\n なるほど\n結局なんだってばよ\u0026hellip;   Concurrency is a way of structuring your program to make it easy to understand and scalable\n  and Parallelism is simply the execution of multiple goroutine in parallel\n  ref  Concurrency is not Parallelism  ","date":1572506814,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572506814,"objectID":"c7e7cdbec1dbcce85a754deadfc1e74c","permalink":"/ja/post/concurrent-vs-parallel/","publishdate":"2019-10-31T16:26:54+09:00","relpermalink":"/ja/post/concurrent-vs-parallel/","section":"post","summary":"似てるようで違うのでちゃんと区別したい","tags":["Concurrent","Parallel","Terminology"],"title":"Concurrent v.s. Parallel","type":"post"},{"authors":[],"categories":[],"content":"0. これは何 僕が最近研究している「並行グラフ処理系」に関連して，僕自身のテーマにおいて非常に参考になった論文であるParallelizing Sequential Graph Computations1について，その詳細をまとめました．なお，以下の資料の内容は大学のカリキュラムの一環として行われた発表会で用いたハンドアウトです．\n1. 背景 一台のメモリに載り切らないほど巨大なグラフに対する計算需要の高まりを受け，グラフ計算を並列実行するPregel2やGraphLab3をはじめとする処理系が考案された．これらは「各頂点を一台の計算機と見なし，頂点ごとに処理を実行し，頂点間でコミュニケーションをとりながら状態を更新し，その収束を以って全体の解とする」ようなThink Like A Vertex(TLAV)という計算モデルを実装している．\nしかし，既存のグラフアルゴリズムは並列実行されることを前提としていないため，これらの処理系を利用するためには実行したいアルゴリズムをTLAVに書き下す必要があるが，これは容易な作業ではない．グラフアルゴリズムはTLAVの登場以前から研究されていて，問題を解決する最適なアルゴリズムが既に存在しているにも関わらず，TLAVな処理系ではアルゴリズムの変換が伴うため，敷居が十分に下がったとは言えない．\nそこで，既存のグラフアルゴリズムのロジックをそのまま用いながらも，並列実行することができるような処理系 $GRAPE$ を提案する． $GRAPE$ では，計算モデルとして，既存の分散グラフ処理系が採用するTLAVではなく，Partial evaluation \u0026amp; Incremental Computationモデル(以下$GRAPE$モデル)を採用し，既存のアルゴリズムのロジックを変更することなく並列化させる．同時に，$GRAPE$モデルはTLAVと比較してコミュニケーションコストを少なく抑えることができることからより効率的な計算の実行が可能となる．\n2. 関連研究 分散グラフ処理の計算モデルの変遷と$GRAPE$モデルの位置付けを述べる．分散グラフ処理を実現する計算モデルとして以下の二つがよく用いられる．\nThink Like A Vertex 最初に提案された計算モデル．PregelやGiraph4，GraphLab5に実装されている．頂点ごとに処理を実行し，頂点間でコミュニケーションをとりながら状態を更新．全頂点の状態の収束を以って全体の解とする．\nThink Like A Graph (or Block Centric) TLAVを高速化しようとする研究の中で提案されたモデル．$n$個の頂点をまとめて扱うことでコミュニケーションコストを抑え，実行効率の向上を図る．Blogel6で実装されている．\nTLAVとBlock Centricモデルおよび$GRAPE$モデルを，処理単位の粒度，コミュニケーションコストの大小，プログラミングのしやすさという三つの観点から整理すると下表のようになる．\n   表1. 分散グラフ計算モデルの比較   3. Partial evaluation \u0026amp; Incremental computation $GRAPE$では，Partial evaluation \u0026amp; Incremental computationという計算モデルを採用している．これは，最初に部分グラフに対して実行したい処理を行って部分解を求め，その部分解の更新を繰り返していくことで全体の解を求めるというモデルである．\nPartial evaluation コンパイラによるプログラム最適化の文脈で登場し，XML文章中の要素を指定するXPathを分散環境下で評価する研究などでも取り上げられている7．\nIncremental computation 巨大な動的グラフ$G$に対するクエリ$Q$の応答速度を向上させる技術．グラフの変化$\\Delta G$から$Q(G \\oplus \\Delta G) = Q(G) \\oplus \\Delta O$を満たすようなクエリ出力の差分$\\Delta O$を求めることで，グラフ全体を用いて再計算することなく，変化後のグラフに対するクエリ結果を求める8．\n例えば，図1のような5ノードからなるグラフ$G$を三つの部分グラフ$F_1$，$F_2$，$F_3$に分割する．部分グラフは，それを構成するノードとそのノードを始点とするエッジの終点も含めるものとして与える．例えば，部分グラフ$F_1$は図2となる．ここで，グラフ$G$に対してノード$1$を始点とする単一始点最短経路問題(SSSP)を考える．$GRAPE$ではまず，部分グラフ$F_1$に対してダイクストラ法を用いて計算する．この結果は$G$全体に対するSSSPの解ではないが，この結果は全体の解のたたき台となっている．この「部分グラフ$F_1$に対するダイクストラ法の適用」がPartial evaluationである．\n    図1. 全体グラフ      図2. 部分グラフ $F_1$   $F_1$にダイクストラ法を適用することで表2を得る．ここで，ノード$4$および$5$のコストが計算されていることに注目する．これは，$F_1$のpartial evaluationの結果から，$F_3$の状態が変化した(表3におけるノード$4$および$5$の初期状態からの変化)ということであり，この変化を元に$F_3$に対してダイクストラ法を適用することで全体解に収束していく．これが，$GRAPE$のIncremental computationである．\n    表2. 部分グラフ$F_1$に対するPartial evaluation      表3. 部分グラフ$F_3$に対するIncremental computation   4. $GRAPE$ Partial evaluation \u0026amp; Incremental computationを図3のように組み上げることで処理系$GRAPE$を実現する．\n   図3. $GRAPE$   $GRAPE$の利用者は実行したい処理を，$\\sf PEval$(Partial evaluation相当)，$\\sf IncEval$(Incremental computation)相当，部分解をまとめる$\\sf Assemble$という三つのプログラムとして$GRAPE$に与える．$GRAPE$は一つの$\\tt coordinator$と複数の$\\tt worker$で構成され，$\\tt coordinator$は部分グラフ間の接続関係やどの$\\tt worker$がどの部分グラフを担当するかを管理している．$\\tt worker$は各自が担当する部分グラフに$\\sf PEval$や$\\sf IncEval$を適用する．\n$GRAPE$での演算は三つのフェーズから成る．まず$\\tt coordinator$がクエリの実行を受け付け，$\\tt worker$が各自が担当している部分グラフに対して$\\sf PEval$を実行する．次に, 各$\\tt worker$が部分グラフの状態変化を$\\tt coordinator$に通知する．$\\tt coordinator$は部分グラフ同士の接続関係を考慮し，対応する$\\tt worker$に変化を伝達する．知らせを受けた$\\tt worker$は，状態変化に基づく$\\sf IncEval$を実行し自分の担当している部分グラフの状態を更新する．$\\sf IncEval$は更新が発生しなくなるまで繰り返される．$\\sf IncEval$が収束すると，$\\tt coordinator$は各$\\tt worker$から部分解を回収し，最終的な出力を得る．\n5. $GRAPE$のアドバンテージ $GRAPE$は処理効率と$GRAPE$モデルの表現力において，既存の処理系に対してアドバンテージがある．$GRAPE$では部分グラフ間の状態変化をやり取りするコストのみで済むため，TLAVと比較して大幅にコミュニケーションコストが抑えられる．これによって，TLAVよりも効率的な処理が実行できる．さらに$GRAPE$で実行されるアルゴリズムのロジックは既存のものと変わらないため，既存のグラフ最適化技法を適用することができ，さらなる高速化も見込むことができる．加えて，$\\sf MapReduce$など他の分散計算モデルを$GRAPE$上に表現することも可能である．例えば$\\sf IncEval$でやり取りする情報を\u0026lt;key: value\u0026gt;として$\\sf PEval$と偶数回目の$\\sf IncEval$を$\\sf Map$に，奇数回目の$\\sf IncEval$を$\\sf Reduce$とすれば$\\sf MapReduce$を表現できる．\n6. 評価 $GRAPE$モデルがTLAVよりも\n 処理時間 コミュニケーションコスト グラフの規模に対するスケーラビリティ  の三点において，TLAVとの性能を比較し$GRAPE$モデルの優位性を検証した．プロセッサの数を64から192まで変化させながら，liveJournal9など複数の実世界グラフに対して単一始点最小経路問題をGiraph，GraphLab，Blogel，$GRAPE$で実行した結果を図4に示す．$GRAPE$はGiraph，GraphLab，Blogeと比べて484，36，15倍高速に処理を実行し，$\\tt worker$間でやり取りされるデータ量を0.07%，0.12%，0.7%に抑えられている．\nグラフの規模に対するスケーラビリティを，入力グラフを5Mノード50Mエッジから25Mノード250Mエッジまで変化させながら実行時間とコミュニケーションコストを計測した．その結果を図5の左二図に示す．グラフ規模に対して十分にスケールしていることがわかる．\n図5の右端図から，${GRAPE}$では，並列実行に伴うオーバーヘッドを考慮してもなお，既存のアルゴリズムに対する高速化技法の効果が得られることがわかる．\n    表4. 処理系ごとの実行時間とコミュニケーションコスト      表5. ${GRAPE}$のスケーラビリティーとグラフレベル最適化の効果   7. 結論 Partial evaluation \u0026amp; Incremental computationという計算モデルはグラフに対しても有効であり，この計算モデルを用いることで 既存のグラフアルゴリズムのロジックをほぼ変更することなく並列化を実現でき，分散グラフ処理系を利用する敷居を下げられる．そこでPartial evaluation \u0026amp; Incremental computationを実装する処理系$GRAPE$を提案する．Partial evaluationに相当する$\\sf PEval$とIncremental computationに相当する$\\sf IncEval$，部分解を集める$\\sf Assemble$を定義することで既存のグラフアルゴリズムの並列化を実現する．\n    Wenfei Fan, Wenyuan Yu, Jingbo Xu, Jingren Zhou, Xiaojian Luo, Qiang Yin, Ping Lu, Yang Cao, and Ruiqi Xu. 2018. Parallelizing Sequential Graph Computations. ACM Trans. Database Syst. 43, 4, Article 18 (December 2018), 39 pages. DOI: https://doi.org/10.1145/3282488 ^ Grzegorz Malewicz, Matthew H. Austern, Aart J.C Bik, JamesC. Dehnert, Ilan Horn, Naty Leiser, and Grzegorz Czajkowski.2010. Pregel: a system for large-scale graph processing. In Pro-ceedings of the 2010 ACM SIGMOD International Conferenceon Management of data (SIGMOD ’10). ACM, New York, NY,USA, 135-146. ^ Yucheng Low, Danny Bickson, Joseph Gonzalez, CarlosGuestrin, Aapo Kyrola, and Joseph M. Hellerstein. 2012. Dis-tributed GraphLab: a framework for machine learning and datamining in the cloud. Proc. VLDB Endow. 5, 8 (April 2012),716-727. ^ Giraph. http://giraph.apache.org/ ^ Yucheng Low, Danny Bickson, Joseph Gonzalez, CarlosGuestrin, Aapo Kyrola, and Joseph M. Hellerstein. 2012. Dis-tributed GraphLab: a framework for machine learning and datamining in the cloud. Proc. VLDB Endow. 5, 8 (April 2012),716-727. ^ Da Yan, James Cheng, Yi Lu, and Wilfred Ng. 2014. Blogel:a block-centric framework for distributed computation on real-world graphs. Proc. VLDB Endow. 7, 14 (October 2014), 1981-1992. ^ Peter Buneman, Gao Cong, Wenfei Fan, and Anastasios Ke-mentsietsidis. 2006. Using partial evaluation in distributedquery evaluation. In Proceedings of the 32nd international con-ference on Very large data bases (VLDB ’06), UmeshwarDayal, Khu-Yong Whang, David Lomet, Gustavo Alonso, GuyLohman, Martin Kersten, Sang K. Cha, and Young-Kuk Kim(Eds.). VLDB Endowment 211-222 ^ Wenfei Fan, Chunming Hu, and Chao Tian. 2017. Incremen-tal Graph Computations: Doable and Undoable. In Proceedingsof the 2017 ACM International Conference on Management ofData (SIGMOD ’17). ACM, New York, NY, USA, 155-169. ^ Snap. http://snap.stanford.edu/data/index.html ^   ","date":1572360869,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572360869,"objectID":"968af61da1967f4fa2f595bb94735e9d","permalink":"/ja/post/parallelizing-sequential-graph-computations/","publishdate":"2019-10-29T23:54:29+09:00","relpermalink":"/ja/post/parallelizing-sequential-graph-computations/","section":"post","summary":"僕が最近研究している「並行グラフ処理系」に関連して，僕自身のテーマにおいて非常に参考になった論文であるParallelizing Sequential Graph Computationsについて，その詳細をまとめました．","tags":["Parallel Graph Computation","Graph","Parallel Computation","GRAPE","Distributed Graph Processing"],"title":"Parallelizing Sequential Graph Computations","type":"post"},{"authors":[],"categories":[],"content":"ある人によれば\u0026hellip;  Simulation = For analysis and study\n  Emulation = For usage as a substitute\n  A simulator is an environment which models but an emulator is one that replicates the usage as on the original device or system.\n  Simulator mimics the activity of something that it is simulating. It \u0026ldquo;appears\u0026rdquo; (a lot can go with this \u0026ldquo;appears\u0026rdquo;, depending on the context) to be the same as the thing being simulated. For example the flight simulator \u0026ldquo;appears\u0026rdquo; to be a real flight to the user, although it does not transport you from one place to another.\n  Emulator, on the other hand, actually \u0026ldquo;does\u0026rdquo; what the thing being emulated does, and in doing so it too \u0026ldquo;appears to be doing the same thing\u0026rdquo;. An emulator may use different set of protocols for mimicking the thing being emulated, but the result/outcome is always the same as the original object. For example, EMU8086 emulates the 8086 microprocessor on your computer, which obviously is not running on 8086 (= different protocols), but the output it gives is what a real 8086 would give.\n また別の人によれば\u0026hellip;   Simulator is broader than Emulator    Simulator tends to imitate/model more global processes/things in general with ability to narrow the imitation down (e.g. capacitor simulator with presets representing some known models)    Emulator tends to imitate certain hardware devices with certain specification, known characteristics and properties (e.g. SNES emulator, Intel 8087 or Roland TB-303)   語源を辿ると\u0026hellip;   emulate is \u0026ldquo;to be equal\u0026rdquo; (looks like more aggressive and straightforward - rivalry) simulate is \u0026ldquo;to be similar\u0026rdquo; (looks like more sly and tricky - imitation)   日本語だと\u0026hellip;  Emulation: （代替可能なレベルでの）模倣 Simulation: 模擬  かな？🤔\nReference  Simulator or Emulator? What is the difference?  ","date":1572359078,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572359078,"objectID":"705d566c5c9beb942ffe89b0794f72f7","permalink":"/ja/post/simulator-vs-emulator/","publishdate":"2019-10-29T23:24:38+09:00","relpermalink":"/ja/post/simulator-vs-emulator/","section":"post","summary":"似て非なるもの","tags":["Simulator","Emulator","Terminology"],"title":"Emulator v.s. Simulator","type":"post"},{"authors":[],"categories":[],"content":"GitHub上でのmerge GitHub上で行えるmergeには3種類あります．\n Create a merge commit Squash and merge Rebase and merge  これらは，「merge commitの有無」「merge commitのauthorが誰になるのか」などの点で微妙に異なります．\n   Command merge commitの有無 merge commitのauthor merge元のbranchのcommit log     Create a merge commit 有 merge先 残る   Squash and merge 有 merge元 残らない   Rebase and merge 無  残る    Create a merge commit 「Create a merge commit」では，git merge --no-ffでmergeすることになります．つまり，merge先に新たなcommitが作成され，そのcommitがmerge元のcommitを取り込みます．このとき作成されるmerge commitのauthorはmerge先のauthorとして記録されます．\nこの方法は\n 「何をmergeしたのか」がmerge commitという形で記録として残る merge元のbranchがそのまま残るので変更箇所を追いやすい merge後に，merge元のbranchを削除したとしても，このbranchのcommit logがmerge先に残る  という特徴があります．わかりやすい一方で，「merge commitのauthorがmerge元ではない」のが（個人的に）「その人の頑張りを讃えたいのになぁ」とか思っちゃったりしてちょっと申し訳ない気がするとかしないとか．\n   Create a merge commit   Squash and merge 「Squash and merge」では，git merge --squashでmergeすることになります．つまり，merge元のcommitを一つのcommitにまとめた上で，merge先にmerge commitとして先頭に追加されます．このときのmerge commitのauthorはmerge元のauthorとなります．\nこの方法は\n 「何をmergeしたのか」がmerge commitという形で記録として残る 複数のcommitをまとめて一つにできるのでmerge先のcommit logがわかりやすい  という特徴があります．一方で，一度commitをまとめてしまうと，「どの変更が誰によってどのcommitで行われたのか」という情報が失われてしまうことになります．他の人の複数のcommitを一つのcommitに押し込むことになるので，個人的には若干怖さがあります．\n   Squash and merge   Rebase and merge 「Rebase and merge」では，まずmerge元のブランチにあるcommit列に対してgit rebaseして，commit列が一列になったところでfast-forwardの形でmergeが実行されます．\nこの方法は\n mergeした結果，merge先のcommit logが一直線で見やすい merge commitが作成されない  という特徴があります．\n   Rebase and merge   Reference  About merge methods on GitHub  ","date":1572346258,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572346258,"objectID":"23d6b53e02b5322745a0e712092cb5bf","permalink":"/ja/post/three-kinds-of-merge-on-github/","publishdate":"2019-10-29T19:50:58+09:00","relpermalink":"/ja/post/three-kinds-of-merge-on-github/","section":"post","summary":"GitHub上で実行できる3種類のmergeについて「どのようなものなのか？」をまとめました．","tags":["GitHub","Git","Tips"],"title":"GitHub上でのmerge","type":"post"},{"authors":[],"categories":[],"content":"Federated Social Webとは？ Federated Social Webとは，誤解を恐れず端的に言えば「分散Twitter」である．\n「分散Twitter」とは何かを説明するには，Twitterと対比するのがわかりやすい．TwitterはTwitter社が提供しているマイクロブログサービスで，ユーザーはTwitter社が管理するサーバー上に展開されているTwitterというシステム内にアカウントを作成し，テキストメッセージや動画像を投稿（ツイート）したり拡散（リツイート）したりすることができる．アカウントごとにタイムラインというインタフェースが提供され，ユーザーはタイムラインを通じてコンテンツを閲覧することができる．Twitterはアカウントを「Followする」という機能も実装している．これは「他のアカウントの投稿を自分のタイムラインに表示する機能」でユーザーは好みのコンテンツを投稿してくれるアカウントをフォローすることで，より簡単に好みのコンテンツを発見・消費することができるようになる．\nTwitterの抱える問題点は「Twitterというサービスが中央集権的である」という点である．「Twitterというサービスが中央集権的である」とは\n 「TwitterというシステムはTwitter社の管理するマシン上でのみ展開されているため，そのマシンが落ちるとTwitterというシステム全体が落ちてしまう（単一障害点）」 「ユーザーがTwitterに投稿した任意のコンテンツやデータは基本的にTwitter社の管理するマシンにしか残らない」 「ユーザーは投稿内容についてTwitter社の決めるルールに従わなければならない（コンテンツの価値判断についての自由がユーザーから剥奪される．少なくともTwitter社がコンテンツに対して検閲を行えばそれを回避する手段は存在しない）」 「Twitterというサービスを提供するTwitter社の決めるルールに，ユーザーの全員が従わなければならない」 「TwitterというサービスのしようがTwitter社の一存で決まるため，Twitterというシステムに乗っかろうとする外部の開発者は地位的にTwitter社の下につくことになる」 「Twitterの実装は公開されない（ので，ユーザーがなんらかの不具合に直面しても，ユーザー自身で修正することが根本的に不可能）」  ということ．\n「Twitterというシステムの管理者がTwitter社しかいない」と「ユーザーはTwitter社の決めたルールの中でした活動できない」ということになる．これは殊「コンテンツ共有」という文脈において大きな問題になる可能性がある．というのも，「コンテンツに対する価値判断やそれを発表することは，基本的に人間に与えられた自由である」からだ．いわゆる「表現の自由」ってやつだ．細かなことを言えば，法律が保証する「表現の自由」の範囲は「公共の福祉を侵害したり他者の自由を侵害しない」ような表現の自由であるようだが．ここで大事なのは，表現の自由を制約するのは「公共の福祉や他社の自由を侵害するかしないか」という社会的な合意であって，Twitterといった一私企業の決めたルールではないということだ．現状のSNSはその点で問題を抱えている（と自由を求めるユーザーは主張している）．無論，Twitter社の決めたルールの範囲内で楽しむので十分というユーザーもいるだろうし，なんならそっちの方が多数派な気もするが．\nそんな問題意識からFederated Social Webという概念が登場している．Federated Social Webが実現したいのは「中央集権ではない形で社会的な人間の在りようをインターネットの世界に実装すること」である．Federated Social Webでは，先に挙げた目的を「Cleint-ServerモデルとServer-Serverモデルの組み合わせ」で実現しようとしている．\n   Fededated Social Web   Federated Social Webでは「既存のTwitterのような仕組みを提供するserverが不特定多数の管理者（これは組織でも個人でもいい）によって提供され，彼らが提供するシステムにユーザーが乗っかる」というモデルである．\n「Federated」を英英辞典で引くと\n (of a country or organization) set up as a single centralized unit within which each state or division keeps some internal autonomy.\n とある．つまり，Social Networkingに必要な機能を提供するserverが，（単一の管理者によって定められたルールによって動くのではなくて）複数の管理者が自由に定めたルールに基づいて統治・管理されるということだ．ユーザーは自分の納得するルールで運用されているserverにぶら下がれば，そのユーザーにとって十分な自由を享受できるし，いやになれば異なるルールで動いている他のserverに移ることだって可能だ．さらに言えば「オレオレルール」で運用されるオレオレSNSを構築することだって許されている．\nActivityPubとは ActivityPubはFederated Social Webを実現する際の通信プロトコルだ．ActivityPubは「あるserverとそれにぶら下がっているclient間の通信プロトコル」と「連合を組むserver間の通信プロトコル」の2つのプロトコルを内包している．\n「あるserverとそれにぶら下がっているclient間の通信プロトコル」は，通常のSNSにおいて必要な投稿だとか他の人の行動のお知らせとかを受け取るために必要な通信を規定しているもの．\n「連合を組むserver間の通信プロトコル」は，不特定多数の管理者が運営するserver間で情報を共有するための通信を規定するもの．これがあることで，「Federated」なSocial Webが初めて実現できる．\nActivityPubでは，ユーザーは「他のユーザーからのお知らせを受け取るinboxと自分のシステム上での行動を他の人に通知するoutboxを持つActor」としてモデル化される．inbox/outboxの実体はwebの世界で言うところのURLに過ぎず，さらに言えばclientがserverにGET/POSTする際のapi endpointでしかない．あctivityPubではどんな形式のデータをやりとりするかも規定している．より具体的に言えば「SNSをWeb上で実現する際のJSONメッセージフォーマット」を規定するActivityStreamsの上にActivityPubは規定されている．\n要するに，client-server間の通信とclient-client間の通信のそれぞれについて，ActivityStreamsが定義するデータを用いたSNS上におけるActorの行動に対するCRUDを定義しているのがActivityPubである．\n疑問 不特定多数の管理者がそれぞれのルールでSNSを提供するときに，それらSNS同士がやり取りをするための統一的なデータ形式・APIを規定しているのがActivityPubということになるが，各SNSが独自機能を実装して独自データフォーマットを追加したときはどのように対応するのだろう．\nActivityPubは最低限実装されるべきAPIとして整備されるにしても，独自データフォーマットについては共有する方法とかは規定していない．ActivityPubには「JSON-LDを用いてActivityStreamsは拡張可能である」としている．やり取りされるJSONメッセージに未知のフィールドが存在していたら，無視するか適当に解釈するかしかないので，どうするのだろう．ただ，SNSというある程度要求されるAPIがサービスから予測がつくしそれ以上の独自性がなさそうという感覚からすればActivityStreamsで十分なのかもしれない．この点はActivityStreamsを読んでみないとわからないと思うので気が向いたらやろうかな．\nMastodon MastodonはActivityPubを実装しているウェブアプリケーションの1つ．ちょっと前にちょっと流行った．Mastodonの面白いところは，Social Webにおけるグローバルなuser identityをメールアドレスみたいな形式で表現できるようにしたこと．Web上でのIdentityはサービスと強固に結びついていて，現在でもGoogle，Facebook，GitHub認証のサービスがたくさんある．「私はAliceです」と，ただそれだけで主張することができるURLがWeb上には存在していなくて，「FacebookのAliceさん」とか「GoogleのAliceさん」という風にしか自分のことを表現できていない状態にある．Federated Social Webの実装例であるMastodonでは，\u0026lt;user_id\u0026gt;@\u0026lt;federation_id\u0026gt;みたいな形でユーザーのグローバルなIdentityを与えることにしていて，これは賢いなと思う．\n","date":1572252565,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572252565,"objectID":"483ffe32be9d68876584fd344ad24aaa","permalink":"/ja/post/what-is-activitypub/","publishdate":"2019-10-28T17:49:25+09:00","relpermalink":"/ja/post/what-is-activitypub/","section":"post","summary":"ActivityPubが目指すFederated Social Webについて考えてみました","tags":["ActivityPub","Federated Social Web","Distributed Social Network","Mastodon","Decentralization"],"title":"Federated Social WebとActivityPub","type":"post"},{"authors":[],"categories":[],"content":"共通鍵暗号 暗号化・復号で同一の鍵を用いる暗号化方式\nシナリオ  Aliceが秘密鍵$key$を作成し，Bobに安全に共有 Aliceがメッセージ$m$を$key$で暗号化$c = Enc(m, key)$し，Bobに送信 Bobが受け取った暗号文$c$を$key$で復号$m = Dec(c, key)$して平文$m$を得る  共通鍵暗号の満たすべき性質  正当性  $m = Dec(Enc(m, key), key)$が成立すること   秘匿性  暗号文$c$から平文$m$に関連する情報が得られないこと    共通鍵暗号に対する攻撃モデル 暗号文単独攻撃：Ciphertext Only Attack 攻撃者が「解読対象の暗号文$c^*$」と「盗聴した暗号文$c_1$，$c_2$，$c_3$\u0026hellip;$c_k$」を手元に持っている状況での攻撃．通信路の盗聴という攻撃に相当．\n既知平文攻撃：Known Plaintext Attack 攻撃者が「解読対象の暗号文$c^*$」と「（同一の鍵で暗号化された）ランダムな平文と暗号文の対$(m_1, c_1)$，$(m_2, c_2)$，$(m_3, c_3)$\u0026hellip;$(m_k, c_k)$」を手元に持っている状況での攻撃．過去の平文が特定済みであるような状況での攻撃に相当．\n選択平文攻撃：Chosen Plaintext Attack 攻撃者が「解読対象の暗号文$c^*$」を持ち，「攻撃者が選んだ任意の平文に対応する暗号文を自由に入手できる」ような状況での攻撃．\n選択暗号文攻撃：Chosen Ciphertext Attack 攻撃者が「解読対象の暗号文$c^$」を持ち，「攻撃対象の暗号文$c^$を入手する前の時点で，攻撃者が自分の選んだ暗号文に対応する平文を入手することができる」ような状況での攻撃．\n適応的選択暗号文攻撃：Adaptive Chosen Ciphertext Attack 攻撃者が「解読対象の暗号文$c^*$」を持ち，「攻撃者が選んだ任意の暗号文に対応する平文を自由に入手できる」ような状況での攻撃．\n鍵全数探索攻撃に対する共通鍵暗号の安全性 秘密鍵が$k$bitであるような共通鍵暗号では，$2^k$個の鍵を全部試せば必ず秘密鍵を得ることができる．共通鍵暗号では「鍵全数探索攻撃よりも効率的に秘密鍵を求めるアルゴリズムが存在しないこと」が安全性に対する条件である．\nさまざまな共通鍵暗号  ストリーム暗号  平文を小さい単位で順次処理していく方式 アルゴリズムを実行する回数が1回   ブロック暗号  平文を一定の大きさの単位で処理していく方式 アルゴリズムを実行する回数がブロックの個数分    バーナム暗号  👍  情報理論的安全性を持つ  たとえ，鍵全数探索を実行できる無限の計算能力を持っている攻撃者であっても解読できない（どれが本当の平文なのかがわからない）   処理が「平文と鍵でxor」と単純なので非常に高速   👎  少なくとも平文と同じ長さの秘密鍵が必要になるし，基本的に鍵は使い捨てなのでいくら鍵を用意しても足りないし，そもそもこの秘密鍵を安全に共有できるなら暗号化する必要がない 鍵の生成に「真性乱数」を用意しなければならず，長い鍵を作るには手間がかかる    ストリーム暗号  👍  バーナム暗号と比べて（安全性をやや犠牲にしながらも）効率性を向上   👎  擬似乱数生成器の安全性がストリーム暗号の安全性に直結する  過去の系列を見て未来の系列が予測できてしまえば解読されてしまう 擬似乱数生成器の初期化に用いる秘密鍵を特定されてしまうと解読されてしまう      ","date":1572250776,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572250776,"objectID":"933f01d72df16835e756a93a571c6943","permalink":"/ja/post/symmetric-key-encription-scheme/","publishdate":"2019-10-28T17:19:36+09:00","relpermalink":"/ja/post/symmetric-key-encription-scheme/","section":"post","summary":"暗号技術学習メモ #2","tags":["Cryptography","Memo","Symmetric Key Encryption"],"title":"共通鍵暗号","type":"post"},{"authors":[],"categories":[],"content":"暗号の基礎技術 暗号技術の中でも基礎となるもの．\n 暗号 鍵配送 ハッシュ関数 メッセージ認証コード デジタル署名 擬似乱数生成器  暗号 暗号とは，「正当な送信者と受信者以外に内容を秘匿する技術」のこと．送信者は平文に対して，なんらかの操作を施すことで，暗号文を生成する．この過程を暗号化という．一方で，受信者は暗号文に対してなんらかの操作を施すことで平文を得る．この過程を復号という．\n鍵配送 鍵配送とは，暗号化や復号に用いる鍵を安全に配送・共有するための技術や方式のこと．鍵は「第三者に知られないように」配送する必要があります．\nハッシュ関数 ハッシュ関数とは，任意長のビット列を入力として固定長のビット列を出力する関数のこと．同一の入力に対して同一の出力をする一方で，異なる入力に対して異なる出力となり，異なる入力に対して同一の出力にならないという性質が求められる．\nメッセージ認証コード メッセージ認証コードとは，「伝送路上を通ってきたデータが改ざんされていないこと」「データが期待した通信相手から送信されていること」を検証するための技術のこと．\nデジタル署名 デジタル署名とは，契約書における物理的なサインのデジタル版で，ユーザー認証とデータ認証を同時に実現する技術のこと．メッセージの改ざんを防ぎ，メッセージに対する署名は署名した本人でしか生成できないことから，後から署名者が署名した契約について否認することを防止することができる．\n擬似乱数生成器 真の乱数ではないにしても，暗号論的に安全とみなせる乱数列を生成するための技術のこと．\n","date":1572234048,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572234048,"objectID":"171b152bec97767e38aadfdd4c806b24","permalink":"/ja/post/basic-cryptographic-technologies/","publishdate":"2019-10-28T12:40:48+09:00","relpermalink":"/ja/post/basic-cryptographic-technologies/","section":"post","summary":"暗号技術学習メモ #1","tags":["Cryptography","Memo"],"title":"暗号の基礎技術","type":"post"},{"authors":[],"categories":[],"content":"情報セキュリティの構成要素 「情報セキュリティ」の言葉の指し示す意味範囲はOECDの情報セキュリティガイドラインやISO/IEC TR133351として国際的に定義されている．\nISO/IEC TR13335にて情報セキュリティとは下記6要素のことを指すとされている．\n 機密性 Confidentiality 完全性 Integrity 可用性 Availability 責任追跡性 Accountability 真正性 Authenticity 信頼性 Reliability  機密性 Confidentiality  意味  意図した相手以外に情報が漏れないこと   リスク  盗聴や内部からの情報漏洩   対策  暗号技術    完全性 Integrity  意味  情報が正確であること   リスク  情報の改ざん，ノイズによるビット反転・ビットの欠落   対策  誤り訂正符号，ハッシュ関数，メッセージ認証コード，デジタル署名    可用性 Availability  意味  ある情報にアクセスすることが許されている主体が，任意の時点で情報にアクセスすることができること   リスク  システムへの過負荷，災害，意図しないロック   対策  システムの多重化，クラウド化，負荷分散    責任追跡性 Accountability  意味  ユーザやシステムの振る舞いについて説明が可能であること   リスク  ログの改ざん，否認   対策  ロギング，デジタル署名（否認防止）    真正性 Authenticity  意味  観測されるユーザやシステムの振る舞いが，その主体によるものであること（なりすましではない）   リスク  なりすまし   対策  認証，デジタル署名（なりすまし防止）    信頼性 Reliability  意味  システムが一貫して動作すること   リスク  盗聴や内部からの情報漏洩   対策  システムの多重化，負荷の監視      正確には企業のセキュリティリスクを査定する際のガイドラインを定めたものになっている．通称GMITS（Guidelines for the Management for IT Security） \u0026#x21a9;\u0026#xfe0e;\n   ","date":1572231267,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572231267,"objectID":"856dc76386ac6865a6fbad2e2fc6b522","permalink":"/ja/post/six-elements-of-infomation-security/","publishdate":"2019-10-28T11:54:27+09:00","relpermalink":"/ja/post/six-elements-of-infomation-security/","section":"post","summary":"暗号技術学習メモ #0","tags":["Security","Memo"],"title":"情報セキュリティの構成要素","type":"post"},{"authors":[],"categories":[],"content":"ありがちな会話 「Web Application Frameworkと言ったら，やっぱりRuby on Railsだよね！」\n「Webのフロント開発ではjQueryってライブラリがあってだな\u0026hellip;」\n「最近だと，FacebookがJavascriptのフレームワークとしてReactを発表してるよね」\n「ReactよりAngular JSの方がいいよ」\nWeb系の技術の話では，たくさんのFrameworkだのLibraryだのが提案されて使用されていると思います．僕なんかも初めて聞くものがあれば，すぐにググってその正体を知ろうとするのですが，どれもこれも「これは便利なWeb Frameworkです」ぐらいしか教えてくれません．Frameworkの正体って一体何なのでしょうか．気になったので調べてみました．\nLibrary v.s. Framework Library Libraryは，コードの再利用を目的とした「便利な関数やクラスの（ただの）コレクション」のようなものです．Libraryに含まれる関数やクラスは，ある特定の処理を達成するロジックを含んでいて，開発者がそれらを利用することで開発を進めていくことになります．例えばグラフアルゴリズムのライブラリなら，Dijkstra法とかBellman-Ford法を実装した関数が含まれていて，開発者がその関数を利用することでアプリケーションを開発します．アプリケーションの開発者が書いているロジックにライブラリの関数が利用されるので，アプリケーションの制御は開発者側にあります．\nLibraryを用いることで，他の人の仕事の恩恵に与りながら開発を進めることができます．これはとても嬉しいことです．開発の速度が上がります．\n要するに「Libraryのコードを開発者が利用する」のがLibraryです．\nFramework Frameworkは， (初期化から実際の処理，終了といった) アプリケーションの制御は 全てFramework側にあります ．アプリケーションを開発者は，Frameworkが要求するロジックを部品としてFrameworkに提供することになるわけです．Frameworkはアプリケーションの骨格を定義しているともいるかもしれません．外枠だけ定義しているのです．このFrameworkの持つ性質は，ソフトウェア工学的には「制御の反転 IoC (Inversion of Control)」と呼ばれています．\nFrameworkを用いることで，アプリケーション開発者は設計についてあれやこれや悩む必要がなくなります．Frameworkの要求に従っていれば，それなりの品質のシステムが勝手に出来上がることになるからです．また，Frameworkに則ってアプリケーションを開発していくと，コードに一貫性が生まれます．これはコードに可読性を与え，メンテナンスがしやすくなります．\n一方で，Frameworkは「制約の集合」でもあります．アプリケーションの全体としての制御が開発者の自由にできないわけですから，Frameworkを導入するならばFrameworkの課すルールを理解する必要があります．ルールを理解するのには時間がかかるものですし，Frameworkのルールに窮屈さを感じることもあるかもしれません．小規模なその場限りの開発現場などでは，この制約がFrameworkのメリットを上回ることがあるので，Frameworkを導入しないこともあるでしょう．\n要するに「Frameworkが開発者のコードを利用する」のがFrameworkです．\n   LibraryとFrameworkとあなた   参考  ソフトウエアのフレームワークとはなにか (日経XTECH) フレームワークとライブラリの違い (Qiita) The Difference Between a Framework and a Library (freeCodeCamp) What is the difference between a framework and a library? (stackoverflow)  ","date":1572011115,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1572011115,"objectID":"e54cb1b7589f8c07b1423f581d1a62ba","permalink":"/ja/post/what-is-the-difference-between-library-and-framework/","publishdate":"2019-10-25T22:45:15+09:00","relpermalink":"/ja/post/what-is-the-difference-between-library-and-framework/","section":"post","summary":"ちゃんと説明できますか？","tags":["Framework","Library"],"title":"FramworkとLibraryの違い","type":"post"},{"authors":[],"categories":[],"content":"flagパッケージ Golangでは，標準パッケージとしてコマンドライン引数を扱うflagパッケージが付属しています．「痒い所に手が届く」とはこのことですね．\nフラグの立っていないコマンドライン引数の取得 Parse()の後にArgs()で[]stringとして取得できます．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { flag.Parse() args := flag.Args() fmt.Println(args) } $ go run with-no-flag0.go a b c [a b c] $ go run with-no-flag0.go 1 2 3 [1 2 3] $n$番目の要素のみを取り出したい場合はArg(n)でstringとして取得できます．$n$番目の要素が存在しない場合は\u0026quot;\u0026quot;が返ってくるようです．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { flag.Parse() fmt.Println(flag.Arg(0), flag.Arg(1)) } $ go run with-no-flag1.go hoge fuga hoge fuga $ go run with-no-flag1.go 1 1 フラグの立っているコマンドライン引数の取得 型名()もしくは型名Var()で，フラグを定義したのち，Parse()でそれぞれの変数を取得できます．\nフラグの定義は「フラグ名」「デフォルト値」「ヘルプメッセージ」で行います．\n型名()の場合は，指定した型へのポインタが返ってきます．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { var ( i = flag.Int(\u0026#34;int\u0026#34;, 0, \u0026#34;int flag\u0026#34;) s = flag.String(\u0026#34;str\u0026#34;, \u0026#34;default\u0026#34;, \u0026#34;string flag\u0026#34;) b = flag.Bool(\u0026#34;bool\u0026#34;, false, \u0026#34;bool flag\u0026#34;) ) flag.Parse() fmt.Println(*i, *s, *b) } $ go run with-flag0.go -int 2 -str hello -bool true 2 hello true $ go run with-flag0.go 0 default false 型名Var()の場合は，引数で渡した変数に代入されます．また，適切な値を渡さないと怒られます．ダメな理由も教えてくれるので怒られがいがあります．定義していないフラグも受け付けてくれません．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { var ( d time.Duration f float64 ) flag.DurationVar(\u0026amp;d, \u0026#34;dur\u0026#34;, 1 * time.Second, \u0026#34;duration flag\u0026#34;) flag.Float64Var(\u0026amp;f, \u0026#34;float\u0026#34;, 0.1, \u0026#34;float flag\u0026#34;) flag.Parse() fmt.Println(d, f) } $ go run with-flag1.go -dur 1h -float 2.3 1h0m0s 2.3 $ go run with-flag1.go -float str invalid value \u0026#34;str\u0026#34; for flag -float: strconv.ParseFloat: parsing \u0026#34;str\u0026#34;: invalid syntax Usage of /var/folders/.../with-flag1: -dur duration duration flag (default 1s) -float float float flag (default 0.1) exit status 2 フラグの書き方 フラグの書き方は次の2通りが可能です．\n -flag value -flag=value  ただし，Bool値を取得する場合はflag=valueを使った方がいいかもしれません．というのも， フラグの型がBool値かつ引数が続かない場合，フラグが立っただけでtrueとなるからです．\nつまり，フラグを立ててBool値を取得したい場合は-bool=true/-bool=falseとしなければならないということです．-bool falseではtrueとなってしまいます．また-bool false以降の引数が全てフラグ無しで渡された引数として評価されてしまいます．注意が必要ですね．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { var ( i = flag.Int(\u0026#34;int\u0026#34;, 0, \u0026#34;int flag\u0026#34;) s = flag.String(\u0026#34;str\u0026#34;, \u0026#34;default\u0026#34;, \u0026#34;string flag\u0026#34;) b = flag.Bool(\u0026#34;bool\u0026#34;, false, \u0026#34;bool flag\u0026#34;) ) flag.Parse() fmt.Println(*i, *s, *b) } $ go run with-flag0.go -bool false -int 123 -str abc # falseを含むそれ以降が全て非フラグで渡されたコマンドライン引数として扱われる 0 default true $ go run with-flag0.go -bool=true -int 123 -str abc 123 abc true $ go run with-flag0.go -bool=false -int 123 -str abc 123 abc false ちなみに-hでヘルプを表示してくれます．賢いですね．\n$ go run with-flag0.go -h Usage of /var/folders/.../with-flag0: -bool bool flag -int int int flag -str string string flag (default \u0026#34;default\u0026#34;) exit status 2 コマンドライン引数の個数を数える NArg()で非フラグなものを，NFlag()でフラグなものをカウントできます．\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; ) func main() { flag.Int(\u0026#34;int\u0026#34;, 0, \u0026#34;int flag\u0026#34;) flag.String(\u0026#34;str\u0026#34;, \u0026#34;default\u0026#34;, \u0026#34;string flag\u0026#34;) flag.Bool(\u0026#34;bool\u0026#34;, false, \u0026#34;bool flag\u0026#34;) flag.Parse() fmt.Println(\u0026#34;non flag:\u0026#34;, flag.NArg()) fmt.Println(\u0026#34;flag:\u0026#34;, flag.NFlag()) } $ go run flag-test.go -int 1 -str foo -bool=true a b non flag: 2 flag: 3 $ go run flag-test.go -int 1 -str foo -bool true a b non flag: 3 flag: 3 $ go run flag-test.go -bool true -int 1 -str foo a b non flag: 7 flag: 1 $ go run flag-test.go a b c -bool=true -str foo non flag: 6 flag: 0 $ go run flag-test.go -bool=true -str foo a b c non flag: 3 flag: 2 $ go run flag-test.go a b c non flag: 3 flag: 0 $ go run flag-test.go -bool=true -str foo non flag: 0 flag: 2 ","date":1571997871,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1571997871,"objectID":"0bf003175f088b27d9d436b60a11ab98","permalink":"/ja/post/handle-commandline-args-with-flag-package/","publishdate":"2019-10-25T19:04:31+09:00","relpermalink":"/ja/post/handle-commandline-args-with-flag-package/","section":"post","summary":"flagパッケージでコマンドライン引数を賢く扱おう！","tags":["Golang","Tips"],"title":"🚩flagパッケージでコマンドライン引数を扱う","type":"post"},{"authors":[],"categories":[],"content":"はじめに 最近はもっぱら卒論の実装ばかりやっています，zakです．\nプログラム書くのって難しいですよね．僕にとってはとても難しいので，わからないことがあったらデキる人のブログを参考にさせていただいたりしています． そんな中で，自分もコードを書くことが増えてきて，そこで得た知識をなんらかの形で発信できないかなと思って，このブログを思いつきで始めました．\n採用技術 このブログはサイトジェネレータとしてHugo，ホスティングサービスとしてGitHub Pagesを採用しています．\nHugoはGolangで記述されたオープンソースの静的サイトジェネレーターです．設定をtomlで書いて，記事をMarkdownで書いて，それをHugoがHTMLその他ファイルに爆速でしたためてくれます．真面目にウェブサイトを作ろうとすると，「書きにくいHTMLで文章を書いて，CSSで見栄えを整えて」という感じで作っていくことになります．HTMLってあんまり洗練されていなくて人間にとっては読みずらいですよね．一方でMarkdownは文法が簡単なので，箇条書きでメモってるぐらいの感覚で構造を持った文章が書けてしまいます．Hugoを使うことで，サイト作成者はMarkdownというわかりやすい文法で記事を書くことができ，本来の仕事に専念できるわけです．\nHugoのいいところはそれだけではありません．Hugoはその便利さから，多くのユーザーから愛されていて，そのユーザーらがそれぞれ美しいデザインテーマを公開してくれています．どれもセンスが良く，機能面でも充実しています．このテーマはオープンソースで公開されているので，カスタマイズも簡単です．そこらへんのブログサービスを利用すると，テーマがどれも陳腐で不満ですよね．\n今回はMarkdownで記事が執筆できるところとHugoで用いることができるAcademicというテーマが気に入ったので，Hugoを使うことにしました．\nGitHub Pagesは，GitHubが提供している静的サイトのホスティングサービスです．GitHubのアカウントさえあれば，誰でも静的なサイトを公開することができます．何より無料なので，これを使わない手はありません．サイトのソースコードをGitHubで管理しつつ公開もできちゃうなんて，GitHubは太っ腹ですね．\nGitHub Pagesの他にもホスティングサービスはありますが，ソースコード管理と一緒にホスティングできるところが便利だと思ったので採用しました．\n 気が向いたら，もうちょっと追記します 🙇\n ","date":1571991698,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1571991698,"objectID":"7c7a7a98c108a8c69ca3bde923f50c92","permalink":"/ja/post/about-this-site/","publishdate":"2019-10-25T17:21:38+09:00","relpermalink":"/ja/post/about-this-site/","section":"post","summary":"このブログの技術的なところをまとめてみました！まだ途中です :bow:","tags":["Hugo","GitHub","Golang"],"title":"HugoとGitHub Pagesでブログを作ってみた！","type":"post"},{"authors":[],"categories":[],"content":"ご挨拶 はじめまして．技術ブログ始めてみました．ぼちぼち投稿します 👍\n","date":1571990829,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1571990829,"objectID":"2247257f33c5eaa1cd0616bf37b07249","permalink":"/ja/post/first-post/","publishdate":"2019-10-25T17:07:09+09:00","relpermalink":"/ja/post/first-post/","section":"post","summary":"ブログを始めてみたのでお知らせです．","tags":[],"title":"🚀最初の投稿","type":"post"}]